Path: /lib/main.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_easyloading/flutter_easyloading.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:twins/features/auth/presentation/pages/login_page.dart';
import 'package:twins/features/auth/presentation/providers/auth_provider.dart';
import 'package:twins/features/profile/presentation/providers/profile_provider.dart';
import 'package:twins/features/splash/presentation/splash_page.dart';
import 'package:twins/models/user_model.dart';
import 'package:twins/pages/onboarding/onboarding_page.dart';
import 'package:twins/services/genius_result_service.dart';
import 'package:twins/style/light_theme.dart';
import 'package:twins/utilities/shared_preferences_utils.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:twins/pages/home_page.dart';
import 'package:twins/services/api_service.dart';
import 'package:twins/services/iap_service.dart';
import 'package:twins/services/message_capability_service.dart';
import 'package:twins/services/storage/message_count_secure_storage.dart';
import 'package:twins/style/typography.dart';
import 'package:twins/style/values.dart';
import 'package:twins/utilities/analytics.dart';
import 'package:twins/utilities/key.dart';
import 'package:twins/utilities/sentry.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:provider/provider.dart' as prv;
import 'package:logger/logger.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'utilities/env.dart';
void main() async {
  GoogleFonts.config.allowRuntimeFetching = false;
  WidgetsFlutterBinding.ensureInitialized();
  await Supabase.initialize(
    url: Env.supabaseUrl,
    anonKey: Env.supabaseAnonKey,
  );
  Analytics.initialize();
  SystemChrome.setSystemUIOverlayStyle(SystemUiOverlayStyle.dark);
  final double screenWidth = MediaQueryData.fromView(WidgetsBinding.instance.window).size.width;
  if (screenWidth < 500) {
    await SystemChrome.setPreferredOrientations([
      DeviceOrientation.portraitUp,
      DeviceOrientation.portraitDown,
    ]);
  } else {
    await SystemChrome.setPreferredOrientations([
      DeviceOrientation.landscapeLeft,
      DeviceOrientation.landscapeRight,
    ]);
  }
  configLoading();
  await SharedPreferencesUtil.init();
  await runAppSafely(GeniusApp());
}
void configLoading() {
  EasyLoading.instance
    ..displayDuration = const Duration(milliseconds: 500)
    ..indicatorType = EasyLoadingIndicatorType.threeBounce
    ..loadingStyle = EasyLoadingStyle.custom 
    ..indicatorSize = 20.0
    ..radius = 3.0
    ..backgroundColor = C.GENIUS_PRIMARY
    ..indicatorColor = Colors.white
    ..textColor = Colors.white
    ..maskColor = Colors.black.withOpacity(0.5)
    ..userInteractions = false;
}
class GeniusApp extends HookWidget {
  @override
  Widget build(BuildContext context) {
    useEffect(() {
      Analytics.trackAppOpen();
      return;
    }, []);
    return prv.MultiProvider(
      providers: [
        prv.Provider(create: (_) => Logger()),
        prv.Provider(create: (_) => const FlutterSecureStorage()),
        prv.Provider(
          create: (context) => MessageCountSecureStorage(
            context.read(),
          ),
        ),
        prv.ChangeNotifierProvider(create: (_) => IapService()),
        prv.ChangeNotifierProvider(create: (_) => ApiService()),
        prv.ChangeNotifierProvider(
            create: (context) => MessageCapabilityService(
                  iapService: context.read(),
                  messageCountSecureStorage: context.read(),
                  secureStorage: context.read(),
                )),
      ],
      child: MaterialApp(
        title: 'Genius',
        locale: LOCALE_JAPANESE,
        navigatorKey: NAVIGATOR_KEY,
        debugShowCheckedModeBanner: false,
        theme: lightTheme,
        builder: EasyLoading.init(),
        home: Consumer(
          builder: (context, ref, child) {
            ref.watch(geniusResultServiceProvider);
            final userState = ref.watch(profileNotifierProvider);
            final authenticationIsLoading = ref.watch(isAuthenticationLoadingProvider);
            final userIsComplete = ref.watch(userIsCompletedProvider);
            final isAuthenticated = ref.watch(isUserAuthenticatedProvider);
            if (authenticationIsLoading || userState == const UserState.loading()) {
              return const SplashPage();
            } else if (isAuthenticated) {
              if (userIsComplete) {
                return HomePage();
              } else {
                return const OnboardingPage();
              }
            } else {
              return const LoginPage();
            }
          },
        ),
      ),
    );
  }
}
---
Path: /lib/pages/genius_home_page.dart

import 'package:flutter/material.dart';
import 'package:twins/components/app_asset.dart';
import 'package:twins/components/static_decoration.dart';
import 'package:twins/features/profile/presentation/providers/profile_provider.dart';
import 'package:twins/notifiers/modules_notifier.dart';
import 'package:twins/pages/learn_pages/modules_page.dart';
import 'package:twins/providers/genius_result_provider.dart';
import 'package:twins/style/light_theme.dart';
import 'package:twins/style/values.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:gap/gap.dart';
class GeniusHomePage extends HookConsumerWidget {
  final int _animationTime = 1000; 
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final userName = ref.watch(userProfileOrNullProvider)?.name;
    final userLevel = ref.watch(userLevelOrEiken5Provider);
    final vocabularyScore = ref.watch(vocabularyScoreProvider(level: userLevel));
    final listeningScore = ref.watch(listeningScoreProvider(level: userLevel));
    final modules = ref.watch(modulesNotifierProvider);
    final progression = ref.watch(
      levelProgressProvider(
        level: userLevel,
        modules: modules.maybeMap(
          orElse: () => [],
          data: (data) => data.value,
        ),
      ),
    );
    return RefreshIndicator(
      onRefresh: () async {
        await ref.read(modulesNotifierProvider.notifier).getModules();
      },
      child: Stack(
        children: [
          Column(
            children: [
              Container(
                color: const Color(0xFF3D5CFF),
                padding: const EdgeInsets.fromLTRB(20, 50, 20, 60),
                child: Row(
                  children: [
                    RichText(
                      text: TextSpan(children: [
                        TextSpan(
                            text: 'Hi, ${userName ?? 'User'}\n',
                            style: lightTheme.textTheme.titleLarge?.copyWith(
                                fontWeight: FontWeight.bold, color: Colors.white, fontSize: 24)),
                        TextSpan(
                            text: 'Let\'s start learning',
                            style: lightTheme.textTheme.bodySmall?.copyWith(
                                fontWeight: FontWeight.w400, color: Colors.white, fontSize: 14)),
                      ]),
                    ),
                    const Spacer(),
                    CircleAvatar(
                      backgroundColor: const Color(0xFFCEECFE),
                      radius: 45,
                      child: Image.asset(AppAsset.geniusTeacher),
                    )
                  ],
                ),
              ),
              Expanded(
                child: SingleChildScrollView(
                  physics: const AlwaysScrollableScrollPhysics(),
                  child: Container(
                    width: double.infinity,
                    padding: const EdgeInsets.only(top: 60, left: 20, right: 20),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'My Score',
                          style: lightTheme.textTheme.titleMedium
                              ?.copyWith(color: const Color(0xFF1F1F39)),
                        ),
                        height05,
                        _myScoreWidget(
                          readingScore: vocabularyScore,
                          readingTotal: 400,
                          listeningScore: listeningScore,
                          listeningTotal: 300,
                        ),
                        height10,
                        Container(
                          padding: const EdgeInsets.only(left: 20, top: 20),
                          decoration: BoxDecoration(
                            border: Border.all(color: C.GENIUS_GREY),
                            borderRadius: BorderRadius.circular(15.0),
                            color: C.GENIUS_SKY,
                          ),
                          child: Row(
                            children: [
                              Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
                                const Text('Learn the basics',
                                    style: TextStyle(
                                        fontSize: 18,
                                        fontWeight: FontWeight.w500,
                                        color: Color(0xFF1F1F39))),
                                const Text('In your first lession learn\nabout this and that.',
                                    style: TextStyle(
                                        fontWeight: FontWeight.w400,
                                        color: Color(0xFF858588),
                                        fontSize: 13)),
                                customHeight(45),
                                FilledButton(
                                    onPressed: () => {},
                                    style: ButtonStyle(
                                        backgroundColor: MaterialStateColor.resolveWith(
                                            (states) => const Color(0xFFBB78DA)),
                                        padding: MaterialStateProperty.resolveWith((states) =>
                                            const EdgeInsets.symmetric(
                                                horizontal: 25, vertical: 15)),
                                        shape: MaterialStateProperty.all(RoundedRectangleBorder(
                                            borderRadius: BorderRadius.circular(5)))),
                                    child: const Text(
                                      'Get Started',
                                      style: TextStyle(fontSize: 14, fontWeight: FontWeight.w700),
                                    )),
                                height20
                              ]),
                              Expanded(
                                child: Image.asset(AppAsset.characterIllustration),
                              )
                            ],
                          ),
                        ),
                        height15,
                        Text(
                          'Choose your module',
                          style: lightTheme.textTheme.titleMedium
                              ?.copyWith(color: const Color(0xFF1F1F39)),
                        ),
                        ModulesPage(),
                        height20,
                      ],
                    ),
                  ),
                ),
              )
            ],
          ),
          Positioned(
              left: 0,
              right: 0,
              top: 150,
              child: _progressionCard(
                moduleLevel: 'Eiken 5',
                progress: progression, 
              )),
        ],
      ),
    );
  }
  Widget _progressionCard({
    required String moduleLevel,
    required double progress,
  }) {
    TextStyle? textNormal = lightTheme.textTheme.bodySmall
        ?.copyWith(color: const Color(0xFF858597), fontWeight: FontWeight.w400);
    return Container(
      decoration: BoxDecoration(
          color: C.GENIUS_WHITE,
          border: Border.all(color: C.GENIUS_GREY),
          borderRadius: const BorderRadius.all(Radius.circular(15.0))),
      width: double.infinity,
      margin: const EdgeInsets.symmetric(horizontal: 20),
      padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 4),
      child: Stack(
        children: [
          Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              height20,
              Text('Progression', style: textNormal),
              const Gap(S.x5),
              ClipRRect(
                borderRadius: BorderRadius.circular(50),
                child: TweenAnimationBuilder(
                  curve: Curves.easeOutCubic,
                  duration: Duration(milliseconds: _animationTime),
                  tween: Tween<double>(begin: 0, end: progress),
                  builder: (context, value, _) => LinearProgressIndicator(
                    minHeight: 10,
                    color: C.GENIUS_YELLOW,
                    backgroundColor: C.GENIUS_GREY,
                    value: value,
                  ),
                ),
              ),
              height05,
            ],
          ),
          Align(
            alignment: Alignment.topRight,
            child: FilledButton.tonal(
              style: ButtonStyle(
                  backgroundColor:
                      MaterialStateColor.resolveWith((states) => const Color(0xFFF6F5FB)),
                  padding: MaterialStateProperty.resolveWith(
                      (states) => const EdgeInsets.symmetric(horizontal: 25, vertical: 8))),
              child: Text(moduleLevel, style: const TextStyle(color: C.GENIUS_PRIMARY)),
              onPressed: () => {},
            ),
          )
        ],
      ),
    );
  }
  Widget _myScoreWidget(
      {double readingScore = 0, 
      int readingTotal = 100,
      double listeningScore = 0, 
      int listeningTotal = 100}) {
    TextStyle? textBold = lightTheme.textTheme.bodySmall
        ?.copyWith(color: const Color(0xFF1F1F39), fontWeight: FontWeight.w500);
    TextStyle? textNormal = lightTheme.textTheme.bodySmall
        ?.copyWith(color: const Color(0xFF858597), fontWeight: FontWeight.w400);
    return Container(
      padding: const EdgeInsets.fromLTRB(15, 25, 8, 5),
      decoration: BoxDecoration(
        border: Border.all(color: C.GENIUS_GREY),
        borderRadius: BorderRadius.circular(15.0),
        color: C.GENIUS_WHITE,
      ),
      child: Column(
        children: [
          TweenAnimationBuilder(
            curve: Curves.easeOutCubic,
            duration: Duration(milliseconds: _animationTime),
            tween: Tween<double>(begin: 0, end: readingScore),
            builder: (context, value, _) => Row(children: [
              SizedBox(
                height: 20,
                width: 20,
                child: CircularProgressIndicator(
                  value: value,
                  backgroundColor: C.GENIUS_GREY,
                  color: C.GENIUS_PRIMARY,
                ),
              ),
              customWidth(10),
              Text(
                'Reading & Vocabulary',
                style: textBold,
              ),
              const Spacer(),
              RichText(
                  text: TextSpan(children: [
                TextSpan(text: '${(value * readingTotal).toInt()}', style: textBold),
                TextSpan(text: '/$readingTotal', style: textNormal),
              ])),
            ]),
          ),
          customHeight(10),
          TweenAnimationBuilder(
            curve: Curves.easeOutCubic,
            duration: Duration(milliseconds: _animationTime),
            tween: Tween<double>(begin: 0, end: listeningScore),
            builder: (context, value, _) => Row(children: [
              SizedBox(
                height: 20,
                width: 20,
                child: CircularProgressIndicator(
                  value: value,
                  backgroundColor: C.GENIUS_GREY,
                  color: C.GENIUS_PRIMARY,
                ),
              ),
              customWidth(10),
              Text('Listening', style: textBold),
              const Spacer(),
              RichText(
                  text: TextSpan(children: [
                TextSpan(text: '${(value * listeningTotal).toInt()}', style: textBold),
                TextSpan(text: '/$listeningTotal', style: textNormal),
              ])),
            ]),
          ),
          customHeight(5),
          Row(children: [
            Text(
              'This score reflects your success rate.',
              style: textNormal?.copyWith(fontSize: 10),
            ),
            const Spacer(),
            const Icon(
              size: 30,
              Icons.info,
              color: C.GENIUS_YELLOW,
            ),
          ]),
        ],
      ),
    );
  }
}
---
Path: /lib/pages/home_page.dart

import 'package:animated_text_kit/animated_text_kit.dart';
import 'package:auto_size_text/auto_size_text.dart';
import 'package:flutter/material.dart';
import 'package:twins/components/static_decoration.dart';
import 'package:twins/features/auth/presentation/providers/auth_provider.dart';
import 'package:twins/features/category/presentation/widgets/category_modules_section.dart';
import 'package:twins/features/category/presentation/widgets/category_section.dart';
import 'package:twins/features/profile/presentation/providers/profile_provider.dart';
import 'package:twins/mixins/widget.dart';
import 'package:twins/models/api/lesson_request.dart';
import 'package:twins/models/api/module_request.dart';
import 'package:twins/models/api/section_request.dart';
import 'package:twins/models/results/section_result.dart';
import 'package:twins/notifiers/modules_notifier.dart';
import 'package:twins/pages/account/account_page.dart';
import 'package:twins/pages/exercices/completion_page.dart';
import 'package:twins/pages/exercices/exercises_page.dart';
import 'package:twins/pages/learn_pages/modules_page.dart';
import 'package:twins/pages/onboarding/widget/score_indicator_widget.dart';
import 'package:twins/providers/genius_result_provider.dart';
import 'package:twins/style/genius_button_style.dart';
import 'package:twins/style/values.dart';
import 'package:twins/widgets/core/genius_button.dart';
import 'package:twins/widgets/rive/image_or_rive.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:percent_indicator/circular_percent_indicator.dart';
import 'learn_pages/module_page.dart';
class PageSetting {
  PageSetting({
    required this.page,
    this.isScrollable = false,
  });
  final Widget page;
  final bool isScrollable;
}
class HomePage extends HookConsumerWidget with PageWidget<void> {
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final scrollController = ScrollController();
    final userName = ref.watch(userProfileOrNullProvider)?.name;
    final userEmail = ref.watch(authenticatedUserProvider)?.email ?? "";
    final userLevel = ref.watch(userLevelOrEiken5Provider);
    final userCharacter = ref.watch(userProfileOrNullProvider)?.character;
    final usedCharacter = userCharacter ?? 'assets/rive/character.riv';
    final vocabularyScore = ref.watch(vocabularyScoreProvider(level: userLevel));
    final listeningScore = ref.watch(listeningScoreProvider(level: userLevel));
    final modulesAsync = ref.watch(modulesNotifierProvider);
    List<GeniusModule> modules = modulesAsync.maybeMap(
      orElse: () => [],
      data: (data) => data.value,
    );
    GeniusModule? continueModule = ref.watch(
      moduleToWorkOnProvider(
        modules: modules,
        level: userLevel,
      ),
    );
    Future<void> onContinue() async {
      if (continueModule != null) {
        ModulePage(
          module: continueModule,
        ).show();
        LessonData? lessonData;
        for (var lesson in continueModule.lessons) {
          final lessonProgress = ref.read(
            lessonProgressProvider(
              level: userLevel,
              module: continueModule.key,
              lesson: lesson.key,
              lessonData: continueModule.lessons.firstWhere((element) => element.key == lesson.key),
            ),
          );
          if (lessonProgress < 1.0) {
            lessonData = lesson;
            break;
          }
        }
        if (lessonData != null) {
          final lessonResult = ref.watch(
            lessonResultProvider(
              level: userLevel,
              module: continueModule.key,
              lesson: lessonData.key,
            ),
          );
          final sectionDoneCount = lessonResult == null ? 0 : lessonResult.sections.length;
          SectionData? sectionData;
          for (var i = 0; i < lessonData.sections.length; i++) {
            if (i == sectionDoneCount) {
              sectionData = lessonData.sections[i];
              break;
            }
          }
          if (sectionData != null) {
            SectionResult? result = await ExercisesPage(
              section: sectionData,
              lesson: lessonData,
            ).show();
            if (result != null) {
              await CompletionPage(
                result: result,
                moduleKey: continueModule.key,
                lessonKey: lessonData.key,
                sectionKey: sectionData.type.name,
              ).show();
            }
          }
        }
      }
    }
    return Scaffold(
      extendBody: true,
      body: SafeArea(
        child: Container(
          padding: const EdgeInsets.only(top: 35, left: 60, right: 40),
          decoration: BoxDecoration(color: Colors.white, borderRadius: BorderRadius.circular(50)),
          child: Column(
            children: [
              _buildHeader(context, userName, userEmail),
              customHeight(50),
              Expanded(
                child: Row(
                  children: [
                    Expanded(
                      flex: 9,
                      child: RefreshIndicator(
                        onRefresh: () async {
                          await ref.read(modulesNotifierProvider.notifier).getModules();
                        },
                        child: _buildMainComponent(
                          scrollController: scrollController,
                          onContinue: onContinue,
                          onAiChat: () {},
                          userCharacter: usedCharacter,
                          continueModule: continueModule,
                        ),
                      ),
                    ),
                    width15,
                    Expanded(
                      flex: 4,
                      child: SingleChildScrollView(
                          padding: EdgeInsets.zero,
                          child: buildMyProgress(
                            readinessValue: 67 / 100,
                            listeningScore: listeningScore,
                            readingScore: vocabularyScore,
                          )),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
Widget _buildHeader(BuildContext context, String? userName, String userEmail) {
  const textStyle = TextStyle(
      fontFamily: 'Poppins', fontWeight: FontWeight.w700, fontSize: 24, color: Colors.black);
  return Row(
    children: [
      GeniusButton(
          style: GeniusButtonStyle.greyLight,
          onPressed: () => {},
          child: AutoSizeText(
            'For Eiken 5',
            style: textStyle.copyWith(fontSize: 16),
          )),
      const Spacer(),
      InkWell(
        onTap: () =>
            Navigator.push(context, MaterialPageRoute(builder: (context) => AccountPage())),
        child: Container(
            padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 11),
            decoration: BoxDecoration(color: Colors.blue, borderRadius: BorderRadius.circular(8)),
            child: Image.asset('assets/icons/setting-icon.png')),
      ),
      customWidth(30),
      Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
        AutoSizeText(userName ?? 'Suzuki Ichiro', style: textStyle.copyWith(fontSize: 16)),
        AutoSizeText(userEmail,
            style: textStyle.copyWith(
                fontWeight: FontWeight.w400, fontSize: 13.33, color: const Color(0xFF757070))),
      ])
    ],
  );
}
Widget _buildMainComponent({
  required ScrollController scrollController,
  Function()? onContinue,
  Function()? onAiChat,
  required String? userCharacter,
  GeniusModule? continueModule,
}) {
  const textStyle = TextStyle(
    fontFamily: 'Poppins',
    fontSize: 30,
    fontWeight: FontWeight.w700,
    color: C.GENIUS_WHITE,
  );
  return RawScrollbar(
    thumbColor: Colors.black12,
    controller: scrollController,
    thumbVisibility: true,
    trackVisibility: true,
    thickness: 10,
    radius: const Radius.circular(20),
    child: SingleChildScrollView(
      physics: const AlwaysScrollableScrollPhysics(),
      padding: const EdgeInsets.only(right: 20),
      controller: scrollController,
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Stack(
            alignment: Alignment.topLeft,
            children: [
              SizedBox(
                width: 2000,
                height: 350,
                child: ClipRRect(
                  borderRadius: BorderRadius.circular(50),
                  child: const ImageOrRive(
                    'assets/rive/main_background.riv',
                    fit: BoxFit.fitWidth,
                    alignment: Alignment.center,
                    stateMachine: 'State Machine 1',
                    triggers: [],
                    currentTrigger: null,
                  ),
                ),
              ),
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 30),
                child: SizedBox(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    mainAxisAlignment: MainAxisAlignment.end,
                    children: [
                      customHeight(100),
                      Stack(
                        children: [
                          AutoSizeText.rich(
                            TextSpan(
                              style: TextStyle(
                                fontSize: 40,
                                foreground: Paint()
                                  ..style = PaintingStyle.stroke
                                  ..strokeWidth = 2
                                  ..color = const Color.fromARGB(255, 130, 130, 130),
                              ),
                              children: [
                                const TextSpan(text: 'Welcome Back!', style: textStyle),
                                TextSpan(
                                    text: '\nGet ready for your English\nadventure',
                                    style: textStyle.copyWith(
                                      fontSize: 20,
                                    )),
                              ],
                            ),
                          ),
                          AutoSizeText.rich(
                            TextSpan(
                              style: const TextStyle(
                                fontSize: 40,
                                color: Colors.white,
                              ),
                              children: [
                                const TextSpan(text: 'Welcome Back!', style: textStyle),
                                TextSpan(
                                    text: '\nGet ready for your English\nadventure',
                                    style: textStyle.copyWith(
                                      fontSize: 20,
                                    )),
                              ],
                            ),
                          ),
                        ],
                      ),
                      customHeight(80),
                      if (continueModule != null)
                        FilledButton.tonal(
                          style: ButtonStyle(
                              backgroundColor:
                                  MaterialStateColor.resolveWith((states) => Colors.blue),
                              padding: MaterialStateProperty.resolveWith((states) =>
                                  const EdgeInsets.symmetric(horizontal: 50, vertical: 10))),
                          onPressed: onContinue,
                          child: AutoSizeText('Continue', style: textStyle.copyWith(fontSize: 20)),
                        ),
                    ],
                  ),
                ),
              ),
              if (userCharacter != null)
                Positioned(
                  right: 20,
                  bottom: -80,
                  child: SizedBox(
                    height: 280,
                    width: 200,
                    child: ImageOrRive(
                      userCharacter,
                      fit: BoxFit.fitHeight,
                      stateMachine: 'State Machine 1',
                      triggers: ['happy', 'happy_short', 'very_happy'],
                      currentTrigger: 'very_happy',
                    ),
                  ),
                ),
              Positioned(
                right: 30,
                bottom: 200,
                child: Container(
                  decoration: const BoxDecoration(
                    borderRadius: BorderRadius.only(
                        topLeft: Radius.circular(30),
                        bottomRight: Radius.circular(30),
                        topRight: Radius.circular(5),
                        bottomLeft: Radius.circular(5)),
                    color: Colors.white,
                  ),
                  padding: const EdgeInsets.fromLTRB(30, 10, 20, 40),
                  child: AnimatedTextKit(
                    repeatForever: true,
                    animatedTexts: [
                      TypewriterAnimatedText('Hey! How are you doing today? ',
                          textStyle: textStyle.copyWith(
                              fontSize: 20, fontWeight: FontWeight.w400, color: C.GENIUS_BLACK),
                          speed: const Duration(milliseconds: 100)),
                    ],
                  ),
                ),
              ),
              Positioned(
                  right: 40,
                  bottom: 180,
                  child: FilledButton.tonal(
                    style: ButtonStyle(
                        backgroundColor: MaterialStateColor.resolveWith((states) => Colors.blue),
                        padding: MaterialStateProperty.resolveWith(
                            (states) => const EdgeInsets.symmetric(horizontal: 30, vertical: 5))),
                    onPressed: onAiChat,
                    child: AutoSizeText('AI chat',
                        style: textStyle.copyWith(fontSize: 20, fontWeight: FontWeight.w400)),
                  )),
            ],
          ),
          customHeight(50),
          const CategorySection(),
          customHeight(50),
          AutoSizeText(
            'My learning modules',
            style: textStyle.copyWith(fontSize: 21.33, color: C.GENIUS_BLACK),
          ),
          height20,
          const SizedBox(child: CategoryModulesSection()),
        ],
      ),
    ),
  );
}
Widget buildMyProgress(
    {required double readinessValue,
    required double listeningScore,
    required double readingScore}) {
  return Container(
    padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 10),
    decoration:
        BoxDecoration(color: const Color(0xFFF9FAFF), borderRadius: BorderRadius.circular(20)),
    child: Column(
        mainAxisAlignment: MainAxisAlignment.spaceAround,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const AutoSizeText('My Progress',
              style: TextStyle(
                  fontFamily: 'Poppins',
                  color: Color(0xFF2A2B2D),
                  fontWeight: FontWeight.w700,
                  fontSize: 21.33)),
          customHeight(40),
          buildReadinessLevel(
            processValue: (readinessValue * 100).toInt(),
          ),
          customHeight(50),
          buildMyScore(
            listeningScore: (listeningScore * 100).toInt(),
            readingScore: (readingScore * 100).toInt(),
          ),
          customHeight(60),
          buildQuizResults(),
        ]),
  );
}
Widget buildQuizResults() {
  const textStyle = TextStyle(
      fontFamily: 'Poppins', fontWeight: FontWeight.w700, fontSize: 22, color: Color(0xFF2A2B2D));
  return Container(
      decoration:
          BoxDecoration(borderRadius: BorderRadius.circular(20), color: Colors.white, boxShadow: [
        const BoxShadow(color: Color.fromRGBO(108, 94, 94, 0.25), spreadRadius: 2, blurRadius: 6)
      ]),
      padding: const EdgeInsets.fromLTRB(15, 10, 30, 30),
      child: Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
        AutoSizeText('Quiz Results',
            style: textStyle.copyWith(fontSize: 14.66), textAlign: TextAlign.left),
        height15,
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceAround,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            for (final int index in [1, 2, 3])
              Column(
                children: [
                  Container(
                      width: 37,
                      height: 37,
                      decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(30),
                          border: Border.all(
                            color: index == 3 ? const Color(0xFFE8E8E8) : Colors.transparent,
                          ),
                          color: index == 3 ? Colors.transparent : const Color(0xFF90F4BC)),
                      padding: const EdgeInsets.all(10),
                      child: index == 3
                          ? const ImageIcon(AssetImage('assets/icons/lock-icon.png'),
                              color: Colors.grey, size: 30)
                          : const ImageIcon(AssetImage('assets/icons/check-icon.png'),
                              color: Colors.white, size: 30)),
                  height05,
                  AutoSizeText('Module $index',
                      style: textStyle.copyWith(
                          fontSize: 10.66,
                          fontWeight: FontWeight.w400,
                          color: const Color(0xFFA89E9E))),
                  if (index != 3)
                    AutoSizeText(
                      '合格',
                      style: textStyle.copyWith(fontSize: 10.66, color: const Color(0xFFA89E9E)),
                    )
                ],
              )
          ],
        )
      ]));
}
Widget buildMyScore({required int listeningScore, required int readingScore}) {
  const textStyle = TextStyle(
      fontFamily: 'Poppins', fontWeight: FontWeight.w700, fontSize: 22, color: Color(0xFF2A2B2D));
  return Container(
    decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(20),
        color: Colors.white,
        boxShadow: [
          const BoxShadow(color: Color.fromRGBO(108, 94, 94, 0.25), spreadRadius: 2, blurRadius: 6)
        ]),
    padding: const EdgeInsets.fromLTRB(15, 10, 30, 30),
    child: Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
      AutoSizeText('My Score',
          style: textStyle.copyWith(fontSize: 14.66), textAlign: TextAlign.left),
      height20,
      ScoreIndicatorWidget(
          title: 'Listening', scoreValue: listeningScore, processColor: const Color(0xFFBFA0FF)),
      height20,
      ScoreIndicatorWidget(
          title: 'Reading', scoreValue: readingScore, processColor: C.GENIUS_PRIMARY),
    ]),
  );
}
Widget buildReadinessLevel(
    {String? title, required int processValue, String? processLevel, String? evaluationText}) {
  const textStyle = TextStyle(
    fontFamily: 'Poppins',
    fontWeight: FontWeight.w700,
    color: Colors.black,
    fontSize: 14.6,
  );
  return Container(
    decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(20),
        color: Colors.white,
        boxShadow: [
          const BoxShadow(color: Color.fromRGBO(108, 94, 94, 0.25), spreadRadius: 2, blurRadius: 6)
        ]),
    padding: const EdgeInsets.fromLTRB(15, 10, 30, 30),
    child: Column(
      children: [
        Align(
          alignment: Alignment.centerLeft,
          child: AutoSizeText(title ?? 'Eiken 5 - Readiness Level', style: textStyle),
        ),
        const SizedBox(height: 18),
        Stack(
          alignment: Alignment.center,
          children: [
            const SizedBox(
              width: 200,
              height: 200,
              child: ImageOrRive('assets/rive/dots-complited.riv',
                  stateMachine: 'State Machine 1', fit: BoxFit.cover),
            ),
            SizedBox(
              width: 150,
              height: 150,
              child: CircularPercentIndicator(
                radius: 70,
                circularStrokeCap: CircularStrokeCap.round,
                lineWidth: 15,
                percent: processValue / 100,
                animation: true,
                animationDuration: 1000,
                animateFromLastPercent: true,
                progressColor: C.GENIUS_PRIMARY,
                backgroundColor: C.GENIUS_GREY,
              ),
            ),
            Positioned(
                top: -10, child: Image.asset('assets/tablet/robot_ai.png', width: 80, height: 80)),
            AutoSizeText.rich(
              TextSpan(
                children: [
                  TextSpan(text: '$processValue%', style: textStyle.copyWith(fontSize: 32)),
                  TextSpan(
                      text: '\n${processLevel ?? 'High'}!',
                      style: textStyle.copyWith(fontSize: 15, color: const Color(0xFF2F2C2C)))
                ],
              ),
              textAlign: TextAlign.center,
            )
          ],
        ),
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 10),
          child: AutoSizeText(
            evaluationText ??
                'You are getting closer! But you need to keep working on your listening skills!',
            style: textStyle.copyWith(
                fontSize: 12, fontWeight: FontWeight.w400, color: const Color(0xFF978D8D)),
          ),
        )
      ],
    ),
  );
}
---
Path: /lib/pages/paywall_page.dart

import 'package:auto_size_text/auto_size_text.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:flutter_easyloading/flutter_easyloading.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/hooks/use_iap.dart';
import 'package:twins/mixins/widget.dart';
import 'package:twins/style/genius_button_style.dart';
import 'package:twins/style/values.dart';
import 'package:twins/utilities/analytics.dart';
import 'package:twins/utilities/key.dart';
import 'package:twins/utilities/snack_bar_helper.dart';
import 'package:twins/widgets/core/genius_button.dart';
import 'package:twins/widgets/core/genius_rounded_square_button.dart';
import 'package:url_launcher/url_launcher_string.dart';
import 'package:gap/gap.dart';
void openPaywall({required String reason}) {
  final openTime = DateTime.now();
  bool hasSubscribed = false;
  bool hasRestored = false;
  showModalBottomSheet(
    backgroundColor: Colors.transparent,
    context: NAVIGATOR_KEY.currentContext!,
    isScrollControlled: true,
    builder: (context) {
      return PaywallPage(
        reason: reason,
        onSubscribe: () => hasSubscribed = true,
        onRestore: () => hasRestored = true,
      );
    },
  ).then((_) {
    Analytics.trackPaywall(
      reason: reason,
      subscribed: hasSubscribed,
      restored: hasRestored,
      duration: DateTime.now().difference(openTime),
    );
  });
}
class PaywallPage extends HookWidget with PageWidget<void> {
  PaywallPage({required this.reason, required this.onSubscribe, required this.onRestore});
  final String reason;
  final VoidCallback onSubscribe;
  final VoidCallback onRestore;
  @override
  Widget build(BuildContext context) {
    final safeAreaPaddingTop = View.of(context).padding.top;
    final iap = useIap();
    final paddingBottom = View.of(context).padding.bottom;
    return Scaffold(
      backgroundColor: Colors.transparent,
      body: Stack(
        children: [
          BackdropFilter(
            filter: F.BACKGROUND_BLUR,
            child: Column(
              children: [
                Expanded(
                  child: Container(
                    color: Colors.transparent,
                  ),
                ),
              ],
            ),
          ),
          Padding(
            padding: EdgeInsets.only(top: safeAreaPaddingTop),
            child: DraggableScrollableSheet(
              initialChildSize: 1,
              expand: true,
              builder: (BuildContext context, ScrollController scrollController) {
                return Column(
                  children: [
                    Padding(
                      padding: const EdgeInsets.only(left: S.x5, top: S.x3),
                      child: Align(
                        alignment: Alignment.topLeft,
                        child: GeniusRoundedSquareButton(
                          onTap: () => dismiss(),
                          style: GeniusButtonStyle.light,
                          child: const Icon(Icons.close),
                        ),
                      ),
                    ),
                    Image.asset(
                      'assets/images/lessons_girl.png',
                      width: 230,
                    ),
                    Expanded(
                      child: DefaultTextStyle(
                        style: const TextStyle(
                          color: Colors.black,
                          fontSize: 18,
                        ),
                        child: Container(
                          width: double.infinity,
                          decoration: const BoxDecoration(
                            color: C.GENIUS_GREY_LIGHT,
                            borderRadius: BorderRadius.only(
                              topLeft: Radius.circular(R.x5),
                              topRight: Radius.circular(R.x5),
                            ),
                          ),
                          padding: const EdgeInsets.symmetric(horizontal: S.x3) +
                              EdgeInsets.only(bottom: paddingBottom) +
                              EdgeInsets.only(top: S.x(7)),
                          child: SingleChildScrollView(
                            child: Column(
                              children: [
                                const AutoSizeText(
                                  "すべてのテキストクレジットを使用しました！",
                                  maxLines: 1,
                                ),
                                RichText(
                                  text: const TextSpan(
                                    style: TextStyle(
                                      color: Colors.black,
                                      fontSize: 18,
                                    ),
                                    children: <TextSpan>[
                                      TextSpan(
                                        text: '無制限',
                                        style: TextStyle(
                                          fontWeight: FontWeight.bold,
                                          color: C.GENIUS_PRIMARY,
                                        ),
                                      ),
                                      TextSpan(
                                        text: 'で利用しよう！',
                                      ),
                                    ],
                                  ),
                                ),
                                Gap(S.x(8)),
                                const AutoSizeText.rich(
                                  maxLines: 1,
                                  TextSpan(
                                    style: TextStyle(
                                      color: Colors.black,
                                      fontSize: 20,
                                      fontWeight: FontWeight.bold,
                                    ),
                                    children: [
                                      TextSpan(
                                        text: 'AI会話クレジットの',
                                      ),
                                      TextSpan(
                                        style: TextStyle(
                                          color: C.GENIUS_PRIMARY,
                                        ),
                                        text: 'アンリミテッド',
                                      ),
                                      TextSpan(
                                        text: '利用',
                                      ),
                                    ],
                                  ),
                                ),
                                Gap(S.x(8)),
                                Row(
                                  children: [
                                    Expanded(
                                      child: Container(
                                        padding: const EdgeInsets.all(S.x3),
                                        decoration: BoxDecoration(
                                          border: Border.all(
                                            color: Colors.grey.shade300,
                                          ),
                                          borderRadius: BorderRadius.circular(R.x(7)),
                                        ),
                                        child: const DefaultTextStyle(
                                          style: TextStyle(
                                            color: Colors.black,
                                            fontSize: 20,
                                            fontWeight: FontWeight.bold,
                                          ),
                                          child: Column(
                                            children: [
                                              Text("1ヶ月"),
                                              Text("500円"),
                                            ],
                                          ),
                                        ),
                                      ),
                                    ),
                                  ],
                                ),
                                SizedBox(height: S.x(5)),
                                Row(
                                  children: [
                                    Expanded(
                                      child: GeniusButton(
                                        style: GeniusButtonStyle.dark,
                                        onPressed: () async {
                                          EasyLoading.show();
                                          final hasPurchased = await iap.purchasePro();
                                          EasyLoading.dismiss();
                                          if (hasPurchased) {
                                            SnackbarHelper.showSuccess(context, "プレミアムに登録しました！");
                                            onSubscribe();
                                            dismiss();
                                            return;
                                          }
                                          SnackbarHelper.showError(context, "プレミアムに登録できませんでした。");
                                        },
                                        padding: const EdgeInsets.symmetric(vertical: 18),
                                        child: const Text(
                                          "プレミアムに登録",
                                        ),
                                      ),
                                    ),
                                  ],
                                ),
                                SizedBox(height: S.x(4)),
                                RichText(
                                  text: TextSpan(
                                    text: "以前の購入を復元する",
                                    style: const TextStyle(
                                      color: Color(0xFFB9B5B5),
                                      decoration: TextDecoration.underline,
                                      fontSize: 16,
                                      fontWeight: FontWeight.bold,
                                    ),
                                    recognizer: TapGestureRecognizer()
                                      ..onTap = () async {
                                        EasyLoading.show();
                                        final hasRestored = await iap.restorePro();
                                        EasyLoading.dismiss();
                                        if (hasRestored) {
                                          SnackbarHelper.showSuccess(context, "プレミアムに登録しました！");
                                          onRestore();
                                          dismiss();
                                          return;
                                        }
                                        SnackbarHelper.showError(context, "プレミアムに登録できませんでした。");
                                      },
                                  ),
                                ),
                                SizedBox(height: S.x(4)),
                                Row(
                                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                                  children: [
                                    RichText(
                                      text: TextSpan(
                                        text: "「利用規約」「プリバシー」",
                                        style: const TextStyle(
                                          color: Color(0xFFB9B5B5),
                                          fontSize: 12,
                                          fontWeight: FontWeight.bold,
                                        ),
                                        recognizer: TapGestureRecognizer()
                                          ..onTap = () {
                                            launchUrlString(
                                              'https:
                                            );
                                          },
                                      ),
                                    ),
                                    RichText(
                                      text: TextSpan(
                                        text: "EULA",
                                        style: const TextStyle(
                                          color: Color(0xFFB9B5B5),
                                          fontSize: 12,
                                          fontWeight: FontWeight.bold,
                                        ),
                                        recognizer: TapGestureRecognizer()
                                          ..onTap = () {
                                            launchUrlString(
                                              'https:
                                            );
                                          },
                                      ),
                                    ),
                                  ],
                                ),
                              ],
                            ),
                          ),
                        ),
                      ),
                    ),
                  ],
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}
---
Path: /lib/pages/lesson_summary/summary_content.dart

---
Path: /lib/pages/lesson_summary/lesson_summary_header.dart

import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/style/genius_button_style.dart';
import 'package:twins/style/values.dart';
import 'package:twins/widgets/core/genius_rounded_square_button.dart';
class LessonSummaryHeader extends HookWidget {
  const LessonSummaryHeader({required this.timeText, required this.onClick});
  final String timeText;
  final Function() onClick;
  @override
  Widget build(BuildContext context) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Padding(
          padding: const EdgeInsets.only(left: S.x5, top: S.x3),
          child: Align(
            alignment: Alignment.topLeft,
            child: GeniusRoundedSquareButton(
              onTap: onClick,
              style: GeniusButtonStyle.light,
              child: const Icon(Icons.close),
            ),
          ),
        ),
        Container(
          padding: const EdgeInsets.all(S.x3),
          margin: const EdgeInsets.all(S.x3),
          decoration: BoxDecoration(
            color: Colors.black.withOpacity(0.35),
            borderRadius: BorderRadius.circular(S.x5),
          ),
          child: Row(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              const Icon(
                Icons.timer,
                color: Colors.white,
                size: 20,
              ),
              const SizedBox(width: S.x1),
              Padding(
                padding: const EdgeInsets.only(bottom: 2),
                child: Text(
                  timeText,
                  style: const TextStyle(
                    color: Colors.white,
                    fontSize: 10,
                  ),
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }
}
---
Path: /lib/pages/lesson_summary/lesson_summary_page.dart

---
Path: /lib/pages/account/activation_code_bottom_sheet.dart

---
Path: /lib/pages/account/account_page.dart

import 'package:auto_size_text/auto_size_text.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:twins/features/auth/presentation/providers/auth_provider.dart';
import 'package:twins/features/profile/presentation/providers/profile_provider.dart';
import 'package:twins/hooks/use_package_info.dart';
import 'package:twins/mixins/widget.dart';
import 'package:twins/notifiers/setting_notifier.dart';
import 'package:twins/pages/account/confirm_dialogue.dart';
import 'package:twins/pages/account/test_page.dart';
import 'package:twins/providers/feedback_helper_provider.dart';
import 'package:twins/providers/genius_result_provider.dart';
import 'package:twins/services/store_messages_service.dart';
import 'package:twins/style/genius_button_style.dart';
import 'package:twins/style/values.dart';
import 'package:twins/widgets/core/genius_button.dart';
import 'package:url_launcher/url_launcher_string.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
class AccountPage extends HookConsumerWidget with PageWidget<void> {
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final packageInfo = usePackageInfo();
    final userName = ref.watch(userProfileOrNullProvider)?.name;
    final userLevel = ref.watch(translatedUserLevelProvider);
    final authNotifier = ref.watch(authNotifierProvider.notifier);
    void pop() {
      Navigator.of(context).pop();
    }
    return Scaffold(
      appBar: AppBar(
        title: const Text('Settings'),
        centerTitle: true,
      ),
      body: SafeArea(
        child: Container(
          width: double.infinity,
          height: double.infinity,
          padding: EdgeInsets.only(left: S.x(5), right: S.x(5), top: S.x(4), bottom: S.x(4)),
          child: Column(
            mainAxisSize: MainAxisSize.max,
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                mainAxisSize: MainAxisSize.max,
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text('Hello',
                          style: Theme.of(context)
                              .textTheme
                              .bodySmall!
                              .copyWith(fontWeight: FontWeight.bold)),
                      if (userName != null)
                        Text(
                          userName,
                          style: Theme.of(context).textTheme.titleLarge?.copyWith(
                                fontWeight: FontWeight.bold,
                              ),
                        ),
                    ],
                  ),
                  FilledButton(
                    onPressed: null,
                    child: Text(userLevel),
                  ),
                ],
              ),
              SizedBox(height: S.x(4)),
              Expanded(
                child: Stack(
                  children: [
                    Padding(
                      padding: const EdgeInsets.only(bottom: 8),
                      child: Column(
                        children: [
                          Row(
                            children: [
                              const Expanded(child: Text("Enable Sound")),
                              Switch(
                                value: ref.watch(settingNotifierProvider).sfxEnabled,
                                onChanged: (value) {
                                  ref.read(settingNotifierProvider.notifier).setSFXEnabled(value);
                                  ref
                                      .read(feedbackHelperProvider.notifier)
                                      .Success(sfxEnabled: false);
                                },
                              ),
                            ],
                          ),
                          Row(
                            children: [
                              const Expanded(child: Text("Enable Hatpcis")),
                              Switch(
                                value: ref.watch(settingNotifierProvider).hapticEnabled,
                                onChanged: (value) {
                                  ref
                                      .read(settingNotifierProvider.notifier)
                                      .setHapticEnabled(value);
                                  ref
                                      .read(feedbackHelperProvider.notifier)
                                      .Success(sfxEnabled: false);
                                },
                              ),
                            ],
                          ),
                          const Spacer(),
                          if (kDebugMode)
                            Consumer(
                              builder: (context, ref, w) {
                                return ElevatedButton(
                                    onPressed: () {
                                      ref.read(geniusResultRepositoryProvider)?.reset();
                                      ref.invalidate(geniusResultRepositoryProvider);
                                    },
                                    child: const Text('Reset progression data'));
                              },
                            ),
                          if (kDebugMode)
                            ElevatedButton(
                                onPressed: () async {
                                  await TestPage().show();
                                },
                                child: const Text("Test page")),
                          Center(
                            child: GeniusButton(
                              expanded: true,
                              style: GeniusButtonStyle.dark,
                              child: const Text('フリートーク履歴データの削除'),
                              onPressed: () async {
                                bool? clear = await ConfirmDialogue(
                                    child: const AutoSizeText(
                                  "フリートーク履歴をクリアしますか？",
                                  maxLines: 1,
                                  style: TextStyle(
                                    fontWeight: FontWeight.bold,
                                    fontSize: 20,
                                  ),
                                )).show();
                                if (clear == true) {
                                  StorageMessagesService.clearChatHistory(
                                      conversationKey: 'free_talk');
                                }
                              },
                            ),
                          ),
                          SizedBox(height: S.x(2)),
                          Center(
                            child: GeniusButton(
                              expanded: true,
                              style: GeniusButtonStyle.dark,
                              child: const Text('Reset user'),
                              onPressed: () async {
                                bool? clear = await ConfirmDialogue(
                                    child: const AutoSizeText(
                                  "Do you want to reset your data？",
                                  maxLines: 1,
                                  style: TextStyle(
                                    fontWeight: FontWeight.bold,
                                    fontSize: 20,
                                  ),
                                )).show();
                                if (clear == true) {
                                  ref.read(profileNotifierProvider.notifier).removeUserProfile();
                                  pop();
                                }
                              },
                            ),
                          ),
                          GeniusButton(
                              style: GeniusButtonStyle.dark,
                              onPressed: () async {
                                await authNotifier.logout();
                                pop();
                              },
                              child: const Text("Logout")),
                          const Spacer(),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Row(children: [
                                RichText(
                                  text: TextSpan(
                                    text: "「利用規約」「プリバシー」",
                                    style: const TextStyle(
                                      color: Color.fromARGB(255, 126, 122, 122),
                                      fontSize: 12,
                                      fontWeight: FontWeight.bold,
                                    ),
                                    recognizer: TapGestureRecognizer()
                                      ..onTap = () {
                                        launchUrlString(
                                          'https:
                                        );
                                      },
                                  ),
                                ),
                                const Text(
                                  "|",
                                  style: TextStyle(
                                    color: Color.fromARGB(255, 126, 122, 122),
                                    fontSize: 12,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                                const SizedBox(width: S.x1),
                                RichText(
                                  text: TextSpan(
                                    text: "EULA",
                                    style: const TextStyle(
                                      color: Color.fromARGB(255, 126, 122, 122),
                                      fontSize: 12,
                                      fontWeight: FontWeight.bold,
                                    ),
                                    recognizer: TapGestureRecognizer()
                                      ..onTap = () {
                                        launchUrlString(
                                          'https:
                                        );
                                      },
                                  ),
                                ),
                              ]),
                              if (packageInfo != null) 
                                Center(
                                  child: Text(
                                    'Version ${packageInfo.version} (#${packageInfo.buildNumber})',
                                    style: const TextStyle(fontSize: 12),
                                  ),
                                ),
                            ],
                          )
                        ],
                      ),
                    ),
                  ],
                ),
              )
            ],
          ),
        ),
      ),
    );
  }
}
---
Path: /lib/pages/account/test_page.dart

import 'package:flutter/material.dart';
import 'package:twins/mixins/widget.dart';
import 'package:twins/widgets/rive/image_or_rive.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
class TestPage extends HookConsumerWidget with PageWidget<void> {
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return Scaffold(
      body: SafeArea(
        child: Column(
          children: [
            Container(
              color: Colors.amber,
              height: 300,
              child: ImageOrRive(
                'assets/rive/test_interaction.riv',
                onEvent: (e) {},
                stateMachine: 'State Machine 1',
              ),
            ),
          ],
        ),
      ),
    );
  }
}
---
Path: /lib/pages/account/confirm_dialogue.dart

import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/mixins/widget.dart';
import 'package:twins/style/values.dart';
class ConfirmDialogue extends HookWidget with DialogWidget<bool> {
  ConfirmDialogue({
    required this.child,
  });
  final Widget child;
  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: S.x3) + const EdgeInsets.only(top: S.x3),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Container(
            child: child,
          ),
          const Divider(),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceAround,
            children: [
              TextButton(
                onPressed: () {
                  dismiss(false);
                },
                child: const Text('キャンセル'),
              ),
              TextButton(
                onPressed: () {
                  dismiss(true);
                },
                child: const Text('全てクリア'),
              ),
            ],
          ),
        ],
      ),
    );
  }
}
---
Path: /lib/pages/onboarding/onboarding_page.dart

import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/pages/onboarding/pages/customization/customization_page.dart';
import 'package:twins/pages/onboarding/pages/introduction_page.dart';
import 'package:twins/pages/onboarding/pages/presentation_page.dart';
import 'package:twins/pages/onboarding/pages/welcome_screen.dart';
class OnboardingPage extends HookWidget {
  const OnboardingPage({Key? key}) : super(key: key);
  @override
  Widget build(BuildContext context) {
    final pageController = usePageController(initialPage: 0);
    void goNext() {
      pageController.nextPage(
        duration: const Duration(milliseconds: 200),
        curve: Curves.easeInOut,
      );
    }
    void goBack() {
      pageController.previousPage(
        duration: const Duration(milliseconds: 200),
        curve: Curves.easeInOut,
      );
    }
    return WillPopScope(
      onWillPop: () async => false,
      child: Scaffold(
        body: SafeArea(
          child: PageView(
            controller: pageController,
            physics: const NeverScrollableScrollPhysics(),
            children: [
              IntroductionPage(
                onNext: goNext,
              ),
              PresentationPage(
                onNext: goNext,
              ),
              CustomizationPage(
                onBack: goBack,
                onNext: goNext,
              ),
              const WelcomePage(),
            ],
          ),
        ),
      ),
    );
  }
}
---
Path: /lib/pages/onboarding/pages/welcome_screen.dart

import 'dart:async';
import 'package:auto_size_text/auto_size_text.dart';
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/components/app_asset.dart';
import 'package:twins/components/buttons/text_button.dart';
import 'package:twins/components/colors.dart';
import 'package:twins/components/static_decoration.dart';
import 'package:twins/features/profile/presentation/providers/profile_provider.dart';
import 'package:twins/style/values.dart';
import 'package:twins/widgets/rive/image_or_rive.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
class WelcomePage extends HookConsumerWidget {
  const WelcomePage({Key? key}) : super(key: key);
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final preparingLesson = useState(false);
    final isCompleted = preparingLesson.value;
    Timer.periodic(const Duration(seconds: 2), (timer) {
      preparingLesson.value = true;
      timer.cancel();
    });
    return SafeArea(
      child: Scaffold(
        resizeToAvoidBottomInset: false,
        backgroundColor: primaryWhite,
        body: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 40, vertical: 60),
          child: Stack(
            fit: StackFit.expand,
            children: [
              const ImageOrRive(
                'assets/rive/dots-launch.riv',
                stateMachine: 'State Machine 1',
              ),
              Column(
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.start,
                    children: [
                      AutoSizeText('Twins',
                          style: Theme.of(context)
                              .textTheme
                              .headlineLarge
                              ?.copyWith(fontSize: 40, fontWeight: FontWeight.w400))
                    ],
                  ),
                  const Spacer(),
                  AutoSizeText(
                    'Thank you!',
                    style: Theme.of(context).textTheme.titleLarge!.copyWith(
                        fontWeight: FontWeight.w900, fontSize: 90, color: const Color(0xFF1D1C1C)),
                  ),
                  SizedBox(height: S.x(7)),
                  AutoSizeText(
                    isCompleted ? 'AI-based english learning' : 'We are preparing your lessons...',
                    style: Theme.of(context).textTheme.titleSmall!.copyWith(
                        fontWeight: FontWeight.w400, fontSize: 50, color: const Color(0xFF929292)),
                    textAlign: TextAlign.start,
                  ),
                  const Spacer(),
                  Center(
                    child: Column(
                      children: [
                        const SizedBox(
                          height: 120,
                          width: 150,
                          child: ImageOrRive(
                            'assets/rive/robot.riv',
                            stateMachine: 'State Machine 1',
                            fit: BoxFit.fitHeight,
                          ),
                        ),
                        customHeight(2),
                        Image.asset(
                          AppAsset.robotBottom,
                          fit: BoxFit.fitWidth,
                          width: 150,
                        )
                      ],
                    ),
                  ),
                  const Spacer(),
                  isCompleted
                      ? PrimaryTextButton(
                          width: 250,
                          title: "next",
                          onPressed: () {
                            ref.read(profileNotifierProvider.notifier).updateUserProfile();
                          },
                        )
                      : PrimaryTextButton(
                          width: 250,
                          title: "next",
                          buttonColor: grey.withOpacity(.6),
                          onPressed: () {},
                        ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}
---
Path: /lib/pages/onboarding/pages/introduction_page.dart

import 'package:auto_size_text/auto_size_text.dart';
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/components/colors.dart';
import 'package:twins/style/genius_button_style.dart';
import 'package:twins/style/values.dart';
import 'package:twins/widgets/core/genius_button.dart';
import 'package:twins/widgets/rive/image_or_rive.dart';
class IntroductionPage extends HookWidget {
  final void Function()? onNext;
  const IntroductionPage({this.onNext});
  @override
  Widget build(BuildContext context) {
    double paddingTop = 80;
    double paddingBot = 50;
    return SafeArea(
        child: Scaffold(
      resizeToAvoidBottomInset: false,
      backgroundColor: primaryWhite,
      body: Row(
        children: [
          Expanded(
            flex: 1,
            child: Stack(
              fit: StackFit.expand,
              children: [
                const ImageOrRive(
                  'assets/rive/dots-launch.riv',
                  stateMachine: 'State Machine 1',
                  fit: BoxFit.cover,
                ),
                Padding(
                  padding: EdgeInsets.fromLTRB(50, paddingTop + 40, 0, paddingBot),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const AutoSizeText.rich(TextSpan(children: [
                        TextSpan(
                            text: 'Twins',
                            style: TextStyle(
                                fontSize: 53, fontWeight: FontWeight.w700, color: C.GENIUS_BLACK)),
                        TextSpan(
                            text: ' English',
                            style: TextStyle(
                                fontFamily: 'Poppins',
                                fontSize: 46,
                                fontWeight: FontWeight.w400,
                                color: C.GENIUS_GREY_DARK))
                      ])),
                      const Spacer(),
                      const Expanded(
                        child: AutoSizeText('Learn\ndifferently',
                            style: TextStyle(
                                fontFamily: 'Poppins',
                                fontSize: 100,
                                fontWeight: FontWeight.w900,
                                color: Color(0xFF1D1C1C))),
                      ),
                      const SizedBox(height: 50),
                      Stack(
                        alignment: Alignment.centerRight,
                        children: [
                          GeniusButton(
                            onPressed: onNext,
                            radius: 50,
                            padding: const EdgeInsets.symmetric(horizontal: 90, vertical: 20),
                            style: GeniusButtonStyle.dark,
                            child: const AutoSizeText(
                              'GET STARTED',
                              style: TextStyle(
                                  fontFamily: 'Poppins', color: Colors.white, fontSize: 33),
                            ),
                          ),
                          Align(
                              widthFactor: 0,
                              child: Image.asset(
                                'assets/tablet/robot_ai.png',
                                height: 120,
                                width: 120,
                                fit: BoxFit.fill,
                              ))
                        ],
                      )
                    ],
                  ),
                ),
              ],
            ),
          ),
          Expanded(
            flex: 1,
            child: Padding(
              padding: const EdgeInsets.all(20),
              child: Row(children: [
                Expanded(
                  child: Padding(
                    padding: const EdgeInsets.all(S.x1),
                    child: Column(
                      children: [
                        Expanded(
                          flex: 4,
                          child: Padding(
                            padding: const EdgeInsets.all(S.x1),
                            child: Image.asset(
                              'assets/tablet/image_1.png',
                              width: double.infinity,
                              fit: BoxFit.fill,
                            ),
                          ),
                        ),
                        Expanded(
                          flex: 3,
                          child: Padding(
                            padding: const EdgeInsets.all(S.x1),
                            child: Image.asset(
                              'assets/tablet/image_3.png',
                              width: double.infinity,
                              fit: BoxFit.fill,
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
                Expanded(
                  child: Column(
                    children: [
                      Expanded(
                        child: Padding(
                          padding: const EdgeInsets.all(S.x1),
                          child: ClipRRect(
                            borderRadius: BorderRadius.circular(40),
                            child: Image.asset(
                              'assets/tablet/image_2.png',
                              width: double.infinity,
                              fit: BoxFit.cover,
                            ),
                          ),
                        ),
                      ),
                      Expanded(
                        child: Padding(
                          padding: const EdgeInsets.all(S.x1),
                          child: Image.asset(
                            'assets/tablet/image_4.png',
                            width: double.infinity,
                            fit: BoxFit.fill,
                          ),
                        ),
                      ),
                    ],
                  ),
                )
              ]),
            ),
          )
        ],
      ),
    ));
  }
}
---
Path: /lib/pages/onboarding/pages/presentation_page.dart

import 'package:auto_size_text/auto_size_text.dart';
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:twins/components/app_asset.dart';
import 'package:twins/components/colors.dart';
import 'package:twins/components/static_decoration.dart';
import 'package:twins/pages/onboarding/widget/bottom_indicator_widget.dart';
import 'package:twins/style/genius_button_style.dart';
import 'package:twins/widgets/core/genius_button.dart';
import 'package:twins/widgets/rive/image_or_rive.dart';
class PresentationPage extends HookConsumerWidget {
  const PresentationPage({super.key, this.onNext});
  final void Function()? onNext;
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final currentIndex = useState<int>(0);
    final PageController pageController = PageController();
    final List<Widget> listPageView = [
      PresentationStepWidget(
        title: 'The first AI based EIKEN app',
        subtitle:
            'Hundreds of lessons to lessons to learn at your pace.\nPersonalized feedback to help you get to the highest level.',
        child: Padding(
          padding: const EdgeInsets.all(20),
          child: Image.asset(
            AppAsset.onboardBoy,
            fit: BoxFit.fitWidth,
          ),
        ),
      ),
      PresentationStepWidget(
        title: 'Practical',
        subtitle:
            'With Twins you not only get ready for the standardized tests.\nYou also get a chance to increase your speaking level.',
        child: Padding(
          padding: const EdgeInsets.all(20),
          child: Image.asset(
            AppAsset.onboardGirl,
            fit: BoxFit.fitWidth,
          ),
        ),
      ),
      PresentationStepWidget(
        title: 'Immersive and fun',
        subtitle: 'Learn with dozens of fun characters in various adventures.',
        child: Stack(
          alignment: Alignment.bottomCenter,
          children: [
            const ImageOrRive(
              'assets/rive/character_.riv',
              stateMachine: 'State Machine 1',
            ),
            Positioned(
              top: 20,
              right: MediaQuery.of(context).size.width / 2 - 200,
              child: Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.end,
                children: [
                  const SizedBox(
                    height: 120,
                    width: 100,
                    child: ImageOrRive(
                      'assets/rive/robot.riv',
                      stateMachine: 'State Machine 1',
                      fit: BoxFit.fitWidth,
                    ),
                  ),
                  customHeight(2),
                  Image.asset(
                    AppAsset.robotBottom,
                    fit: BoxFit.fitWidth,
                    width: 100,
                  ),
                ],
              ),
            ),
          ],
        ),
      )
    ];
    final numberOfPages = listPageView.length;
    return SafeArea(
      child: Scaffold(
        backgroundColor: primaryWhite,
        body: Stack(
          fit: StackFit.expand,
          alignment: AlignmentDirectional.topCenter,
          children: [
            const ImageOrRive(
              'assets/rive/dots-complited.riv',
              stateMachine: 'State Machine 1',
              fit: BoxFit.cover,
            ),
            Padding(
              padding: const EdgeInsets.all(20),
              child: PageView.builder(
                clipBehavior: Clip.none,
                controller: pageController,
                onPageChanged: (value) {
                  currentIndex.value = value;
                },
                itemCount: numberOfPages,
                itemBuilder: (context, index) {
                  return listPageView[index];
                },
                physics: const BouncingScrollPhysics(),
              ),
            ),
            Padding(
              padding: const EdgeInsets.only(bottom: 60),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.end,
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  const Spacer(),
                  BottomIndicatorWidget(currentIndex: currentIndex.value, length: numberOfPages),
                  customHeight(40),
                  GeniusButton(
                    onPressed: () {
                      if (currentIndex.value >= numberOfPages - 1) {
                        onNext?.call();
                        return;
                      }
                      currentIndex.value++;
                      pageController.animateToPage(currentIndex.value,
                          curve: Curves.decelerate, duration: const Duration(milliseconds: 300));
                    },
                    radius: 50,
                    padding: const EdgeInsets.symmetric(horizontal: 90, vertical: 10),
                    style: GeniusButtonStyle.dark,
                    child: const Text(
                      'next',
                      style: TextStyle(
                          fontFamily: 'Poppins',
                          color: Colors.white,
                          fontWeight: FontWeight.w700,
                          fontSize: 26),
                    ),
                  ),
                ],
              ),
            ),
            Align(
              alignment: Alignment.topRight,
              child: TextButton(
                child: Padding(
                  padding: const EdgeInsets.all(40),
                  child: Text("Skip",
                      style: Theme.of(context).textTheme.bodyLarge?.copyWith(
                          fontWeight: FontWeight.w400,
                          fontSize: 40,
                          color: const Color(0xFF858597))),
                ),
                onPressed: () {
                  onNext?.call();
                },
              ),
            )
          ],
        ),
      ),
    );
  }
}
class PresentationStepWidget extends StatelessWidget {
  final String title;
  final String subtitle;
  final Widget? child;
  const PresentationStepWidget({
    super.key,
    this.child,
    required this.title,
    required this.subtitle,
  });
  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        SizedBox(height: MediaQuery.of(context).size.height / 2 - 50, child: child),
        AutoSizeText(
          title,
          style: Theme.of(context)
              .textTheme
              .titleLarge!
              .copyWith(fontWeight: FontWeight.w900, fontSize: 40, color: const Color(0xFF1F1F39)),
          textAlign: TextAlign.left,
        ),
        height20,
        AutoSizeText(
          subtitle,
          style: Theme.of(context)
              .textTheme
              .titleSmall!
              .copyWith(fontWeight: FontWeight.w400, fontSize: 25, color: const Color(0xFF858597)),
          textAlign: TextAlign.center,
        ),
      ],
    );
  }
}
---
Path: /lib/pages/onboarding/pages/customization/customization_page.dart

import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/pages/onboarding/pages/customization/customization_steps/set_character_page.dart';
import 'package:twins/pages/onboarding/pages/customization/customization_steps/set_level_page.dart';
import 'package:twins/pages/onboarding/pages/customization/customization_steps/set_name_page.dart';
import 'package:twins/pages/onboarding/widget/header_progress_bar_widget.dart';
class CustomizationPage extends HookWidget {
  const CustomizationPage({
    Key? key,
    this.onNext,
    this.onBack,
  }) : super(key: key);
  final void Function()? onNext;
  final void Function()? onBack;
  @override
  Widget build(BuildContext context) {
    final pageController = usePageController(initialPage: 0);
    const numberOfPage = 3;
    final currentPageState = useState(0);
    final currentPage = currentPageState.value;
    void handleBack() {
      if (currentPage == 0) {
        onBack?.call();
      } else {
        pageController.previousPage(
          duration: const Duration(milliseconds: 200),
          curve: Curves.easeInOut,
        );
      }
    }
    void goNext() {
      if (currentPage == numberOfPage - 1) {
        onNext?.call();
      } else {
        pageController.nextPage(
          duration: const Duration(milliseconds: 200),
          curve: Curves.easeInOut,
        );
      }
    }
    return Scaffold(
      resizeToAvoidBottomInset: false,
      body: SafeArea(
        child: Column(
          mainAxisSize: MainAxisSize.max,
          children: [
            Expanded(
              flex: 1,
              child: HeaderProgressBarWidget(
                percent: (currentPage + 1) / numberOfPage,
                onBack: handleBack,
              ),
            ),
            Expanded(
              flex: 5,
              child: PageView(
                physics: const NeverScrollableScrollPhysics(),
                controller: pageController,
                onPageChanged: (page) => currentPageState.value = page,
                children: [
                  SetLevelPage(
                    onNext: goNext,
                  ),
                  SetNamePage(
                    onNext: goNext,
                  ),
                  SetCharacterPage(
                    onNext: goNext,
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}
---
Path: /lib/pages/onboarding/pages/customization/customization_steps/set_name_page.dart

import 'package:auto_size_text/auto_size_text.dart';
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/components/buttons/text_button.dart';
import 'package:twins/components/colors.dart';
import 'package:twins/features/profile/presentation/providers/profile_provider.dart';
import 'package:twins/style/values.dart';
import 'package:twins/widgets/rive/image_or_rive.dart';
import 'package:twins/widgets/text_widgets/input_text_field_widget.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
class SetNamePage extends HookConsumerWidget {
  const SetNamePage({Key? key, this.onNext}) : super(key: key);
  final void Function()? onNext;
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final initialname = ref.watch(userProfileOrNullProvider)?.name;
    final textController = useTextEditingController(text: initialname);
    final isCompleteState = useState(initialname != null && initialname.isNotEmpty);
    final isComplete = isCompleteState.value;
    final isRemoveIconVisible = useState(textController.text.isNotEmpty);
    void checkValid(String? text) {
      if (text == null) {
        isRemoveIconVisible.value = false;
        return;
      }
      if (text.isNotEmpty) {
        isRemoveIconVisible.value = true;
        if (isComplete == false) isCompleteState.value = true;
      } else {
        isRemoveIconVisible.value = false;
        if (isComplete == true) isCompleteState.value = false;
      }
    }
    return Padding(
      padding: EdgeInsets.zero, 
      child: Stack(
        children: [
          const ImageOrRive(
            'assets/rive/dots-complited.riv',
            stateMachine: 'State Machine 1',
            fit: BoxFit.cover,
          ),
          const Positioned(
            right: -67,
            child: SizedBox(
              width: 400,
              height: 200,
              child: ImageOrRive(
                'assets/rive/hand.riv',
                stateMachine: 'State Machine 1',
                fit: BoxFit.fitHeight,
              ),
            ),
          ),
          Padding(
            padding: const EdgeInsets.fromLTRB(60, 40, 60, 60),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: [
                Expanded(
                  child: Row(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      SizedBox(
                        width: MediaQuery.of(context).size.width * 2 / 3,
                        child: AutoSizeText.rich(
                          TextSpan(
                            children: [
                              TextSpan(
                                  text: '名前\n',
                                  style: Theme.of(context).textTheme.titleLarge!.copyWith(
                                      fontWeight: FontWeight.w700,
                                      fontSize: 40,
                                      color: const Color(0xFF1D1C1C))),
                              TextSpan(
                                text: 'この名前は、あなたと対話するためにAIが使\n用する名前になります。',
                                style: Theme.of(context).textTheme.titleSmall!.copyWith(
                                    fontWeight: FontWeight.w400,
                                    fontSize: 26,
                                    color: const Color(0xFF1D1C1C)),
                              ),
                            ],
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
                SizedBox(
                  width: MediaQuery.of(context).size.width * 2 / 3,
                  child: TextFormFieldWidget(
                    contentPadding: const EdgeInsets.all(30),
                    controller: textController,
                    textStyle: const TextStyle(
                        fontFamily: 'Poppins',
                        fontWeight: FontWeight.w500,
                        fontSize: 33,
                        color: C.GENIUS_BLACK),
                    hintText: 'ニックネームを入力してください',
                    hintStyle: const TextStyle(
                        fontFamily: 'Poppins',
                        fontWeight: FontWeight.w500,
                        fontSize: 20,
                        color: C.GENIUS_GREY),
                    borderColor: primaryBlack,
                    onChanged: checkValid,
                    suffixIcon: isRemoveIconVisible.value
                        ? IconButton(
                            padding: const EdgeInsets.symmetric(horizontal: 50, vertical: 10),
                            icon: Image.asset('assets/icons/remove-icon.png'),
                            onPressed: () {
                              textController.clear();
                              isRemoveIconVisible.value = false;
                            },
                          )
                        : null,
                  ),
                ),
                const Spacer(),
                isComplete
                    ? PrimaryTextButton(
                        width: 250,
                        title: "next",
                        onPressed: () {
                          ref
                              .read(profileNotifierProvider.notifier)
                              .setName(name: textController.text.trim());
                          onNext?.call();
                          FocusScope.of(context).unfocus();
                        },
                      )
                    : PrimaryTextButton(
                        width: 250,
                        title: "next",
                        buttonColor: grey.withOpacity(.6),
                        onPressed: () {}),
              ],
            ),
          ),
        ],
      ),
    );
  }
}
---
Path: /lib/pages/onboarding/pages/customization/customization_steps/set_character_page.dart

import 'package:auto_size_text/auto_size_text.dart';
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/components/buttons/text_button.dart';
import 'package:twins/components/colors.dart';
import 'package:twins/components/static_decoration.dart';
import 'package:twins/features/profile/presentation/providers/profile_provider.dart';
import 'package:twins/widgets/rive/image_or_rive.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
class SetCharacterPage extends HookConsumerWidget {
  const SetCharacterPage({Key? key, this.onNext}) : super(key: key);
  final void Function()? onNext;
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final userCharacter = ref.watch(userProfileOrNullProvider)?.character;
    final selectedOptionState = useState(userCharacter);
    final selectedOption = selectedOptionState.value;
    return Padding(
      padding: const EdgeInsets.fromLTRB(60, 30, 60, 60),
      child: Column(
        mainAxisSize: MainAxisSize.max,
        crossAxisAlignment: CrossAxisAlignment.start,
        mainAxisAlignment: MainAxisAlignment.spaceAround,
        children: [
          const AutoSizeText.rich(TextSpan(children: [
            TextSpan(
                text: 'Choose your Avatar\n',
                style: TextStyle(
                    fontFamily: 'Poppins',
                    fontSize: 40,
                    fontWeight: FontWeight.w700,
                    color: Color(0xFF1D1C1C))),
            TextSpan(
                text: 'They will follow you in all your adventures',
                style: TextStyle(
                    fontFamily: 'Poppins',
                    fontSize: 26,
                    fontWeight: FontWeight.w400,
                    color: Color(0xFF1D1C1C)))
          ])),
          height20,
          Expanded(
            child: Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                for (final file in [
                  'assets/tablet/character_boy.png',
                  'assets/tablet/character_girl.png'
                ])
                  CharacterOption(
                    file: file,
                    isSelected: selectedOption == file,
                    onTap: () {
                      if (selectedOption != file) {
                        selectedOptionState.value = file;
                      } else {
                        selectedOptionState.value = null;
                      }
                    },
                  ),
              ],
            ),
          ),
          height20,
          selectedOption != null
              ? PrimaryTextButton(
                  width: 250,
                  title: "next",
                  onPressed: () {
                    ref.read(profileNotifierProvider.notifier).setCharacter(
                          character: selectedOption
                              .replaceAll('tablet', 'rive')
                              .replaceAll('character_boy', 'character')
                              .replaceAll('png', 'riv'),
                        );
                    onNext?.call();
                    FocusScope.of(context).unfocus();
                  })
              : PrimaryTextButton(
                  width: 250, title: "next", buttonColor: grey.withOpacity(.6), onPressed: () {}),
        ],
      ),
    );
  }
}
class CharacterOption extends HookWidget {
  const CharacterOption({
    Key? key,
    required this.file,
    required this.isSelected,
    required this.onTap,
  }) : super(key: key);
  final String file;
  final bool isSelected;
  final VoidCallback onTap;
  @override
  Widget build(BuildContext context) {
    return Expanded(
      child: GestureDetector(
        onTap: onTap,
        child: AnimatedFractionallySizedBox(
          duration: const Duration(milliseconds: 200),
          widthFactor: isSelected ? 0.98 : 0.7,
          heightFactor: isSelected ? 1 : 0.8,
          alignment: Alignment.center,
          child: ImageOrRive(
            file,
            fit: BoxFit.fitHeight,
            stateMachine: 'State Machine 1',
            triggers: ['happy', 'happy_short', 'very_happy'],
            currentTrigger: isSelected ? 'very_happy' : 'happy',
          ),
        ),
      ),
    );
  }
}
---
Path: /lib/pages/onboarding/pages/customization/customization_steps/set_level_page.dart

import 'package:auto_size_text/auto_size_text.dart';
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/components/app_asset.dart';
import 'package:twins/components/app_text_style.dart';
import 'package:twins/components/buttons/text_button.dart';
import 'package:twins/components/colors.dart';
import 'package:twins/components/static_decoration.dart';
import 'package:twins/features/profile/presentation/providers/profile_provider.dart';
import 'package:twins/style/values.dart';
import 'package:twins/utilities/snack_bar_helper.dart';
import 'package:twins/widgets/rive/image_or_rive.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
class SetLevelPage extends HookConsumerWidget {
  const SetLevelPage({Key? key, this.onNext}) : super(key: key);
  final void Function()? onNext;
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final userLevelProvided = ref.watch(userProfileOrNullProvider)?.level;
    final userLevelState = useState<String?>(userLevelProvided);
    final userLevel = userLevelState.value;
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 60, vertical: 40),
      child: Stack(
        children: [
          const ImageOrRive(
            'assets/rive/dots-complited.riv',
            stateMachine: 'State Machine 1',
            fit: BoxFit.cover,
          ),
          Column(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Row(
                children: [
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        AutoSizeText(
                          'レベルを選びなさい',
                          style: Theme.of(context).textTheme.titleLarge!.copyWith(
                                fontWeight: FontWeight.w700,
                                fontSize: 40,
                                color: const Color(0xFF1D1C1C),
                              ),
                        ),
                        SizedBox(
                          height: S.x(2),
                        ),
                        AutoSizeText(
                          '現在の英検のレベルはどのくらいですか?',
                          style: Theme.of(context).textTheme.titleSmall!.copyWith(
                                fontWeight: FontWeight.w400,
                                fontSize: 26,
                                color: const Color(0xFF1D1C1C),
                              ),
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(
                    width: 125,
                    height: 100,
                    child: ImageOrRive(
                      'assets/rive/rocket.riv',
                      stateMachine: 'State Machine 1',
                      fit: BoxFit.cover,
                    ),
                  ),
                ],
              ),
              Expanded(
                child: Center(
                  child: SingleChildScrollView(
                    padding: const EdgeInsets.symmetric(vertical: 40),
                    child: Column(
                      children: [
                        levelOptionWidget(
                          imageUrl: AppAsset.levelZero,
                          title: '5 級',
                          subTitle: '単語は少しだけ知ってる単語は少しだけしってる',
                          isSelected: userLevel == 'EIKEN5',
                          onTap: () {
                            if (userLevel == 'EIKEN5') {
                              userLevelState.value = null;
                            } else {
                              userLevelState.value = 'EIKEN5';
                            }
                          },
                          isAvailable: true,
                        ),
                        SizedBox(
                          height: S.x(5),
                        ),
                        levelOptionWidget(
                          imageUrl: AppAsset.levelOne,
                          title: '４級',
                          subTitle: '根本のフレーズは知っていて、自己紹介や簡単な質問はでき...',
                          isSelected: userLevel == 'INTERMEDIATE',
                          onTap: () {
                            SnackbarHelper.showWarning(context, 'This level is not available yet');
                          },
                        ),
                        SizedBox(
                          height: S.x(5),
                        ),
                        levelOptionWidget(
                          imageUrl: AppAsset.levelTwo,
                          title: '３級',
                          subTitle: '日常な会話ができる。',
                          isSelected: userLevel == 'ADVANCED',
                          onTap: () {
                            SnackbarHelper.showWarning(context, 'This level is not available yet');
                          },
                        ),
                      ],
                    ),
                  ),
                ),
              ),
              userLevel != null
                  ? PrimaryTextButton(
                      width: 250,
                      title: "next",
                      onPressed: () async {
                        ref.read(profileNotifierProvider.notifier).setLevel(level: userLevel);
                        onNext?.call();
                      })
                  : PrimaryTextButton(
                      width: 250,
                      buttonColor: grey.withOpacity(.6),
                      title: "next",
                      onPressed: () {}),
            ],
          ),
        ],
      ),
    );
  }
  Widget levelOptionWidget(
      {required String imageUrl,
      required String title,
      required String subTitle,
      required bool isSelected,
      required VoidCallback onTap,
      bool isAvailable = false}) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        constraints: const BoxConstraints(maxHeight: 140, maxWidth: 830),
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(20),
          border: Border.all(width: 3.35, color: const Color(0xFFF3EFEF)),
          gradient: isSelected
              ? LinearGradient(
                  colors: [
                    appColor.withOpacity(.1),
                    appColor.withOpacity(.2),
                    appColor.withOpacity(.1),
                  ],
                )
              : null,
        ),
        padding: const EdgeInsets.all(8.0),
        child: Row(children: [
          width10,
          Image.asset(
            imageUrl,
            width: 70,
            height: 60,
            fit: BoxFit.contain,
          ),
          width15,
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Spacer(),
                AutoSizeText(
                  title,
                  style: AppTextStyle.headerStyle.copyWith(
                      fontSize: 33,
                      fontWeight: FontWeight.w700,
                      color: isAvailable ? C.GENIUS_BLACK : const Color(0xFF9A9292)),
                  textAlign: TextAlign.center,
                ),
                height05,
                AutoSizeText(
                  subTitle,
                  style: AppTextStyle.normalRegular12.copyWith(
                      fontSize: 23,
                      fontWeight: FontWeight.w400,
                      color: isAvailable ? C.GENIUS_BLACK : const Color(0xFF9A9292)),
                  textAlign: TextAlign.start,
                ),
                const Spacer(),
              ],
            ),
          )
        ]),
      ),
    );
  }
}
---
Path: /lib/pages/onboarding/widget/header_progress_bar_widget.dart

import 'package:flutter/material.dart';
import 'package:twins/style/values.dart';
import 'package:percent_indicator/percent_indicator.dart';
import 'package:twins/components/app_asset.dart';
class HeaderProgressBarWidget extends StatelessWidget {
  final void Function()? onBack;
  final double percent;
  const HeaderProgressBarWidget({Key? key, required this.percent, this.onBack}) : super(key: key);
  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 50),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
        children: [
          IconButton(
            icon: Container(
              height: 70,
              width: 70,
              decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(70),
                  border: Border.all(color: C.GENIUS_GREY)),
              padding: const EdgeInsets.all(20),
              child: Image.asset(
                AppAsset.arrowBack,
                fit: BoxFit.scaleDown,
              ),
            ),
            onPressed: onBack,
          ),
          Flexible(
            child: LinearPercentIndicator(
              padding: const EdgeInsets.symmetric(horizontal: 60),
              animation: true,
              lineHeight: 38,
              animationDuration: 100,
              animateFromLastPercent: true,
              percent: percent,
              barRadius: const Radius.circular(1000),
              progressColor: C.GENIUS_PRIMARY,
              backgroundColor: C.GENIUS_GREY,
            ),
          ),
          SizedBox(
            height: 110,
            width: 110,
            child: Image.asset('assets/tablet/robot_ai.png'),
          )
        ],
      ),
    );
  }
}
---
Path: /lib/pages/onboarding/widget/score_indicator_widget.dart

import 'package:flutter/material.dart';
import 'package:gap/gap.dart';
import 'package:twins/style/values.dart';
import 'package:percent_indicator/linear_percent_indicator.dart';
class ScoreIndicatorWidget extends StatelessWidget {
  final String title;
  final int scoreValue;
  final Color processColor;
  final TextStyle? titleStyle;
  final TextStyle? valueStyle;
  const ScoreIndicatorWidget(
      {super.key,
      required this.title,
      required this.scoreValue,
      required this.processColor,
      this.titleStyle,
      this.valueStyle});
  @override
  Widget build(BuildContext context) {
    const textStyle = TextStyle(
        fontFamily: 'Poppins',
        fontWeight: FontWeight.w400,
        fontSize: 13.33,
        color: Color(0xFF797474));
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(title, 
            style: titleStyle ?? textStyle),
        const Gap(S.x2),
        Row(
          children: [
            Expanded(
              flex: 7,
              child: LinearPercentIndicator(
                  padding: const EdgeInsets.all(0), 
                  lineHeight: 50,
                  barRadius: const Radius.circular(14),
                  percent: scoreValue / 100,
                  animation: true,
                  animationDuration: 1000,
                  curve: Curves.easeOutCubic,
                  animateFromLastPercent: true,
                  backgroundColor: Colors.grey[300],
                  progressColor: processColor),
            ),
            const Gap(S.x2),
            Expanded(
                flex: 3,
                child:
                    Text('$scoreValue/100', style: valueStyle ?? textStyle.copyWith(fontSize: 12)))
          ],
        ),
      ],
    );
  }
}
---
Path: /lib/pages/onboarding/widget/bottom_indicator_widget.dart

import 'package:flutter/material.dart';
import 'package:twins/style/values.dart';
class BottomIndicatorWidget extends StatelessWidget {
  const BottomIndicatorWidget({Key? key, required this.currentIndex, required this.length})
      : super(key: key);
  final int currentIndex;
  final int length;
  @override
  Widget build(BuildContext context) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        for (int i = 0; i < length; i++)
          Container(
            margin: EdgeInsets.symmetric(horizontal: currentIndex == i ? 3 : 6),
            height: 10,
            width: currentIndex == i ? 50 : 20,
            decoration: BoxDecoration(
                color: currentIndex == i ? C.GENIUS_PRIMARY : C.GENIUS_GREY,
                borderRadius: BorderRadius.circular(100)),
          ),
      ],
    );
  }
}
---
Path: /lib/pages/free_talks/theme_list_item.dart

---
Path: /lib/pages/free_talks/free_talk_page.dart

---
Path: /lib/pages/free_talks/next_theme_item.dart

---
Path: /lib/pages/free_talks/free_talks_page.dart

---
Path: /lib/pages/free_talks/free_talk_card.dart

---
Path: /lib/pages/exercices/conversation.dart

import 'package:auto_size_text/auto_size_text.dart';
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:flutter_spinkit/flutter_spinkit.dart';
import 'package:twins/models/api/chat_request.dart';
import 'package:twins/models/api/lesson_request.dart';
import 'package:twins/style/values.dart';
import 'package:twins/widgets/chat_message_bubble.dart';
import 'package:twins/widgets/chat_scroll_view.dart';
import 'package:twins/widgets/never_avoid_fullscreen_area.dart';
class Conversation extends HookWidget {
  const Conversation({
    Key? key,
    required this.messages,
    required this.isTyping,
  }) : super(key: key);
  final bool isTyping;
  final List<ChatExchange> messages;
  @override
  Widget build(BuildContext context) {
    final currentPageState = useState(0);
    final currentPage = currentPageState.value;
    final pageController = usePageController(initialPage: 0);
    late ChatExchange? lastAssistantMessage;
    try {
      lastAssistantMessage =
          messages.lastWhere((element) => element.role == ChatSenderType.assistant);
    } catch (e) {
      lastAssistantMessage = null;
    }
    late ChatExchange? lastUserMessage;
    try {
      lastUserMessage = messages.lastWhere((element) =>
          element.role == ChatSenderType.user && element.type == ChatMessageType.message);
    } catch (e) {
      lastUserMessage = null;
    }
    return LayoutBuilder(
      builder: (context, constraints) {
        return Stack(
          clipBehavior: Clip.none,
          children: [
            Padding(
              padding: EdgeInsets.only(left: S.x(18.5)) + const EdgeInsets.only(top: 10),
              child: PageView(
                onPageChanged: (index) {
                  currentPageState.value = index;
                },
                controller: pageController,
                children: [
                  Stack(
                    children: [
                      Positioned(
                        top: 60,
                        child: NeverAvoidFullscreenArea(
                          width: constraints.maxWidth,
                          height: constraints.maxHeight,
                          child: Stack(
                            fit: StackFit.expand,
                            alignment: Alignment.center,
                            children: [
                              AnimatedCrossFade(
                                  duration: const Duration(milliseconds: 200),
                                  crossFadeState: currentPage == 0 && !isTyping
                                      ? CrossFadeState.showFirst
                                      : CrossFadeState.showSecond,
                                  secondChild: isTyping
                                      ? const ChatMessageBubble(
                                          characterId: 'currentCharacterId',
                                          chat: ChatExchange(
                                            concept: TranslatedConcept(
                                              content: '',
                                            ),
                                            role: ChatSenderType.assistant,
                                            type: ChatMessageType.message,
                                          ),
                                          child: SizedBox(
                                            height: 20,
                                            child: SpinKitThreeBounce(
                                              color: C.GENIUS_PRIMARY,
                                              size: 24,
                                            ),
                                          ),
                                        )
                                      : Container(),
                                  firstChild: lastAssistantMessage == null
                                      ? Container()
                                      : ChatMessageBubble(
                                          characterId: 'currentCharacterId',
                                          chat: ChatExchange(
                                            concept: lastAssistantMessage.concept,
                                            role: ChatSenderType.assistant,
                                            type: ChatMessageType.message,
                                          ),
                                          showHelpers: true,
                                          child: AutoSizeText(lastAssistantMessage.concept.content),
                                        )
                                  ),
                            ],
                          ),
                        ),
                      ),
                      if (lastUserMessage != null)
                        Align(
                          alignment: Alignment.topRight,
                          child: Padding(
                            padding: EdgeInsets.symmetric(horizontal: S.x(15)),
                            child: ChatMessageBubble(
                              characterId: 'currentCharacterId',
                              chat: ChatExchange(
                                concept: lastUserMessage.concept,
                                role: ChatSenderType.user,
                                type: ChatMessageType.message,
                              ),
                              child: Text(lastUserMessage.concept.content),
                            ),
                          ),
                        ),
                    ],
                  ),
                  Column(
                    children: [
                      Expanded(
                        child: ChatScrollView(
                          characterId: 'currentCharacterId',
                          showHelpers: true,
                          messages: messages,
                          isAvatarTyping: isTyping,
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
            Positioned(
                top: MediaQuery.of(context).size.height / 3 - 160,
                right: -70,
                child: ElevatedButton(
                  onPressed: () {
                    if (currentPage == 0) {
                      pageController.animateToPage(1,
                          duration: const Duration(milliseconds: 300), curve: Curves.easeInOut);
                    } else {
                      pageController.animateToPage(0,
                          duration: const Duration(milliseconds: 300), curve: Curves.easeInOut);
                    }
                  },
                  style: ElevatedButton.styleFrom(
                    shape: const CircleBorder(),
                    padding: EdgeInsets.only(right: S.x(8)),
                    backgroundColor: C.GENIUS_WHITE.withOpacity(0.8),
                  ),
                  child: Container(
                    decoration: const BoxDecoration(
                      borderRadius: BorderRadius.only(
                        topLeft: Radius.circular(45),
                        bottomLeft: Radius.circular(45),
                      ),
                      color: Colors.transparent,
                    ),
                    margin: EdgeInsets.fromLTRB(0, S.x(15), S.x(6), S.x(15)),
                    padding: EdgeInsets.symmetric(horizontal: S.x(4), vertical: S.x(8)),
                    child: currentPage == 0
                        ? const ImageIcon(
                            AssetImage('assets/icons/note-icon.png'),
                            size: 30,
                            color: C.GENIUS_BLACK,
                          )
                        : const Icon(Icons.chat_bubble_outline, size: 30, color: C.GENIUS_BLACK),
                  ),
                )),
          ],
        );
      },
    );
  }
}
---
Path: /lib/pages/exercices/lesson_test_page.dart

import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/features/profile/presentation/providers/profile_provider.dart';
import 'package:twins/mixins/widget.dart';
import 'package:twins/models/api/chat_request.dart';
import 'package:twins/models/api/lesson_request.dart';
import 'package:twins/models/notification_panel_model.dart';
import 'package:twins/models/results/exercice_result.dart';
import 'package:twins/models/results/section_result.dart';
import 'package:twins/pages/exercices/base_lesson_page.dart';
import 'package:twins/pages/exercices/conversation.dart';
import 'package:twins/pages/exercices/exercice_widgets/vocabulary_dialog.dart';
import 'package:twins/providers/genius_api_provider.dart';
import 'package:twins/providers/tts_provider.dart';
import 'package:twins/services/audio_player_service.dart';
import 'package:twins/services/notifications_panel_service.dart';
import 'package:twins/style/genius_button_style.dart';
import 'package:twins/style/values.dart';
import 'package:twins/widgets/chat/chat_area.dart';
import 'package:twins/widgets/core/genius_button.dart';
import 'package:twins/widgets/core/genius_rounded_square_button.dart';
import 'package:twins/widgets/core/notifications/notifications_manager.dart';
import 'package:twins/widgets/rive/image_or_rive.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
class LessonTestPage extends HookConsumerWidget with PageWidget<SectionResult> {
  final LessonData lesson;
  final int maxMessages;
  const LessonTestPage({required this.lesson, required this.maxMessages});
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final messagesState = useState(<ChatExchange>[]);
    final messages = messagesState.value;
    final isTypingState = useState(false);
    final isTyping = isTypingState.value;
    final userEditState = useState(true);
    final tts = ref.watch(ttsNotifierProvider(AudioPlayerType.INTERLOCUTOR).notifier);
    final userMessageCount = messages
        .where((element) =>
            element.role == ChatSenderType.user && element.type == ChatMessageType.message)
        .length;
    final isEnded = userMessageCount >= maxMessages;
    final usedConceptsState = useState(<TranslatedConcept>[]);
    final usedConcepts = usedConceptsState.value;
    final characterIsLoadingState = useState(true);
    final characterIsLoading = characterIsLoadingState.value;
    final userCharacter = ref.watch(userProfileOrNullProvider)?.character;
    final usedCharacter = userCharacter ?? 'assets/rive/character.riv';
    void playAudio(String text) async {
      String characterId = 'currentCharacterId';
      await tts.playAudio(text, characterId);
    }
    double getProgression() {
      if (userMessageCount == 0) {
        return 0;
      }
      if (userMessageCount >= maxMessages) {
        return 1;
      }
      return userMessageCount / maxMessages;
    }
    List<ChatExchange> addMessages(List<ChatExchange> messages, [bool fromResponse = false]) {
      if (fromResponse) {
        final assistantReply =
            messages.lastWhere((element) => element.role == ChatSenderType.assistant);
        playAudio(assistantReply.concept.content);
      }
      final newArray = [
        ...messagesState.value,
        ...messages,
      ];
      messagesState.value = newArray;
      return newArray;
    }
    void sendMessage(String message) async {
      for (var concept in []) {
        if (message.toLowerCase().contains(concept.content.toLowerCase())) {
          if (usedConcepts.contains(concept)) {
            continue;
          }
          ref
              .read(notificationsPanelServiceProvider.notifier)
              .addNotificationPanelData(NotificationPanelType.success, const Text("Nice"));
          usedConceptsState.value = [...usedConceptsState.value, concept];
        }
      }
      isTypingState.value = true;
      userEditState.value = false;
      final newArray = addMessages([
        ChatExchange(
          concept: TranslatedConcept(
            content: message,
          ),
          role: ChatSenderType.user,
          type: ChatMessageType.message,
        ),
      ]);
      if (userMessageCount + 1 >= maxMessages) {
        return;
      }
      try {
        final response = await ref.read(geniusRepositoryProvider).postChat(newArray, '');
        addMessages(response.replies, true);
      } finally {
        isTypingState.value = false;
      }
    }
    useEffect(() {
      WidgetsBinding.instance.addPostFrameCallback((_) async {
      });
      return null;
    }, []);
    void onDismiss() {
      List<ExerciceResult> exerciceResults = [];
      int exercicesDoneCount = 0;
      int exercicesSuccessCount = 0;
      if (isEnded) {
        for (final concept in []) {
          bool succeed = usedConcepts.contains(concept);
          final exerciceResult = ExerciceResult(
            correctAnswer: concept,
            userInput: succeed ? concept : null,
            success: succeed,
          );
          exerciceResults.add(exerciceResult);
          if (succeed) {
            exercicesSuccessCount++;
          }
        }
      }
      SectionResult practiceResult = SectionResult(
        score: exercicesSuccessCount / exercicesDoneCount,
        exercices: exerciceResults,
      );
      dismiss(isEnded ? practiceResult : null);
    }
    return Stack(
      children: [
        BaseLessonPage(
          loading: characterIsLoading,
          topRightContent: GeniusRoundedSquareButton(
            style: GeniusButtonStyle.light,
            size: 40,
            radius: 100,
            onTap: () async {
              await VocabularyDialog(
                notUsedConcepts: [],
                usedConcepts: usedConcepts,
              ).show();
            },
            child: const Icon(
              Icons.list,
            ),
          ),
          background: null,
          character: ImageOrRive(
            usedCharacter,
            stateMachine: 'State Machine 1',
            onLoaded: () {
              characterIsLoadingState.value = false;
            },
          ),
          progress: getProgression(),
          onLeave: onDismiss,
          bodypadding: EdgeInsets.zero,
          children: [
            Expanded(
              child: Conversation(
                messages: messages,
                isTyping: isTyping && !isEnded,
              ),
            ),
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: S.x3),
              child: Column(
                children: [
                  if (!isEnded)
                    Column(
                      children: [
                        if (!isEnded)
                          ChatArea(
                            onMessage: (message) async {
                              sendMessage(message);
                            },
                          ),
                      ],
                    ),
                  if (isEnded)
                    GeniusButton(
                      style: GeniusButtonStyle.dark,
                      onPressed: onDismiss,
                      child: const Text('END'),
                    ),
                  const SizedBox(
                    height: S.x2,
                  ),
                ],
              ),
            ),
          ],
        ),
        NotificationsManager(),
      ],
    );
  }
}
---
Path: /lib/pages/exercices/exercises_page.dart

import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:gap/gap.dart';
import 'package:twins/features/profile/presentation/providers/profile_provider.dart';
import 'package:twins/mixins/widget.dart';
import 'package:twins/models/api/exercise_request.dart';
import 'package:twins/models/api/lesson_request.dart';
import 'package:twins/models/api/section_request.dart';
import 'package:twins/models/results/exercice_result.dart';
import 'package:twins/models/results/section_result.dart';
import 'package:twins/pages/exercices/base_lesson_page.dart';
import 'package:twins/pages/exercices/widgets/exercises_content.dart';
import 'package:twins/providers/asset_or_network_file_provider.dart';
import 'package:twins/providers/feedback_helper_provider.dart';
import 'package:twins/providers/tts_provider.dart';
import 'package:twins/services/audio_player_service.dart';
import 'package:twins/style/genius_button_style.dart';
import 'package:twins/style/values.dart';
import 'package:twins/widgets/core/genius_button.dart';
import 'package:twins/widgets/dialogs/missed_exercises_dialog.dart';
import 'package:twins/widgets/rive/image_or_rive.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:twins/widgets/toggle/toggle_global_sound.dart';
enum ExerciceMode {
  Mandatory,
  Missed,
}
class ExercisesPage extends HookConsumerWidget with PageWidget<SectionResult> {
  final SectionData section;
  final LessonData lesson;
  const ExercisesPage({required this.section, required this.lesson, Key? key})
      : super(key: key);
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final exerciseModeState = useState(ExerciceMode.Mandatory);
    final exerciseMode = exerciseModeState.value;
    final mandatoryExercices = section.exercises;
    final mandatoryExercicesLength = mandatoryExercices.length;
    final currentMandatoryExerciceIndexState = useState(0);
    final currentMandatoryExerciceIndex = currentMandatoryExerciceIndexState.value;
    final currentMandatoryExercice = currentMandatoryExerciceIndex < mandatoryExercicesLength
        ? mandatoryExercices[currentMandatoryExerciceIndex]
        : null;
    final mandatoryExercicesEnded = currentMandatoryExerciceIndex >= mandatoryExercicesLength;
    final totalMandotorySteps = section.totalExercisesCount;
    final currentMandatoryStepState = useState(0);
    final currentMandatoryStep = currentMandatoryStepState.value;
    final mandatoryProgress = currentMandatoryStep / totalMandotorySteps;
    final currentMissedExerciceIndexState = useState(0);
    final currentMissedExerciceIndex = currentMissedExerciceIndexState.value;
    final missedExercisesState = useState<List<ExerciseData>>([]);
    final missedExercises = missedExercisesState.value;
    final missedExercicesLength = missedExercises.length;
    final missedExercicesEnded = currentMissedExerciceIndex >= missedExercicesLength;
    final currentMissedExercise = currentMissedExerciceIndex < missedExercicesLength
        ? missedExercises[currentMissedExerciceIndex]
        : null;
    final totalMissedSteps = missedExercises.length;
    final currentMissedStepState = useState(0);
    final currentMissedStep = currentMissedStepState.value;
    final missedProgress = totalMissedSteps != 0 ? currentMissedStep / totalMissedSteps : 0.0;
    var currentProgress =
        exerciseMode == ExerciceMode.Mandatory ? mandatoryProgress : missedProgress;
    final exercisesEnded = mandatoryExercicesEnded && missedExercicesEnded;
    final currentExercise = currentMandatoryExercice ?? currentMissedExercise;
    final exerciceResultsState = useState<List<ExerciceResult>>([]);
    final exerciceResults = exerciceResultsState.value;
    final exercicesDoneCount = exerciceResults.length;
    final exercicesSuccessCount = exerciceResults.where((e) => e.success).length;
    final preloadedDataRequest = ref.watch(preloadSectionProvider(section));
    final loadingDataSate = useState(true);
    final loadingData = loadingDataSate.value;
    final userCharacter = ref.watch(userProfileOrNullProvider)?.character;
    useEffect(() {
      WidgetsBinding.instance.addPostFrameCallback((_) {
        preloadedDataRequest.when(
          data: (value) {
            loadingDataSate.value = false;
          },
          loading: () {
            loadingDataSate.value = true;
          },
          error: (error, stackTrace) {
            loadingDataSate.value = false;
          },
        );
      });
      return null;
    }, [preloadedDataRequest]);
    final characterIsLoadingState = useState(section.character != null);
    final characterIsLoading = characterIsLoadingState.value;
    final currentAnimationTriggerState = useState('Idle');
    final currentAnimationTrigger = currentAnimationTriggerState.value;
    final interlocutorAnimationTriggerState = useState<String?>("Idle");
    final interlocutorAnimationTrigger = interlocutorAnimationTriggerState.value;
    final interlocutorIsTalkingState = useState<Map<String, bool>>({'Discussion Loop': true});
    final interlocutorPlayingAudio =
        ref.watch(ttsNotifierProvider(AudioPlayerType.INTERLOCUTOR)) == AudioPlayerState.playing;
    final loading = characterIsLoading && loadingData;
    final feedbackHelper = ref.watch(feedbackHelperProvider.notifier);
    void setCharacterAnimation(String trigger, {bool resetToIdle = true, bool avatar = true}) {
      if (resetToIdle) {
        currentAnimationTriggerState.value = 'Idle';
        interlocutorAnimationTriggerState.value = 'Idle';
      }
      WidgetsBinding.instance.addPostFrameCallback((_) async {
        if (avatar) {
          currentAnimationTriggerState.value = trigger;
        } else {
          interlocutorAnimationTriggerState.value = trigger;
        }
      });
    }
    void onProgress(ValueNotifier<int> stepState) {
      stepState.value++;
    }
    void onFinishedExercice(ValueNotifier<int> indexToUpdate, List<ExerciceResult?> result,
        {bool progress = true, addFailToResults = false}) {
      indexToUpdate.value++;
      var nonNullResults = result.whereType<ExerciceResult>().toList();
      if (nonNullResults.isEmpty && progress) {
        onProgress(currentMandatoryStepState);
      }
      final successResults = nonNullResults.where((e) => e.success).toList();
      final failedResults = nonNullResults.where((e) => !e.success).toList();
      exerciceResultsState.value = [
        ...exerciceResultsState.value,
        ...successResults,
      ];
      if (addFailToResults) {
        exerciceResultsState.value = [
          ...exerciceResultsState.value,
          ...failedResults,
        ];
      }
    }
    void onFinishedMandatoryExercice(List<ExerciceResult?> result, {bool progress = true}) async {
      final oneResult = result.isEmpty || result.length > 1 ? null : result.first;
      final missedExercise =
          oneResult != null && oneResult.success == false ? currentMandatoryExercice! : null;
      missedExercisesState.value = [
        ...missedExercises,
        if (missedExercise != null) missedExercise,
      ];
      final willBeLastMandatoryExercice =
          currentMandatoryExerciceIndex + 1 == mandatoryExercicesLength;
      final hasMissedExercises = missedExercises.isNotEmpty || missedExercise != null;
      if (willBeLastMandatoryExercice && hasMissedExercises) {
        await MissedExercisesDialog().show();
        exerciseModeState.value = ExerciceMode.Missed;
      }
      onFinishedExercice(currentMandatoryExerciceIndexState, result, progress: progress);
    }
    void onFinishedMissedExercice(List<ExerciceResult?> result, {bool progress = true}) {
      onFinishedExercice(currentMissedExerciceIndexState, result,
          progress: progress, addFailToResults: true);
    }
    void onConfirmedExercice(bool succeed) {
      setCharacterAnimation(succeed ? 'Success 2' : 'Wonder');
      setCharacterAnimation(succeed ? 'Happy' : 'Wonder', avatar: false);
      if (succeed) {
        feedbackHelper.Success();
      } else {
        feedbackHelper.Failure();
      }
    }
    void onConfirmMandatoryExercise(bool succeed) {
      onProgress(currentMandatoryStepState);
      onConfirmedExercice(succeed);
    }
    void onConfirmMissedExercise(bool succeed) {
      onProgress(currentMissedStepState);
      onConfirmedExercice(succeed);
    }
    useEffect(() {
      if (exercisesEnded) {
        setCharacterAnimation('Success 2');
        setCharacterAnimation('Hello', avatar: false);
      }
      return null;
    }, [exercisesEnded]);
    useEffect(() {
      interlocutorIsTalkingState.value = {'Discussion Loop': interlocutorPlayingAudio};
      return null;
    }, [interlocutorPlayingAudio]);
    return BaseLessonPage(
      exerciceFullScreen: currentExercise?.fullScreen ?? false,
      bodypadding: EdgeInsets.zero, 
      loading: loading,
      background: section.background,
      character: section.character != null
          ? ImageOrRive(
              'assets/rive/girl_city.riv',
              stateMachine: 'State Machine 1',
              triggers: ['Idle', "Wonder", "Success 2", "Hello", "Happy"],
              currentTrigger: interlocutorAnimationTrigger,
              triggerBools: {'Discussion Loop': true},
              currentBoolsTriggers: interlocutorIsTalkingState.value,
              onLoaded: () {
                characterIsLoadingState.value = false;
              },
            )
          : null,
      onLeave: dismiss,
      progress: currentProgress,
      topRightContent: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          ClipOval(
            child: Container(
              color: Colors.white,
              width: 150, 
              height: 150, 
              child: Transform.translate(
                offset: const Offset(4, 40), 
                child: Transform.scale(
                  scale: 1.3,
                  child: ImageOrRive(
                    userCharacter!,
                    stateMachine: 'State Machine 1',
                    triggers: ['Idle', 'Success 2', 'Wonder'],
                    currentTrigger: currentAnimationTrigger,
                    alignment: Alignment.topLeft,
                    fit: BoxFit.cover, 
                  ),
                ),
              ),
            ),
          ),
          const Gap(S.x1),
          const ToggleGlobalSound(),
        ],
      ),
      children: [
        if (!mandatoryExercicesEnded && !loading && exerciseMode == ExerciceMode.Mandatory)
          Expanded(
            child: ExercisesContent(
              key: const Key('mandatory_exercices'),
              lesson: lesson,
              exercises: mandatoryExercices,
              onClose: dismiss,
              onFinishedExercice: onFinishedMandatoryExercice,
              onConfirmedExercice: onConfirmMandatoryExercise,
            ),
          ),
        if (!missedExercicesEnded && !loading && exerciseMode == ExerciceMode.Missed) ...[
          Expanded(
            child: ExercisesContent(
              key: const Key('missed_exercices'),
              lesson: lesson,
              exercises: missedExercises,
              onClose: dismiss,
              onFinishedExercice: onFinishedMissedExercice,
              onConfirmedExercice: onConfirmMissedExercise,
            ),
          ),
        ],
        if (exercisesEnded) ...[
          const Spacer(),
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 20.0),
            child: GeniusButton(
              expanded: true,
              style: GeniusButtonStyle.dark,
              onPressed: () {
                SectionResult practiceResult = SectionResult(
                  score: exercicesSuccessCount / exercicesDoneCount,
                  exercices: exerciceResults,
                );
                feedbackHelper.Finish();
                dismiss(practiceResult);
              },
              child: const Text('END'),
            ),
          ),
        ],
        SizedBox(
          height: S.x(3),
        )
      ],
    );
  }
}
---
Path: /lib/pages/exercices/completion_page.dart

import 'package:auto_size_text/auto_size_text.dart';
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/features/profile/presentation/providers/profile_provider.dart';
import 'package:twins/mixins/widget.dart';
import 'package:twins/models/exercice_reward.dart';
import 'package:twins/models/results/section_result.dart';
import 'package:twins/providers/genius_result_provider.dart';
import 'package:twins/services/currency_service.dart';
import 'package:twins/services/genius_result_service.dart';
import 'package:twins/services/like_genius_service.dart';
import 'package:twins/style/genius_button_style.dart';
import 'package:twins/style/values.dart';
import 'package:twins/widgets/core/genius_button.dart';
import 'package:twins/widgets/core/tabs.dart';
import 'package:twins/widgets/rive/image_or_rive.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
class CompletionPage extends HookConsumerWidget with PageWidget {
  final SectionResult result;
  final String moduleKey;
  final String lessonKey;
  final String sectionKey;
  CompletionPage({
    required this.result,
    required this.moduleKey,
    required this.lessonKey,
    required this.sectionKey,
  });
  List<ExerciceReward> getExerciceRewards(bool isFirstTime, bool hasNoError, double score) {
    List<ExerciceReward> rewards = [];
    rewards.add(
      ExerciceReward(
        image: 'assets/icons/fire-icon.png',
        coins: isFirstTime ? 10 : 5,
        sentence: isFirstTime ? 'Lesson completed for the first time' : 'Lesson done again',
      ),
    );
    rewards.add(
      ExerciceReward(
        image: 'assets/icons/trophy-icon.png',
        coins: score >= 0.7
            ? 10
            : score >= 0.5
                ? 5
                : 2,
        sentence: score >= 0.7
            ? 'Gold score'
            : score >= 0.5
                ? 'Silver score'
                : 'Bronze score',
      ),
    );
    if (hasNoError) {
      rewards.add(
        const ExerciceReward(
          image: 'assets/icons/rocket-icon.png',
          coins: 5,
          sentence: 'No mitakes',
        ),
      );
    }
    return rewards;
  }
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final userCharacter = ref.watch(userProfileOrNullProvider)?.character;
    final usedCharacter = userCharacter ?? 'assets/rive/character.riv';
    final characterTriggerState = useState('Idle');
    final characterTrigger = characterTriggerState.value;
    final isFirstTime = ref.watch(sectionResultProvider(
          level: 'EIKEN5',
          module: moduleKey,
          lesson: lessonKey,
          section: sectionKey,
        )) ==
        null;
    final hasNoErrors = result.exercices.where((e) => e.success == false).isEmpty;
    final rewards = getExerciceRewards(isFirstTime, hasNoErrors, result.score);
    final coins = rewards.fold<int>(
      0,
      (previousValue, element) => previousValue + element.coins,
    );
    void quit() {
      ref.read(geniusResultServiceProvider.notifier).setPracticeResult(
            level: 'EIKEN5',
            module: moduleKey,
            lesson: lessonKey,
            practice: sectionKey,
            result: result,
          );
    }
    void onDismiss() {
      ref.read(currencyServiceProvider.notifier).addCurrency(coins);
      ref.read(likeGeniusServiceProvider.notifier).finishedPractice();
      dismiss();
    }
    return WillPopScope(
      onWillPop: () async {
        quit();
        return true;
      },
      child: Scaffold(
        body: SafeArea(
          child: Container(
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(30),
              color: Colors.white,
            ),
            child: Center(
              child: Stack(
                children: [
                  Align(
                    alignment: Alignment.bottomCenter,
                    child: Image.asset('assets/images/abstract-bg.png'),
                  ),
                  const ImageOrRive('assets/rive/completion-bg.riv',
                      stateMachine: 'State Machine 1'),
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.center,
                    children: [
                      SizedBox(
                        height: S.x(2),
                      ),
                      AutoSizeText('Module 1 - Lesson 1',
                          style: Theme.of(context).textTheme.titleLarge!.copyWith(
                                fontSize: 20,
                                fontWeight: FontWeight.w700,
                              )),
                      AutoSizeText(
                        'Lesson Complete!',
                        style: Theme.of(context).textTheme.titleLarge!.copyWith(
                              fontSize: 50,
                              fontWeight: FontWeight.w800,
                            ),
                      ),
                      Image.asset('assets/tablet/completion_star.png',
                          height: 50, width: 50, fit: BoxFit.contain),
                      SizedBox(
                        height: MediaQuery.of(context).size.height / 3,
                        width: 300,
                        child: Center(
                          child: ImageOrRive(
                            usedCharacter,
                            stateMachine: 'State Machine 1',
                            triggers: ['Idle', 'Success 1'],
                            currentTrigger: characterTrigger,
                            onLoaded: () {
                              Future.delayed(const Duration(milliseconds: 500), () {
                                characterTriggerState.value = 'Success 1';
                              });
                            },
                            alignment: Alignment.topCenter,
                            fit: BoxFit
                                .fitHeight, 
                          ),
                        ),
                      ),
                      Expanded(
                        child: Container(
                          decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(16),
                            color: Colors.white,
                            boxShadow: [
                              BoxShadow(
                                color: Colors.grey.withOpacity(0.5),
                                spreadRadius: 5,
                                blurRadius: 7,
                                offset: const Offset(0, 3), 
                              ),
                            ],
                          ),
                          margin: EdgeInsets.symmetric(vertical: S.x(2), horizontal: S.x(30)),
                          padding: EdgeInsets.symmetric(vertical: S.x(2), horizontal: S.x(5)),
                          child: Column(
                            children: [
                              Expanded(
                                  child: Stack(
                                children: [
                                  Align(
                                    alignment: Alignment.topRight,
                                    child: Image.asset('assets/tablet/robot_ai.png',
                                        width: 80, height: 80, fit: BoxFit.fill),
                                  ),
                                  DefaultTabController(
                                    length: 1,
                                    child: Tabs(
                                      tabs: ['VOCAB'],
                                      children: [
                                        VocabTab(
                                          result: result,
                                        ),
                                      ],
                                    ),
                                  )
                                ],
                              )),
                              GeniusButton(
                                expanded: false,
                                style: GeniusButtonStyle.dark,
                                onPressed: onDismiss,
                                padding: EdgeInsets.symmetric(vertical: S.x2, horizontal: S.x(30)),
                                child: Text('次へ', 
                                    style: Theme.of(context).textTheme.titleLarge!.copyWith(
                                          color: Colors.white,
                                          fontSize: 22,
                                          fontWeight: FontWeight.w700,
                                        )),
                              ),
                            ],
                          ),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }
}
class ScoreTab extends StatelessWidget {
  const ScoreTab({
    super.key,
    required this.coins,
    required this.rewards,
  });
  final int coins;
  final List<ExerciceReward> rewards;
  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        SizedBox(
          height: S.x(5),
        ),
        DefaultTextStyle(
          style: Theme.of(context).textTheme.titleLarge!.copyWith(
                fontSize: 30,
                fontWeight: FontWeight.w900,
              ),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              const Text('+'),
              SizedBox(
                width: 70,
                child: Text(
                  coins.toString(),
                  textAlign: TextAlign.end,
                ),
              ),
              SizedBox(
                width: S.x(4),
              ),
              Image.asset(
                'assets/icons/genius-currency-icon.png',
                height: 40,
              ),
            ],
          ),
        ),
        SizedBox(
          height: S.x(5),
        ),
        Expanded(
          child: SingleChildScrollView(
            child: Padding(
              padding: const EdgeInsets.symmetric(horizontal: S.x5, vertical: 5),
              child: Column(
                children: [
                  for (final reward in rewards) ...[
                    Row(
                      children: [
                        Image.asset(reward.image, width: 25),
                        SizedBox(
                          width: S.x(2),
                        ),
                        Text(
                          '+${reward.coins}',
                          style: Theme.of(context).textTheme.titleSmall!.copyWith(
                                fontWeight: FontWeight.normal,
                              ),
                        ),
                        SizedBox(
                          width: S.x(3),
                        ),
                        Expanded(
                          child: Text(
                            reward.sentence,
                            style: Theme.of(context).textTheme.titleSmall!.copyWith(
                                  fontWeight: FontWeight.normal,
                                ),
                          ),
                        ),
                      ],
                    ),
                    SizedBox(
                      height: S.x(2),
                    )
                  ],
                ],
              ),
            ),
          ),
        ),
      ],
    );
  }
}
class VocabTab extends HookWidget {
  final SectionResult result;
  const VocabTab({
    super.key,
    required this.result,
  });
  @override
  Widget build(BuildContext context) {
    return SingleChildScrollView(
      padding: const EdgeInsets.only(left: 40, bottom: 10),
      child: Wrap(
        crossAxisAlignment: WrapCrossAlignment.center,
        spacing: 40,
        runSpacing: 20,
        children: [
          for (var exercice in result.exercices) ...[
            Container(
              decoration: const BoxDecoration(
                  color: Colors.transparent,
                  border: Border(
                    bottom: BorderSide(width: 1, color: C.GENIUS_GREY),
                  )),
              padding: const EdgeInsets.all(10.0),
              child: Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Column(
                    mainAxisSize: MainAxisSize.min,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          const SizedBox(
                            width: S.half,
                          ),
                          AutoSizeText(
                            exercice.correctAnswer.content,
                            style: Theme.of(context).textTheme.bodyLarge!.copyWith(
                                  fontWeight: FontWeight.bold,
                                ),
                            maxLines: 3,
                            overflow: TextOverflow.ellipsis,
                          ),
                        ],
                      ),
                      const SizedBox(
                        height: S.half,
                      ),
                      Row(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          SizedBox(
                            width: 18,
                            height: 18,
                            child: CircularProgressIndicator(
                              strokeWidth: 5,
                              value: 1,
                              color: exercice.success ? C.GENIUS_SUCCESS : C.GENIUS_ERROR,
                            ),
                          ),
                          SizedBox(
                            width: S.x(2),
                          ),
                          AutoSizeText(
                            exercice.correctAnswer.translation ?? exercice.correctAnswer.content,
                            maxLines: 3,
                            overflow: TextOverflow.ellipsis,
                          ),
                        ],
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ],
        ],
      ),
    );
  }
}
---
Path: /lib/pages/exercices/base_lesson_page.dart

import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:flutter_keyboard_visibility/flutter_keyboard_visibility.dart';
import 'package:gap/gap.dart';
import 'package:twins/style/values.dart';
import 'package:twins/widgets/dialogs/leave_exercice_dialog.dart';
import 'package:twins/widgets/never_avoid_fullscreen_area.dart';
import 'package:twins/widgets/rive/image_or_rive.dart';
import 'package:percent_indicator/linear_percent_indicator.dart';
class BaseLessonPage extends HookWidget {
  final void Function() onLeave;
  final List<Widget> children;
  final double? progress;
  final Widget? topRightContent;
  final String? background;
  final Widget? character;
  final EdgeInsets bodypadding;
  final bool loading;
  final bool exerciceFullScreen;
  const BaseLessonPage({
    required this.onLeave,
    required this.children,
    this.exerciceFullScreen = false,
    this.progress,
    this.topRightContent,
    this.background,
    this.character,
    this.bodypadding = const EdgeInsets.only(left: 20, right: 20),
    required this.loading,
  });
  @override
  Widget build(BuildContext context) {
    final loadingBackgroundState = useState(loading);
    final timedDisplayLoading = loadingBackgroundState.value || loading;
    final displayLoadingState = useState(loading);
    final displayLoading = displayLoadingState.value;
    void handleClose() async {
      if (progress != null && progress! <= 0) {
        onLeave();
        return;
      }
      bool? keepGoing = await LeaveExerciceDialog().show();
      if (keepGoing == false) {
        onLeave();
      }
    }
    useEffect(() {
      if (timedDisplayLoading == false) {
        Future.delayed(const Duration(milliseconds: 1000)).then((value) {
          displayLoadingState.value = false;
        });
      }
      return null;
    }, [timedDisplayLoading]);
    return WillPopScope(
      onWillPop: () async {
        return true;
      },
      child: KeyboardDismissOnTap(
        child: Scaffold(
          body: SizedBox(
            height: double.infinity,
            width: double.infinity,
            child: Stack(
              clipBehavior: Clip.none,
              children: [
                if (exerciceFullScreen == false) ...[
                  if (background != null) ...[
                    NeverAvoidFullscreenArea(
                      child: SizedBox(
                        child: ImageOrRive(
                          background!,
                          onLoaded: () {
                            loadingBackgroundState.value = false;
                          },
                          stateMachine: 'State Machine 1',
                          fit: BoxFit.cover,
                          alignment: Alignment.topCenter,
                        ),
                      ),
                    ),
                  ],
                  if (character != null)
                    Positioned(
                      top: MediaQuery.of(context).size.width / 1280 * 300,
                      left: 0,
                      right: 0,
                      child: Align(
                        child: SizedBox(
                          height: 400,
                          child: character,
                        ),
                      ),
                    ),
                ],
                SafeArea(
                  child: Padding(
                    padding: EdgeInsets.only(top: exerciceFullScreen ? 0 : S.x(4)),
                    child: Stack(
                      fit: StackFit.expand,
                      children: [
                        Padding(
                          padding: bodypadding +
                              EdgeInsets.only(top: exerciceFullScreen ? 0 : S.x(S.x(7))),
                          child: Column(children: children),
                        ),
                        if (exerciceFullScreen == false)
                          Align(
                            alignment: Alignment.topCenter,
                            child: Container(
                              padding: EdgeInsets.symmetric(horizontal: S.x(15)),
                              child: Row(
                                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Expanded(
                                    child: Column(
                                      mainAxisSize: MainAxisSize.min,
                                      mainAxisAlignment: MainAxisAlignment.start,
                                      children: [
                                        Gap(S.x(11)),
                                        Row(
                                          children: [
                                            IconButton(
                                              onPressed: handleClose,
                                              icon: const Icon(
                                                Icons.close,
                                                color: Color(0xFFD9D9D9),
                                                size: 40,
                                              ),
                                            ),
                                            if (progress != null)
                                              Expanded(
                                                child: LinearPercentIndicator(
                                                  padding:
                                                      const EdgeInsets.symmetric(horizontal: 60),
                                                  animation: true,
                                                  linearGradient: const LinearGradient(
                                                      colors: [
                                                        Color(0xFF689BFB),
                                                        Color(0xFF68CAF4)
                                                      ],
                                                      begin: Alignment.centerLeft,
                                                      end: Alignment.centerRight),
                                                  lineHeight: 33,
                                                  animationDuration: 300,
                                                  animateFromLastPercent: true,
                                                  percent: progress!,
                                                  barRadius: const Radius.circular(1000),
                                                  backgroundColor:
                                                      const Color.fromARGB(255, 254, 250, 250),
                                                ),
                                              ),
                                          ],
                                        )
                                      ],
                                    ),
                                  ),
                                  if (topRightContent != null) topRightContent!,
                                ],
                              ),
                            ),
                          ),
                      ],
                    ),
                  ),
                ),
                displayLoading
                    ? Positioned.fill(
                        child: Container(
                        color: Colors.white,
                        child: const Center(
                          child: CircularProgressIndicator(),
                        ),
                      ))
                    : Container(),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
---
Path: /lib/pages/exercices/widgets/exercises_content.dart

import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/models/api/exercise_request.dart';
import 'package:twins/models/api/lesson_request.dart';
import 'package:twins/models/results/exercice_result.dart';
import 'package:twins/pages/exercices/exercice_widgets/explanation_widget.dart';
import 'package:twins/pages/exercices/exercice_widgets/listening_widget.dart';
import 'package:twins/pages/exercices/exercice_widgets/reading_widget.dart';
import 'package:twins/pages/exercices/exercice_widgets/scripted_conversation_widget.dart';
import 'package:twins/pages/exercices/exercice_widgets/vocabulary_acquisition_widget.dart';
import 'package:twins/pages/exercices/exercice_widgets/vocabulary_practice_widget.dart';
import 'package:twins/pages/exercices/exercice_widgets/word_completion_widget.dart';
import 'package:twins/pages/exercices/exercice_widgets/word_reordering_widget.dart';
import 'package:twins/style/genius_button_style.dart';
import 'package:twins/widgets/core/genius_button.dart';
class ExercisesContent extends HookWidget {
  const ExercisesContent({
    Key? key,
    required this.lesson,
    required this.exercises,
    required this.onFinishedExercice,
    required this.onConfirmedExercice,
    required this.onClose,
  }) : super(key: key);
  final LessonData lesson;
  final List<ExerciseData> exercises;
  final void Function(List<ExerciceResult?> result, {bool progress}) onFinishedExercice;
  final void Function(bool succeed) onConfirmedExercice;
  final void Function() onClose;
  @override
  Widget build(BuildContext context) {
    final pageViewController = usePageController(initialPage: 0, viewportFraction: 1.5);
    final exercisesLength = exercises.length;
    final currentExerciceIndexState = useState(0);
    void finishedExercice(List<ExerciceResult?> result, {bool progress = true}) {
      if (currentExerciceIndexState.value + 1 < exercisesLength) {
        currentExerciceIndexState.value++;
        pageViewController.nextPage(
          duration: const Duration(milliseconds: 800),
          curve: Curves.easeOutCirc,
        );
      }
      onFinishedExercice(result, progress: progress);
    }
    return PageView.builder(
      physics: const NeverScrollableScrollPhysics(),
      controller: pageViewController,
      itemCount: exercisesLength,
      itemBuilder: (context, index) => FractionallySizedBox(
        widthFactor: 1 / pageViewController.viewportFraction,
        child: exercises[index].map(
          vocabularyAcquisition: (ex) => VocabularyAcquisitionWidget(
            exercice: ex.vocabularyAcquisition,
            onFinishedExercice: finishedExercice,
            key: Key(ex.vocabularyAcquisition.concept.content),
          ),
          vocabularyPractice: (ex) => VocabularyPracticeWidget(
            exercice: ex.vocabularyPractice,
            onFinishedExercice: finishedExercice,
            onConfirmedExercice: onConfirmedExercice,
            key: Key(ex.vocabularyPractice.concept.content),
          ),
          wordReordering: (ex) => WordReorderingWidget(
            exercice: ex.wordReordering,
            onFinishedExercice: finishedExercice,
            onConfirmedExercice: onConfirmedExercice,
          ),
          wordCompletion: (ex) => WordCompletionWidget(
            exercice: ex.wordCompletion,
            onFinishedExercice: finishedExercice,
            onConfirmedExercice: onConfirmedExercice,
            key: Key(ex.wordCompletion.concept.content),
          ),
          reading: (ex) => ReadingWidget(
            exercice: ex.reading,
            onFinishedExercice: finishedExercice,
            onConfirmedExercice: onConfirmedExercice,
            key: Key(ex.reading.concept.content),
          ),
          listening: (value) => ListeningWidget(
            exercice: value.listening,
            onFinishedExercice: finishedExercice,
            onConfirmedExercice: onConfirmedExercice,
            key: Key(value.listening.concept.content),
          ),
          scriptedConversation: (ex) => ScriptedConversationWidget(
            exercice: ex.scriptedConversation,
            onFinishedExercice: finishedExercice,
            onConfirmedExercice: onConfirmedExercice,
          ),
          explanation: (ex) => ExplanationWidget(
            lesson: lesson,
            exercice: ex.explanation,
            onFinishedExercice: finishedExercice,
            onConfirmedExercice: onConfirmedExercice,
            onClose: onClose,
          ),
          unknown: (ex) => Column(
            children: [
              const Spacer(),
              RichText(
                  textAlign: TextAlign.center,
                  text: TextSpan(
                      style: const TextStyle(
                        color: Colors.black,
                        fontSize: 20,
                      ),
                      children: [
                        const TextSpan(text: 'Sorry, '),
                        const TextSpan(
                          text: 'Genius',
                          style: TextStyle(
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        const TextSpan(text: ' does not know this exercice yet.'),
                        const TextSpan(text: "\n\nYou may need to update your app."),
                        TextSpan(
                            text: "\n\nOr you can skip.",
                            style: TextStyle(color: Colors.grey[600])),
                      ])),
              const Spacer(),
              GeniusButton(
                style: GeniusButtonStyle.dark,
                onPressed: () {
                  finishedExercice([null]);
                },
                child: const Text('Skip'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
---
Path: /lib/pages/exercices/exercice_widgets/vocabulary_acquisition_widget.dart

import 'package:auto_size_text/auto_size_text.dart';
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:twins/components/static_decoration.dart';
import 'package:twins/models/api/exercise_request.dart';
import 'package:twins/models/results/exercice_result.dart';
import 'package:twins/pages/exercices/exercice_widgets/card_content.dart';
import 'package:twins/providers/tts_provider.dart';
import 'package:twins/services/audio_player_service.dart';
import 'package:twins/style/genius_button_style.dart';
import 'package:twins/style/values.dart';
import 'package:twins/widgets/core/flippable_widget.dart';
import 'package:twins/widgets/core/genius_button.dart';
class VocabularyAcquisitionWidget extends HookConsumerWidget {
  const VocabularyAcquisitionWidget({
    Key? key,
    required this.exercice,
    required this.onFinishedExercice,
  }) : super(key: key);
  final VocabularyAcquisitionData exercice;
  final Function(List<ExerciceResult?> results) onFinishedExercice;
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final showFront = useState(true);
    final tts = ref.watch(ttsNotifierProvider(AudioPlayerType.EXERCISE).notifier);
    void playAudio(String text) async {
      String characterId = 'currentCharacterId';
      await tts.playAudio(text, characterId);
    }
    return Padding(
      padding: EdgeInsets.symmetric(horizontal: S.x(18.5)),
      child: Column(
        mainAxisSize: MainAxisSize.max,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          AutoSizeText('Let’s learn some words!',
              style: Theme.of(context)
                  .textTheme
                  .titleLarge
                  ?.copyWith(fontSize: 25, fontWeight: FontWeight.w700, color: C.GENIUS_BLACK)),
          customHeight(20),
          Expanded(
            child: LayoutBuilder(
              builder: (context, constraints) => Center(
                child: SizedBox(
                  width: constraints.maxHeight,
                  height: constraints.maxHeight,
                  child: FlippableWidget(
                    showFront: showFront.value,
                    frontContent: FrontCardContent(
                      concept: exercice.concept,
                      onTap: () {
                        playAudio(exercice.concept.content);
                        showFront.value = !showFront.value;
                      },
                    ),
                    backContent: BackCardContent(
                      concept: exercice.concept,
                      onTap: () => showFront.value = !showFront.value,
                    ),
                  ),
                ),
              ),
            ),
          ),
          customHeight(40),
          Center(
            child: GeniusButton(
              style: GeniusButtonStyle.dark,
              onPressed: () {
                onFinishedExercice([null]);
              },
              padding: const EdgeInsets.symmetric(vertical: S.x2, horizontal: 100),
              child: const AutoSizeText("Next"),
            ),
          ),
        ],
      ),
    );
  }
}
---
Path: /lib/pages/exercices/exercice_widgets/listening_widget.dart

import 'dart:typed_data';
import 'package:auto_size_text/auto_size_text.dart';
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:flutter_spinkit/flutter_spinkit.dart';
import 'package:twins/components/app_asset.dart';
import 'package:twins/components/static_decoration.dart';
import 'package:twins/models/api/exercise_request.dart';
import 'package:twins/models/results/exercice_result.dart';
import 'package:twins/notifiers/setting_notifier.dart';
import 'package:twins/pages/exercices/exercice_widgets/multiple_choice.dart';
import 'package:twins/providers/asset_or_network_file_provider.dart';
import 'package:twins/services/audio_player_service.dart';
import 'package:twins/style/genius_button_style.dart';
import 'package:twins/style/values.dart';
import 'package:twins/utilities/snack_bar_helper.dart';
import 'package:twins/widgets/core/genius_rounded_square_button.dart';
import 'package:twins/widgets/rive/image_or_rive.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
class ListeningWidget extends HookConsumerWidget {
  const ListeningWidget({
    required this.exercice,
    required this.onFinishedExercice,
    required this.onConfirmedExercice,
    Key? key,
  }) : super(key: key);
  final ListeningData exercice;
  final Function(List<ExerciceResult?> result) onFinishedExercice;
  final Function(bool) onConfirmedExercice;
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final byteDataRequest = ref.watch(assetOrNetworkFileProvider(exercice.audio));
    final audioPlayerService =
        ref.watch(audioPlayerServiceProvider(AudioPlayerType.EXERCISE).notifier);
    final audioExerciseIsPlaying =
        ref.watch(audioPlayerServiceProvider(AudioPlayerType.EXERCISE)) == AudioPlayerState.playing;
    final byteData = useState<ByteData?>(null);
    final loadingState = useState(true);
    final loading = loadingState.value;
    final playedAmountState = useState(0);
    final playedAmount = playedAmountState.value;
    final canReplay = playedAmount <= 1;
    final hasPlayed = playedAmount > 0;
    final globalSoundEnabled = ref.watch(settingNotifierProvider).globalSoundEnabled;
    void finishedExercice(ExerciceResult? result) {
      onFinishedExercice([result]);
    }
    useEffect(() {
      WidgetsBinding.instance.addPostFrameCallback((_) {
        byteDataRequest.when(
          data: (value) {
            byteData.value = value;
            loadingState.value = false;
          },
          loading: () {
            loadingState.value = true;
          },
          error: (error, stackTrace) {
            loadingState.value = false;
            SnackbarHelper.showError(context, "Could not load audio file");
          },
        );
      });
      return null;
    }, [byteDataRequest]);
    useEffect(() {
      return () {
        audioPlayerService.stop();
      };
    }, []);
    return Padding(
      padding: EdgeInsets.symmetric(horizontal: S.x(18.5)),
      child: Column(
        mainAxisSize: MainAxisSize.max,
        children: [
          Align(
            alignment: Alignment.centerLeft,
            child: Text.rich(TextSpan(children: [
              TextSpan(
                  text: '会話の応答文選択',
                  style: Theme.of(context)
                      .textTheme
                      .titleLarge
                      ?.copyWith(fontSize: 30, color: const Color(0xFF1D1C1C))),
              const WidgetSpan(child: width15),
              WidgetSpan(
                  child: Image.asset(AppAsset.listeningIcon, height: 30, fit: BoxFit.fitHeight))
            ])),
          ),
          if (exercice.image != null) ...[
            Expanded(
              flex: 2,
              child: LayoutBuilder(builder: (context, constraints) {
                double chosenSize = constraints.maxHeight > constraints.maxWidth
                    ? constraints.maxHeight
                    : constraints.maxHeight;
                return Center(
                  child: SizedBox(
                    height: chosenSize,
                    width: chosenSize,
                    child: ClipRRect(
                      borderRadius: BorderRadius.circular(35),
                      child: ImageOrRive(
                        exercice.image!,
                        fit: BoxFit.contain,
                      ),
                    ),
                  ),
                );
              }),
            ),
          ],
          SizedBox(height: S.x(2)),
          Expanded(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.start,
              children: [
                const AutoSizeText("Listen carefully and choose the right answer",
                    style: TextStyle(
                        fontFamily: 'Poppins',
                        fontWeight: FontWeight.w400,
                        fontSize: 26,
                        color: Color(0xFF8E8B8B)),
                    textAlign: TextAlign.center),
                SizedBox(height: S.x(2)),
                if (exercice.image == null) const Spacer(),
                Container(
                  alignment: Alignment.topCenter,
                  child: Column(
                    mainAxisSize: MainAxisSize.max,
                    children: [
                      if (audioExerciseIsPlaying)
                        const SpinKitWave(
                          color: C.GENIUS_PRIMARY,
                          size: 70,
                        ),
                      if (!audioExerciseIsPlaying)
                        GeniusRoundedSquareButton(
                          size: 80,
                          radius: 1000,
                          onTap: () {
                            if (!globalSoundEnabled) return;
                            if (byteData.value == null) return;
                            if (!canReplay) {
                              SnackbarHelper.showWarning(context, "You can play only twice");
                              return;
                            }
                            playedAmountState.value++;
                            audioPlayerService.playFile(data: byteData.value!);
                          },
                          style: canReplay ? GeniusButtonStyle.dark : GeniusButtonStyle.greyLight,
                          child: loading
                              ? const SizedBox(
                                  height: 70,
                                  width: 70,
                                  child: CircularProgressIndicator(
                                    color: C.GENIUS_WHITE,
                                  ),
                                )
                              : !hasPlayed
                                  ? const Icon(Icons.play_arrow_rounded)
                                  : const Icon(Icons.replay),
                        )
                    ],
                  ),
                ),
              ],
            ),
          ),
          Expanded(
            flex: exercice.image == null ? 2 : 1,
            child: MultipleChoice(
              confirmText: '送信する',
              isHorizontal: !(exercice.displayWords ?? true),
              displayWords: exercice.displayWords ?? false,
              shuffle: false,
              answerIsInOptions: true,
              lined: true,
              correctAnswer: exercice.concept,
              choices: exercice.choices,
              onFinishedExercice: finishedExercice,
              onConfirmedExercice: onConfirmedExercice,
            ),
          ),
        ],
      ),
    );
  }
}
---
Path: /lib/pages/exercices/exercice_widgets/word_completion_widget.dart

import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/components/static_decoration.dart';
import 'package:twins/models/api/exercise_request.dart';
import 'package:twins/models/api/lesson_request.dart';
import 'package:twins/models/results/exercice_result.dart';
import 'package:twins/pages/exercices/exercice_widgets/multiple_choice.dart';
import 'package:twins/style/values.dart';
import 'package:twins/utilities/custom_split.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
class WordCompletionWidget extends HookConsumerWidget {
  const WordCompletionWidget({
    required this.exercice,
    required this.onFinishedExercice,
    required this.onConfirmedExercice,
    Key? key,
  }) : super(key: key);
  final WordCompletionData exercice;
  final Function(List<ExerciceResult?> result) onFinishedExercice;
  final Function(bool) onConfirmedExercice;
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final elemetsState = useState<List<WordElement>>([]);
    final elements = elemetsState.value;
    void finishedExercice(ExerciceResult? result) {
      onFinishedExercice([result]);
    }
    useEffect(() {
      List<String> parts = customSplit(exercice.sentence);
      WidgetsBinding.instance.addPostFrameCallback((_) {
        elemetsState.value = parts.map((e) {
          if (e == '\$w') {
            return WordElement(TranslatedConcept(content: e), WordElementType.EMPTY);
          } else {
            return WordElement(TranslatedConcept(content: e), WordElementType.STATIC);
          }
        }).toList();
      });
      return null;
    }, []);
    return Padding(
      padding: EdgeInsets.symmetric(horizontal: S.x(18.5)),
      child: Column(
        mainAxisSize: MainAxisSize.max,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text('短文の語句空所補充',
              style: Theme.of(context)
                  .textTheme
                  .titleLarge
                  ?.copyWith(fontSize: 40, fontWeight: FontWeight.w700, color: C.GENIUS_BLACK)),
          height20,
          Expanded(
            child: Center(
              child: Text.rich(
                TextSpan(
                  style: const TextStyle(
                      fontSize: 22, fontWeight: FontWeight.w400, color: Color(0xFF565656)),
                  children: [
                    for (final e in elements) ...[
                      if (e.type == WordElementType.STATIC) TextSpan(text: e.concept.content),
                      if (e.type == WordElementType.EMPTY)
                        WidgetSpan(
                          child: Container(
                            margin: const EdgeInsets.only(top: 22),
                            width: 60,
                            height: 2,
                            child: const Divider(color: C.GENIUS_GREY),
                          ),
                        ),
                      if (e.type == WordElementType.FILLED)
                        WidgetSpan(
                          child: Container(
                            padding: const EdgeInsets.fromLTRB(5, 0, 5, 0),
                            decoration: const BoxDecoration(
                              border: Border(
                                bottom: BorderSide(
                                  color: C.GENIUS_GREY,
                                  width: 1.0, 
                                ),
                              ),
                            ),
                            child: Text(
                              e.concept.content,
                              style: const TextStyle(
                                  fontSize: 22,
                                  fontWeight: FontWeight.w400,
                                  color: C.GENIUS_PRIMARY),
                            ),
                          ),
                        ),
                    ]
                  ],
                ),
              ),
            ),
          ),
          Expanded(
            flex: 2,
            child: Center(
              child: MultipleChoice(
                lined: true,
                confirmText: '送信する',
                correctAnswer: exercice.concept,
                choices: exercice.choices,
                onFinishedExercice: finishedExercice,
                onConfirmedExercice: onConfirmedExercice,
                onSelected: (concept) {
                  if (concept == null) return;
                  elemetsState.value = [
                    ...elemetsState.value.map((e) {
                      if (e.type == WordElementType.EMPTY || e.type == WordElementType.FILLED) {
                        return WordElement(concept, WordElementType.FILLED);
                      } else {
                        return e;
                      }
                    }).toList()
                  ];
                },
              ),
            ),
          ),
        ],
      ),
    );
  }
}
---
Path: /lib/pages/exercices/exercice_widgets/scripted_conversation_widget.dart

import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/models/api/chat_request.dart';
import 'package:twins/models/api/exercise_request.dart';
import 'package:twins/models/api/lesson_request.dart';
import 'package:twins/models/results/exercice_result.dart';
import 'package:twins/pages/exercices/conversation.dart';
import 'package:twins/pages/exercices/exercice_widgets/multiple_choice.dart';
import 'package:twins/providers/tts_provider.dart';
import 'package:twins/services/audio_player_service.dart';
import 'package:twins/style/genius_button_style.dart';
import 'package:twins/style/values.dart';
import 'package:twins/widgets/core/genius_button.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
class ScriptedConversationWidget extends HookConsumerWidget {
  const ScriptedConversationWidget({
    required this.exercice,
    required this.onFinishedExercice,
    required this.onConfirmedExercice,
    Key? key,
  }) : super(key: key);
  final ScriptedConversationData exercice;
  final Function(List<ExerciceResult?> result) onFinishedExercice;
  final Function(bool) onConfirmedExercice;
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final currentIndexState = useState(0);
    final currentIndex = currentIndexState.value;
    final ChatExchangeData? currentPractice =
        currentIndex >= exercice.conversation.length ? null : exercice.conversation[currentIndex];
    final messagesState = useState(<ChatExchange>[]);
    final messages = messagesState.value;
    final isTypingState = useState(true);
    final isTyping = isTypingState.value;
    final userEdit = currentIndex >= exercice.conversation.length
        ? false
        : exercice.conversation[currentIndex].type == ChatExchangeDataType.INPUT;
    final tts = ref.watch(ttsNotifierProvider(AudioPlayerType.INTERLOCUTOR).notifier);
    final isEnded = currentIndex >= exercice.conversation.length;
    final exerciceResultsState = useState<List<ExerciceResult>>([]);
    final exerciceResults = exerciceResultsState.value;
    void playAudio(String text) async {
      String characterId = 'currentCharacterId';
      await tts.playAudio(text, characterId);
    }
    List<ChatExchange> addMessages(List<ChatExchange> messages, [bool fromResponse = false]) {
      if (fromResponse) {
        final assistantReply =
            messages.lastWhere((element) => element.role == ChatSenderType.assistant);
        playAudio(assistantReply.concept.content);
      }
      final newArray = [
        ...messagesState.value,
        ...messages,
      ];
      messagesState.value = newArray;
      return newArray;
    }
    useEffect(() {
      if (currentIndex >= exercice.conversation.length || currentPractice == null) {
        return;
      }
      bool isInput = currentPractice.type == ChatExchangeDataType.INPUT;
      if (isInput) {
        return;
      }
      bool isAssistant = currentPractice.type == ChatExchangeDataType.ASSISTANT;
      bool isTranslated = false;
      WidgetsBinding.instance.addPostFrameCallback((_) async {
        isTypingState.value = true;
        await Future.delayed(const Duration(milliseconds: 800));
        if (currentIndex + 1 < exercice.conversation.length &&
            exercice.conversation[currentIndex + 1].type == ChatExchangeDataType.INPUT) {
          currentIndexState.value++;
        }
        isTypingState.value = false;
        addMessages([
          ChatExchange(
            concept: TranslatedConcept(
              content: currentPractice.concept.content,
              translation: currentPractice.concept.translation,
            ),
            displayTranslation: isTranslated,
            role: isAssistant ? ChatSenderType.assistant : ChatSenderType.user,
            type: isInput ? ChatMessageType.error : ChatMessageType.message,
          )
        ], isAssistant);
      });
      return null;
    }, [currentIndex]);
    void finishedExercice(ExerciceResult? result) {
      if (result != null) {
        addMessages([
          ChatExchange(
            concept: result.userInput!,
            role: ChatSenderType.user,
            type: ChatMessageType.message,
          ),
          if (!result.success)
            ChatExchange(
              concept: exercice.conversation[currentIndex].concept,
              role: ChatSenderType.user,
              type: ChatMessageType.error,
            ),
        ]);
        exerciceResultsState.value = [
          ...exerciceResultsState.value,
          ExerciceResult(
              success: result.success,
              correctAnswer: exercice.conversation[currentIndex].concept,
              userInput: result.userInput)
        ];
      }
      currentIndexState.value++;
    }
    final currentExercice =
        currentIndex < exercice.conversation.length ? exercice.conversation[currentIndex] : null;
    return Column(
      mainAxisSize: MainAxisSize.max,
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Expanded(
          child: Conversation(
            messages: messages,
            isTyping: isTyping,
          ),
        ),
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: S.x5),
          child: Column(
            children: [
              if (!isEnded)
                Column(
                  children: [
                    Center(
                      child: AnimatedCrossFade(
                        firstChild: SizedBox(
                          height: MediaQuery.of(context).size.height / 3,
                          child: MultipleChoice(
                            confirmText: '送信する',
                            maxChoices: 3,
                            shuffle: true,
                            lined: true,
                            correctAnswer: currentExercice!.concept,
                            choices: currentExercice.choices,
                            onFinishedExercice: finishedExercice,
                            onConfirmedExercice: onConfirmedExercice,
                          ),
                        ),
                        secondChild: SizedBox(
                          height: MediaQuery.of(context).size.height / 4,
                          width: double.infinity,
                        ),
                        crossFadeState:
                            userEdit ? CrossFadeState.showFirst : CrossFadeState.showSecond,
                        duration: const Duration(milliseconds: 0),
                      ),
                    ),
                  ],
                ),
              if (isEnded)
                GeniusButton(
                  expanded: true,
                  style: GeniusButtonStyle.dark,
                  onPressed: () {
                    onFinishedExercice(exerciceResults);
                  },
                  child: const Text('Finish conversation'),
                ),
              const SizedBox(
                height: S.x2,
              ),
            ],
          ),
        ),
      ],
    );
  }
}
---
Path: /lib/pages/exercices/exercice_widgets/vocabulary_practice_widget.dart

import 'package:auto_size_text/auto_size_text.dart';
import 'package:flutter/material.dart';
import 'package:twins/components/static_decoration.dart';
import 'package:twins/models/api/exercise_request.dart';
import 'package:twins/models/results/exercice_result.dart';
import 'package:twins/pages/exercices/exercice_widgets/card_content.dart';
import 'package:twins/pages/exercices/exercice_widgets/multiple_choice.dart';
import 'package:twins/style/values.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
class VocabularyPracticeWidget extends HookConsumerWidget {
  const VocabularyPracticeWidget({
    required this.exercice,
    required this.onFinishedExercice,
    required this.onConfirmedExercice,
    Key? key,
  }) : super(key: key);
  final VocabularyPracticeData exercice;
  final Function(List<ExerciceResult?> results) onFinishedExercice;
  final Function(bool) onConfirmedExercice;
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    void finishedExercice(ExerciceResult? result) {
      onFinishedExercice([result]);
    }
    return Padding(
      padding: EdgeInsets.symmetric(horizontal: S.x(18.5)),
      child: Column(
        mainAxisSize: MainAxisSize.max,
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          Align(
            alignment: AlignmentDirectional.topStart,
            child: AutoSizeText('Let\'s learn some words!',
                style: Theme.of(context)
                    .textTheme
                    .titleLarge
                    ?.copyWith(fontSize: 25, fontWeight: FontWeight.w700, color: C.GENIUS_BLACK)),
          ),
          customHeight(20),
          Expanded(
            flex: 3,
            child: LayoutBuilder(
              builder: (context, constraints) => Center(
                child: SizedBox(
                  width: constraints.maxHeight,
                  height: constraints.maxHeight,
                  child: FrontCardContent(
                    concept: exercice.concept,
                  ),
                ),
              ),
            ),
          ),
          SizedBox(height: S.x(2)),
          Expanded(
            flex: 2,
            child: MultipleChoice(
              correctAnswer: exercice.concept,
              choices: exercice.choices,
              onFinishedExercice: finishedExercice,
              onConfirmedExercice: onConfirmedExercice,
            ),
          ),
          height20
        ],
      ),
    );
  }
}
---
Path: /lib/pages/exercices/exercice_widgets/mcq_exercice.dart

import 'package:flutter/material.dart';
import 'package:twins/models/api/lesson_request.dart';
import 'package:twins/models/mcq_exercise_model.dart';
import 'package:twins/pages/exercices/exercice_widgets/card_content.dart';
import 'package:twins/style/values.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
class MCQExercice extends HookConsumerWidget {
  const MCQExercice({
    required this.exercice,
    required this.onFinishedExercice,
    required this.onConfirmedExercice,
    Key? key,
  }) : super(key: key);
  final MCQExerciseData exercice;
  final Function(bool, {TranslatedConcept? selected}) onFinishedExercice;
  final Function(bool) onConfirmedExercice;
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return Column(
      mainAxisSize: MainAxisSize.max,
      children: [
        Expanded(
          child: Padding(
            padding: EdgeInsets.all(S.x(5)),
            child: LayoutBuilder(
              builder: (context, constraints) => Center(
                child: SizedBox(
                  width: constraints.maxWidth,
                  height: constraints.maxWidth,
                  child: Center(
                    child: FrontCardContent(
                      concept: exercice.answer,
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
        SizedBox(height: S.x(8)),
      ],
    );
  }
}
---
Path: /lib/pages/exercices/exercice_widgets/multiple_choice.dart

import 'package:auto_size_text/auto_size_text.dart';
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:twins/models/api/lesson_request.dart';
import 'package:twins/models/mcq_exercise_model.dart';
import 'package:twins/models/results/exercice_result.dart';
import 'package:twins/providers/tts_provider.dart';
import 'package:twins/services/audio_player_service.dart';
import 'package:twins/style/genius_button_style.dart';
import 'package:twins/style/values.dart';
import 'package:twins/widgets/core/genius_button.dart';
import 'package:twins/widgets/core/genius_rounded_square_button.dart';
import 'package:google_fonts/google_fonts.dart';
class MultipleChoice extends HookConsumerWidget {
  const MultipleChoice({
    required this.correctAnswer,
    required this.choices,
    required this.onFinishedExercice,
    required this.onConfirmedExercice,
    this.onSelected,
    this.lined = false,
    this.shuffle = true,
    this.answerIsInOptions = false,
    this.displayWords = true,
    this.isHorizontal = false,
    this.confirmText,
    this.nextText,
    this.maxChoices = 4,
  });
  final TranslatedConcept correctAnswer;
  final List<TranslatedConcept> choices;
  final Function(ExerciceResult? result) onFinishedExercice;
  final Function(TranslatedConcept? concept)? onSelected;
  final Function(bool) onConfirmedExercice;
  final bool shuffle;
  final bool answerIsInOptions;
  final bool displayWords;
  final bool lined;
  final bool isHorizontal;
  final int maxChoices;
  final String? confirmText, nextText;
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final exercise = useMemoized(() {
      return MCQExerciseData.createMCQExerciseData(
        nbOptions: maxChoices,
        correctAnswer: correctAnswer,
        options: choices,
        shuffle: shuffle,
        answerIsInOptions: answerIsInOptions,
      );
    }, [correctAnswer, choices]);
    final generatedChoices = exercise.concepts;
    final selectedAnwserIndexState = useState<int?>(null);
    final selectedAnwserIndex = selectedAnwserIndexState.value;
    final isGoodAnswer =
        selectedAnwserIndex != null && generatedChoices[selectedAnwserIndex] == correctAnswer;
    final confirmedState = useState(false);
    final confirmed = confirmedState.value;
    final tts = ref.watch(ttsNotifierProvider(AudioPlayerType.EXERCISE).notifier);
    void playAudio(String text) async {
      String characterId = 'currentCharacterId';
      await tts.playAudio(text, characterId);
    }
    Widget content;
    if (!lined) {
      content = SizedBox(
        width: MediaQuery.of(context).size.width / 3,
        child: GridView.builder(
          padding: const EdgeInsets.all(20),
          physics: const NeverScrollableScrollPhysics(),
          gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
            crossAxisCount: 2,
            crossAxisSpacing: 20, 
            mainAxisSpacing: S.x(2), 
            childAspectRatio: 4,
          ),
          itemCount: generatedChoices.length,
          itemBuilder: (context, i) {
            return GeniusButton(
              expanded: false,
              radius: 65,
              style: selectedAnwserIndex == i && confirmed && !isGoodAnswer
                  ? GeniusButtonStyle.error
                  : confirmed && generatedChoices[i] == correctAnswer
                      ? GeniusButtonStyle.success
                      : selectedAnwserIndex == i
                          ? GeniusButtonStyle.dark
                          : GeniusButtonStyle.greyLight,
              onPressed: () {
                if (!confirmed) {
                  onSelected?.call(generatedChoices[i]);
                  selectedAnwserIndexState.value = i;
                  playAudio(generatedChoices[i].content);
                }
              },
              child: Center(child: AutoSizeText(generatedChoices[i].content)),
            );
          },
        ),
      );
    } else {
      if (!isHorizontal) {
        content = SizedBox(
          width: MediaQuery.of(context).size.width / 3,
          child: ListView.separated(
            shrinkWrap: true,
            physics: const NeverScrollableScrollPhysics(),
            separatorBuilder: (context, index) => const SizedBox(
              height: 10,
            ),
            itemCount: generatedChoices.length,
            itemBuilder: (context, i) {
              return GeniusButton(
                padding: const EdgeInsets.symmetric(horizontal: S.x4, vertical: S.x1),
                expanded: true,
                style: selectedAnwserIndex == i && confirmed && !isGoodAnswer
                    ? GeniusButtonStyle.error
                    : confirmed && generatedChoices[i] == correctAnswer
                        ? GeniusButtonStyle.success
                        : selectedAnwserIndex == i
                            ? GeniusButtonStyle.dark
                            : GeniusButtonStyle.greyLight,
                onPressed: () {
                  if (!confirmed) {
                    onSelected?.call(generatedChoices[i]);
                    selectedAnwserIndexState.value = i;
                    playAudio(generatedChoices[i].content);
                  }
                },
                child: Row(
                  children: [
                    Text((i + 1).toString(),
                        style: GoogleFonts.openSans(
                            fontWeight: FontWeight.w600,
                            fontSize: 25,
                            color: const Color(0xFFE2D9D9))),
                    const Spacer(),
                    AutoSizeText(generatedChoices[i].content),
                    const Spacer(),
                  ],
                ),
              );
            },
          ),
        );
      } else {
        content = Container(
          margin: const EdgeInsets.only(bottom: 20),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              for (final (i, _) in generatedChoices.indexed)
                Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 50),
                  child: GeniusRoundedSquareButton(
                    size: 80,
                    radius: 1000,
                    style: selectedAnwserIndex == i && confirmed && !isGoodAnswer
                        ? GeniusButtonStyle.error
                        : confirmed && generatedChoices[i] == correctAnswer
                            ? GeniusButtonStyle.success
                            : selectedAnwserIndex == i
                                ? GeniusButtonStyle.dark
                                : GeniusButtonStyle.greyLight,
                    onTap: () {
                      if (!confirmed) {
                        onSelected?.call(generatedChoices[i]);
                        selectedAnwserIndexState.value = i;
                        playAudio(generatedChoices[i].content);
                      }
                    },
                    child: AutoSizeText('${(i + 1)}',
                        style: const TextStyle(
                            fontFamily: 'OpenSans',
                            fontSize: 20,
                            fontWeight: FontWeight.w400,
                            color: Color(0xFF6F6666))),
                  ),
                ),
            ],
          ),
        );
      }
    }
    return Column(
      children: [
        Expanded(
            child: Padding(
          padding: const EdgeInsets.all(10.0),
          child: content,
        )),
        if ( !confirmed)
          SizedBox(
            width: 420,
            child: GeniusButton(
              expanded: true,
              padding: EdgeInsets.symmetric(vertical: S.x3, horizontal: S.x(20)),
              style:
                  selectedAnwserIndex != null ? GeniusButtonStyle.dark : GeniusButtonStyle.disable,
              onPressed: () {
                if (selectedAnwserIndex == null) return;
                confirmedState.value = true;
                onConfirmedExercice(isGoodAnswer);
              },
              child: Text(confirmText ?? "Next"),
            ),
          ),
        if (confirmed)
          SizedBox(
            width: 420,
            child: GeniusButton(
              expanded: true,
              padding: EdgeInsets.symmetric(vertical: S.x3, horizontal: S.x(20)),
              style: GeniusButtonStyle.dark,
              onPressed: () {
                selectedAnwserIndexState.value = null;
                confirmedState.value = false;
                onFinishedExercice(
                  ExerciceResult(
                    success: isGoodAnswer,
                    userInput: generatedChoices[selectedAnwserIndex!],
                    correctAnswer: correctAnswer,
                  ),
                );
              },
              child: Text(nextText ?? "Next"),
            ),
          ),
      ],
    );
  }
}
---
Path: /lib/pages/exercices/exercice_widgets/reading_widget.dart

import 'package:auto_size_text/auto_size_text.dart';
import 'package:flutter/material.dart';
import 'package:twins/components/static_decoration.dart';
import 'package:twins/models/api/exercise_request.dart';
import 'package:twins/models/results/exercice_result.dart';
import 'package:twins/pages/exercices/exercice_widgets/multiple_choice.dart';
import 'package:twins/style/values.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
class ReadingWidget extends HookConsumerWidget {
  const ReadingWidget({
    required this.exercice,
    required this.onFinishedExercice,
    required this.onConfirmedExercice,
    Key? key,
  }) : super(key: key);
  final ReadingData exercice;
  final Function(List<ExerciceResult?> result) onFinishedExercice;
  final Function(bool) onConfirmedExercice;
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final ScrollController scrollController = ScrollController();
    void finishedExercice(ExerciceResult? result) {
      onFinishedExercice([result]);
    }
    return Padding(
      padding: EdgeInsets.symmetric(horizontal: S.x(18.5)),
      child: Column(
        mainAxisSize: MainAxisSize.max,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          AutoSizeText('リーディング',
              style: Theme.of(context)
                  .textTheme
                  .titleLarge
                  ?.copyWith(fontSize: 22, color: C.GENIUS_GREY_DARK)),
          height20,
          Expanded(
            flex: 2,
            child: Container(
              padding: const EdgeInsets.all(10),
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(25.0),
                border: Border.all(color: const Color(0xFFDDDBDB), width: 1.5),
              ),
              child: RawScrollbar(
                thumbVisibility: true,
                controller: scrollController,
                child: SingleChildScrollView(
                  controller: scrollController,
                  child: Text(exercice.text),
                ),
              ),
            ),
          ),
          height15,
          AutoSizeText('Where will the concert be on July 21?',
              style: GoogleFonts.openSans(
                  fontWeight: FontWeight.w600, fontSize: 18, color: C.GENIUS_GREY_DARK)),
          height20,
          Expanded(
            flex: 4,
            child: Center(
              child: MultipleChoice(
                lined: true,
                correctAnswer: exercice.concept,
                choices: exercice.choices,
                onFinishedExercice: finishedExercice,
                onConfirmedExercice: onConfirmedExercice,
                confirmText: '送信する',
              ),
            ),
          ),
        ],
      ),
    );
  }
}
---
Path: /lib/pages/exercices/exercice_widgets/word_reordering_widget.dart

import 'package:auto_size_text/auto_size_text.dart';
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/components/static_decoration.dart';
import 'package:twins/models/api/exercise_request.dart';
import 'package:twins/models/api/lesson_request.dart';
import 'package:twins/models/results/exercice_result.dart';
import 'package:twins/providers/tts_provider.dart';
import 'package:twins/services/audio_player_service.dart';
import 'package:twins/style/genius_button_style.dart';
import 'package:twins/style/values.dart';
import 'package:twins/utilities/custom_split.dart';
import 'package:twins/widgets/core/genius_button.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
class WordReorderingWidget extends HookConsumerWidget {
  const WordReorderingWidget({
    required this.exercice,
    required this.onFinishedExercice,
    required this.onConfirmedExercice,
    Key? key,
  }) : super(key: key);
  final WordReorderingData exercice;
  final Function(List<ExerciceResult?> result) onFinishedExercice;
  final Function(bool) onConfirmedExercice;
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final elemetsState = useState<List<WordElement>>([]);
    final elements = elemetsState.value;
    final choicesState = useState<List<TranslatedConcept>>(exercice.choices);
    final choices = choicesState.value;
    final hasConfirmedState = useState(false);
    final hasConfirmed = hasConfirmedState.value;
    final canConfirm = elements.where((element) => element.type == WordElementType.EMPTY).isEmpty;
    final tts = ref.watch(ttsNotifierProvider(AudioPlayerType.EXERCISE).notifier);
    void checkConfirm() {
      if (canConfirm) {
        String result = elements.map((e) => e.concept.content).join();
        bool success = result == exercice.goodSentence;
        onConfirmedExercice(success);
        tts.playAudio(exercice.goodSentence, 'currentCharacterId');
        hasConfirmedState.value = true;
      }
    }
    void finishedExercice(ExerciceResult? result) {
      onFinishedExercice([result]);
    }
    void finishExercice() {
      String res = elements.map((e) => e.concept.content).join();
      finishedExercice(
        ExerciceResult(
          success: res == exercice.goodSentence,
          correctAnswer: TranslatedConcept(content: exercice.goodSentence),
          userInput: TranslatedConcept(content: res),
        ),
      );
    }
    useEffect(() {
      List<String> parts = customSplit(exercice.sentence);
      WidgetsBinding.instance.addPostFrameCallback((_) {
        elemetsState.value = parts.map((e) {
          if (e == '\$w') {
            return WordElement(TranslatedConcept(content: e), WordElementType.EMPTY);
          } else {
            return WordElement(TranslatedConcept(content: e), WordElementType.STATIC);
          }
        }).toList();
      });
      return null;
    }, []);
    void playAudio(String text) async {
      String characterId = 'currentCharacterId';
      await tts.playAudio(text, characterId);
    }
    return Padding(
      padding: EdgeInsets.symmetric(horizontal: S.x(18.5)),
      child: Column(
        mainAxisSize: MainAxisSize.max,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text('日本文付き短文の語句整序',
              style: Theme.of(context)
                  .textTheme
                  .titleLarge
                  ?.copyWith(fontSize: 25, fontWeight: FontWeight.w700, color: C.GENIUS_BLACK)),
          customHeight(50),
          customHeight(20),
          Expanded(
            flex: 2,
            child: Text.rich(
              TextSpan(
                children: [
                  for (final e in elements) ...[
                    if (e.type == WordElementType.STATIC)
                      TextSpan(
                          text: e.concept.content,
                          style: const TextStyle(
                              fontFamily: 'Poppins',
                              fontSize: 22,
                              fontWeight: FontWeight.w400,
                              color: Color(0xFF565656))),
                    if (e.type == WordElementType.EMPTY)
                      WidgetSpan(
                        alignment: PlaceholderAlignment.middle,
                        child: Container(
                          margin: const EdgeInsets.only(top: 5),
                          width: S.x(40),
                          height: S.x(10),
                          padding: const EdgeInsets.symmetric(horizontal: 20),
                          child: const Card(
                            color: Color(0xFFF9FAFC),
                          ),
                        ),
                      ),
                    if (e.type == WordElementType.FILLED)
                      WidgetSpan(
                        alignment: PlaceholderAlignment.middle,
                        child: Container(
                          margin: const EdgeInsets.only(top: 5),
                          width: S.x(40),
                          height: S.x(10),
                          padding: const EdgeInsets.symmetric(horizontal: 20),
                          child: GeniusButton(
                              expanded: true,
                              style: GeniusButtonStyle.greyLight,
                              onPressed: () {
                                bool replaced = false;
                                elemetsState.value = [
                                  ...elemetsState.value.map((el) {
                                    if (!replaced &&
                                        e.type == WordElementType.FILLED &&
                                        e.concept == el.concept) {
                                      replaced = true;
                                      return WordElement(e.concept, WordElementType.EMPTY);
                                    } else {
                                      return el;
                                    }
                                  }).toList()
                                ];
                                choicesState.value = [...choices, e.concept];
                              },
                              child: AutoSizeText(e.concept.content,
                                  style: const TextStyle(
                                      fontFamily: 'Poppins',
                                      fontSize: 33,
                                      fontWeight: FontWeight.w400,
                                      color: Color(0xFF565656)))),
                        ),
                      )
                  ]
                ],
              ),
            ),
          ),
          Expanded(
            flex: 1,
            child: Row(
              children: [
                for (final c in choices) ...[
                  Container(
                    width: S.x(40),
                    height: S.x(12),
                    padding: const EdgeInsets.symmetric(horizontal: 20),
                    child: GeniusButton(
                      expanded: true,
                      style: GeniusButtonStyle.greyLight,
                      onPressed: () {
                        playAudio(c.content);
                        choicesState.value = [
                          ...choicesState.value.where((element) => element != c)
                        ];
                        bool replaced = false;
                        elemetsState.value = [
                          ...elemetsState.value.map((e) {
                            if (e.type == WordElementType.EMPTY && !replaced) {
                              replaced = true;
                              return WordElement(c, WordElementType.FILLED);
                            } else {
                              return e;
                            }
                          }).toList()
                        ];
                      },
                      child: AutoSizeText(c.content),
                    ),
                  )
                ]
              ],
            ),
          ),
          const Spacer(),
          if ( !hasConfirmed)
            Center(
              child: GeniusButton(
                style: canConfirm ? GeniusButtonStyle.dark : GeniusButtonStyle.disable,
                onPressed: () {
                  if (!canConfirm) return;
                  checkConfirm();
                },
                padding: const EdgeInsets.symmetric(vertical: S.x2, horizontal: 100),
                child: const AutoSizeText("次へ"),
              ),
            ),
          if (hasConfirmed)
            Center(
              child: GeniusButton(
                style: GeniusButtonStyle.dark,
                onPressed: () {
                  finishExercice();
                },
                padding: const EdgeInsets.symmetric(vertical: S.x2, horizontal: 100),
                child: const AutoSizeText("Next"),
              ),
            ),
          height20,
        ],
      ),
    );
  }
}
---
Path: /lib/pages/exercices/exercice_widgets/explanation_widget.dart

import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/features/profile/presentation/providers/profile_provider.dart';
import 'package:twins/models/api/exercise_request.dart';
import 'package:twins/models/api/lesson_request.dart';
import 'package:twins/models/results/exercice_result.dart';
import 'package:twins/style/genius_button_style.dart';
import 'package:twins/style/values.dart';
import 'package:twins/widgets/core/genius_button.dart';
import 'package:twins/widgets/core/genius_rounded_square_button.dart';
import 'package:twins/widgets/rive/image_or_rive.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:gap/gap.dart';
class ExplanationWidget extends HookConsumerWidget {
  const ExplanationWidget({
    required this.lesson,
    required this.exercice,
    required this.onFinishedExercice,
    required this.onConfirmedExercice,
    required this.onClose,
    Key? key,
  }) : super(key: key);
  final LessonData lesson;
  final ExplanationData exercice;
  final Function(List<ExerciceResult?> result, {bool progress}) onFinishedExercice;
  final Function(bool) onConfirmedExercice;
  final VoidCallback onClose;
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final userCharacter = ref.watch(userProfileOrNullProvider)?.character;
    final hasReadAllState = useState(false);
    final hasReadAll = hasReadAllState.value;
    final usedCharacter = userCharacter ?? 'assets/rive/character.riv';
    void finishedExercice() {
      onFinishedExercice([], progress: false);
    }
    void next() {
      finishedExercice();
    }
    return Stack(
      clipBehavior: Clip.none,
      fit: StackFit.expand,
      children: [
        const ImageOrRive(
          'assets/rive/dots-launch.riv',
          stateMachine: 'State Machine 1',
          fit: BoxFit.cover,
          alignment: Alignment.topLeft,
        ),
        Positioned(
          top: 100, 
          left: 0,
          right: 0,
          bottom: 0,
          child: Align(
            child: SizedBox(
              height: 500,
              child: ImageOrRive(
                usedCharacter,
                stateMachine: 'State Machine 1',
                triggers: ['Idle'],
                currentTrigger: null,
              ),
            ),
          ),
        ),
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 20.0),
          child: Column(
            mainAxisSize: MainAxisSize.max,
            children: [
              Stack(
                children: [
                  SizedBox(
                    width: double.infinity,
                    child: Column(
                      children: [
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          crossAxisAlignment: CrossAxisAlignment.center,
                          children: [
                            GeniusRoundedSquareButton(
                              radius: 100,
                              onTap: onClose,
                              style: GeniusButtonStyle.transparent,
                              child: const Padding(
                                padding: EdgeInsets.only(left: 3.0),
                                child: Icon(
                                  Icons.close,
                                  size: 50,
                                ),
                              ),
                            ),
                            Row(
                              children: [
                                Container(
                                  padding: const EdgeInsets.symmetric(vertical: 4, horizontal: 12),
                                  width: 200,
                                  decoration: BoxDecoration(
                                    color: const Color(0xFFBB78DA),
                                    borderRadius: BorderRadius.circular(100),
                                  ),
                                  child: const Center(
                                    child: Text(
                                      "Eiken 5",
                                      style: TextStyle(
                                          color: Colors.white,
                                          fontSize: 20,
                                          fontWeight: FontWeight.w700),
                                    ),
                                  ),
                                ),
                                const Gap(16),
                                Container(
                                  padding: const EdgeInsets.symmetric(vertical: 4, horizontal: 12),
                                  width: 200,
                                  decoration: BoxDecoration(
                                    color: const Color(0xFFFFCD7F),
                                    borderRadius: BorderRadius.circular(100),
                                  ),
                                  child: const Center(
                                    child: Text(
                                      "7 words",
                                      style: TextStyle(
                                          color: Colors.white,
                                          fontSize: 20,
                                          fontWeight: FontWeight.w700),
                                    ),
                                  ),
                                ),
                              ],
                            ),
                            Align(
                              alignment: Alignment.topRight,
                              child: TextButton(
                                onPressed: finishedExercice,
                                child: Padding(
                                  padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 12),
                                  child: Text(
                                    "Skip",
                                    style: Theme.of(context)
                                        .textTheme
                                        .bodyLarge
                                        ?.copyWith(color: C.GENIUS_GREY_DARK),
                                  ),
                                ),
                              ),
                            ),
                          ],
                        ),
                        const Gap(S.x2),
                        Center(
                          child: Text(
                            lesson.title,
                            style: Theme.of(context)
                                .textTheme
                                .titleLarge
                                ?.copyWith(fontSize: 70, fontWeight: FontWeight.w700),
                          ),
                        ),
                        Center(
                          child: Text(
                            lesson.description,
                            style: Theme.of(context).textTheme.titleLarge?.copyWith(
                                  fontSize: 30,
                                  color: const Color(0xFF776C6C),
                                ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
              const Gap(S.x2),
              const Spacer(),
              SizedBox(
                width: 400,
                child: GeniusButton(
                  expanded: true,
                  style: GeniusButtonStyle.dark,
                  onPressed: () {
                    next();
                  },
                  child: Text("Next"),
                ),
              ),
            ],
          ),
        ),
        TextBubble(
            texts: exercice.texts,
            onFinished: () {
              hasReadAllState.value = true;
            }),
      ],
    );
  }
}
class TextBubble extends HookWidget {
  final List<TranslatedConcept> texts;
  final Function? onFinished;
  const TextBubble({required this.texts, this.onFinished});
  @override
  Widget build(BuildContext context) {
    final index = useState<int>(0);
    final canGoNext = index.value < texts.length - 1;
    final canGoPrev = index.value > 0;
    void next() {
      if (index.value == texts.length - 2) {
        onFinished?.call();
      }
      if (index.value < texts.length - 1) {
        index.value++;
      }
    }
    void prev() {
      if (index.value > 0) {
        index.value--;
      }
    }
    return Positioned(
      right: 10,
      bottom: MediaQuery.of(context).size.height * 0.55, 
      child: Stack(
        children: [
          Positioned(
            child: ConstrainedBox(
              constraints: BoxConstraints(
                maxWidth: MediaQuery.of(context).size.width * 0.4,
              ),
              child: Column(
                children: [
                  Container(
                    padding: const EdgeInsets.all(16) + const EdgeInsets.only(bottom: 10),
                    decoration: BoxDecoration(
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black.withOpacity(0.3),
                          spreadRadius: 1,
                          blurRadius: 5,
                          offset: const Offset(0, 2), 
                        ),
                      ],
                      color: Colors.grey[100],
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Align(
                      alignment: Alignment.bottomLeft, 
                      child: Text(
                        texts[index.value].content,
                        style: const TextStyle(color: Colors.black),
                      ),
                    ),
                  ),
                  Container(
                    height: 15,
                  )
                ],
              ),
            ),
          ),
          Positioned(
            right: 0,
            left: 0,
            bottom: 0, 
            child: Row(
              mainAxisSize: MainAxisSize.max,
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                GeniusRoundedSquareButton(
                  radius: 100,
                  size: 30,
                  onTap: prev,
                  style: canGoPrev ? GeniusButtonStyle.dark : GeniusButtonStyle.greyLight,
                  child: const Padding(
                    padding: EdgeInsets.only(left: 7.0),
                    child: Icon(
                      Icons.arrow_back_ios,
                      size: 18,
                    ),
                  ),
                ),
                const Gap(50),
                GeniusRoundedSquareButton(
                  radius: 100,
                  size: 30,
                  onTap: next,
                  style: canGoNext ? GeniusButtonStyle.dark : GeniusButtonStyle.greyLight,
                  child: const Padding(
                    padding: EdgeInsets.only(left: 3.0),
                    child: Icon(
                      Icons.arrow_forward_ios,
                      size: 18,
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}
---
Path: /lib/pages/exercices/exercice_widgets/vocabulary_dialog.dart

import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/mixins/widget.dart';
import 'package:twins/models/api/lesson_request.dart';
import 'package:twins/style/values.dart';
class VocabularyDialog extends HookWidget with DialogWidget {
  final List<TranslatedConcept> notUsedConcepts;
  final List<TranslatedConcept> usedConcepts;
  VocabularyDialog({
    required this.notUsedConcepts,
    required this.usedConcepts,
  });
  @override
  Widget build(BuildContext context) {
    return SizedBox(
      height: 300,
      child: Column(
        children: [
          Stack(
            children: [
              Align(
                alignment: Alignment.center,
                child: Padding(
                  padding: const EdgeInsets.only(top: S.x3),
                  child: Text("Vocabulary".toUpperCase(),
                      style: Theme.of(context).textTheme.titleMedium),
                ),
              ),
              Align(
                alignment: Alignment.centerRight,
                child: IconButton(
                  icon: Icon(Icons.close_sharp, color: Colors.grey.shade600, size: 40),
                  onPressed: () => dismiss(),
                ),
              ),
            ],
          ),
          Expanded(
            child: SingleChildScrollView(
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  for (var concept in notUsedConcepts)
                    ListTile(
                      title: Text(concept.translation ?? concept.content),
                    ),
                  for (var concept in usedConcepts)
                    ListTile(
                      title: Text(
                        concept.translation ?? concept.content,
                        style: TextStyle(
                          color: Colors.grey.shade600,
                          decoration: TextDecoration.lineThrough,
                        ),
                      ),
                    ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
}
---
Path: /lib/pages/exercices/exercice_widgets/card_content.dart

import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/models/api/lesson_request.dart';
import 'package:twins/widgets/rive/image_or_rive.dart';
class FrontCardContent extends HookWidget {
  final TranslatedConcept concept;
  final void Function()? onTap;
  const FrontCardContent({
    Key? key,
    required this.concept,
    this.onTap,
  }) : super(key: key);
  @override
  Widget build(BuildContext context) {
    return Card(
      elevation: 1,
      child: ClipRRect(
        borderRadius: BorderRadius.circular(16),
        child: Stack(
          fit: StackFit.expand,
          children: [
            if (concept.image != null)
              ImageOrRive(
                concept.image!,
                fit: BoxFit.cover,
                stateMachine: 'State Machine 1',
              ),
            Align(
              alignment: Alignment.bottomCenter,
              child: Container(
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    begin: Alignment.topCenter,
                    end: Alignment.bottomCenter,
                    colors: [
                      Colors.black.withOpacity(0.0),
                      Colors.black.withOpacity(0.5),
                    ],
                  ),
                ),
                width: double.infinity,
                height: 70,
                child: Center(
                  child: Center(
                    child: Text(concept.translation ?? concept.content,
                        style: Theme.of(context).textTheme.titleLarge!.copyWith(
                              color: Colors.white,
                            )),
                  ),
                ),
              ),
            ),
            if (onTap != null)
              Positioned.fill(
                child: Material(
                  color: Colors.transparent,
                  child: InkWell(
                    onTap: onTap,
                  ),
                ),
              ),
          ],
        ),
      ),
    );
  }
}
class BackCardContent extends HookWidget {
  final TranslatedConcept concept;
  final void Function()? onTap;
  const BackCardContent({
    Key? key,
    required this.concept,
    this.onTap,
  }) : super(key: key);
  @override
  Widget build(BuildContext context) {
    return Card(
      elevation: 1,
      child: ClipRRect(
        borderRadius: BorderRadius.circular(16),
        child: Material(
          child: InkWell(
            onTap: onTap,
            child: SizedBox(
              width: double.infinity,
              child: Padding(
                padding: const EdgeInsets.all(8.0),
                child: Center(
                    child: Text(
                  concept.content,
                  style: Theme.of(context).textTheme.titleLarge,
                )),
              ),
            ),
          ),
        ),
      ),
    );
  }
}
---
Path: /lib/pages/learn_pages/module_page.dart

import 'package:auto_size_text/auto_size_text.dart';
import 'package:flutter/material.dart';
import 'package:twins/components/app_asset.dart';
import 'package:twins/components/static_decoration.dart';
import 'package:twins/mixins/widget.dart';
import 'package:twins/models/api/module_request.dart';
import 'package:twins/pages/learn_pages/widgets/lessons_widget.dart';
import 'package:twins/pages/onboarding/widget/score_indicator_widget.dart';
import 'package:twins/providers/genius_result_provider.dart';
import 'package:twins/style/values.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:twins/widgets/toggle/toggle_global_sound.dart';
class ModulePage extends HookConsumerWidget with PageWidget {
  final GeniusModule module;
  const ModulePage({required this.module});
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final moduleProgress =
        ref.watch(moduleProgressProvider(level: 'EIKEN5', module: module.key, moduleData: module));
    bool moduleDone = moduleProgress >= 1;
    return Scaffold(
      body: Container(
        decoration: const BoxDecoration(
            image: DecorationImage(
                image: AssetImage('assets/tablet/module_background.png'), fit: BoxFit.fill)),
        child: Column(
          children: [
            _buildHeader(context),
            Expanded(
                child: _buildContent(
                    module: module,
                    takeQuiz: moduleDone
                        ? () async {
                          }
                        : null)),
          ],
        ),
      ),
    );
  }
  Widget _buildHeader(BuildContext context) {
    return Container(
      padding: const EdgeInsets.fromLTRB(44, 80, 44, 44),
      alignment: Alignment.topCenter,
      child: Stack(
        alignment: Alignment.center,
        children: [
          Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              height20,
              AutoSizeText(
                module.title, 
                textAlign: TextAlign.center,
                style: const TextStyle(
                  color: Colors.white,
                  fontSize: 53,
                  fontFamily: 'Poppins',
                  fontWeight: FontWeight.w800,
                ),
              ),
              AutoSizeText(
                module.description == module.title ? 'Begin your trip' : module.description,
                textAlign: TextAlign.center,
                style: const TextStyle(
                  color: Colors.white,
                  fontSize: 40,
                  fontFamily: 'Poppins',
                  fontWeight: FontWeight.w600,
                ),
              ),
            ],
          ),
          Positioned(
            top: 0,
            left: 0,
            child: IconButton(
              onPressed: () => Navigator.pop(context),
              icon: Container(
                height: 70,
                width: 70,
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(70),
                  border: Border.all(color: C.GENIUS_GREY),
                  color: Colors.white,
                ),
                padding: const EdgeInsets.all(20),
                child: Image.asset(
                  AppAsset.arrowBack,
                  fit: BoxFit.scaleDown,
                ),
              ),
            ),
          ),
          Positioned(
            top: 0,
            right: 0,
            child: Container(
              decoration: const BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadiusDirectional.only(
                  bottomEnd: Radius.circular(16),
                  bottomStart: Radius.circular(16),
                  topStart: Radius.circular(16),
                ),
              ),
              padding: const EdgeInsets.all(12),
              child: Row(
                children: [
                  Image.asset('assets/tablet/art.png', height: 30, fit: BoxFit.fitHeight),
                  const SizedBox(width: 8),
                  const Text(
                    'Eiken 5',
                    style: TextStyle(
                      color: Color(0xFF52555B),
                      fontSize: 15,
                      fontFamily: 'Poppins',
                      fontWeight: FontWeight.w700,
                      height: 0,
                    ),
                  ),
                ],
              ),
            ),
          ),
          const Positioned(
            bottom: 0,
            right: 0,
            child: Row(
              mainAxisAlignment: MainAxisAlignment.end,
              children: [
                ToggleGlobalSound(),
              ],
            ),
          ),
        ],
      ),
    );
  }
}
Widget _buildContent({required GeniusModule module, Function()? takeQuiz}) {
  double moduleListeningScore = 45 / 100;
  double moduleReadingScore = 12 / 100;
  return Container(
      decoration: const BoxDecoration(
        color: Colors.white,
        borderRadius:
            BorderRadius.only(topLeft: Radius.circular(44), topRight: Radius.circular(44)),
      ),
      margin: const EdgeInsets.symmetric(horizontal: 44),
      padding: const EdgeInsets.fromLTRB(30, 30, 30, 0),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.start,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Expanded(flex: 9, child: _buildMyLesson(module)),
          const SizedBox(width: 30),
          Expanded(
            flex: 4,
            child: Container(
              padding: const EdgeInsets.fromLTRB(20, 20, 20, 0),
              decoration: const BoxDecoration(
                color: Color(0xFFF9FAFF),
                borderRadius:
                    BorderRadius.only(topLeft: Radius.circular(40), topRight: Radius.circular(40)),
              ),
              child: SingleChildScrollView(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.spaceAround,
                  children: [
                    buildModuleMyScore(
                      listeningScore: (moduleListeningScore * 100).toInt(),
                      readingScore: (moduleReadingScore * 100).toInt(),
                    ),
                    const SizedBox(height: 60),
                    _buildProgressQuiz(onTakeQuiz: takeQuiz),
                    const SizedBox(height: 40),
                  ],
                ),
              ),
            ),
          ),
        ],
      ));
}
Widget _buildMyLesson(GeniusModule module) {
  return Column(
    crossAxisAlignment: CrossAxisAlignment.stretch,
    mainAxisSize: MainAxisSize.min,
    children: [
      const AutoSizeText(
        'My Lessons',
        style: TextStyle(
          color: Colors.black,
          fontSize: 30,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
      ),
      Expanded(
        child: Container(
          padding: EdgeInsets.symmetric(horizontal: S.x(5), vertical: S.x2),
          decoration: const BoxDecoration(
            borderRadius: BorderRadius.only(
              topLeft: Radius.circular(50),
              topRight: Radius.circular(50),
            ),
            color: C.GENIUS_WHITE,
          ),
          child: SingleChildScrollView(
            physics: const AlwaysScrollableScrollPhysics(),
            child: Lessons(
              lessons: module.lessons,
              moduleKey: module.key,
            ),
          ),
        ),
      )
    ],
  );
}
Widget buildModuleMyScore({required int listeningScore, required int readingScore}) {
  return Container(
    decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(20),
        color: Colors.white,
        boxShadow: [
          const BoxShadow(color: Color.fromRGBO(108, 94, 94, 0.25), spreadRadius: 1, blurRadius: 4)
        ]),
    padding: const EdgeInsets.fromLTRB(15, 10, 30, 30),
    child: Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
      const AutoSizeText('My Score',
          style: TextStyle(
              fontFamily: 'Poppins',
              fontWeight: FontWeight.w700,
              fontSize: 22,
              color: Color(0xFF324168)),
          textAlign: TextAlign.left),
      customHeight(40),
      ScoreIndicatorWidget(
        title: 'Listening',
        scoreValue: listeningScore,
        processColor: const Color(0xFFBFA0FF),
      ),
      height15,
      ScoreIndicatorWidget(
        title: 'Reading',
        scoreValue: readingScore,
        processColor: C.GENIUS_PRIMARY,
      ),
    ]),
  );
}
Widget _buildProgressQuiz({Function()? onTakeQuiz}) {
  const textStyle = TextStyle(
    fontFamily: 'Poppins',
    color: Color(0xFF324168),
    fontSize: 18,
    fontWeight: FontWeight.w500,
  );
  return Container(
    decoration: ShapeDecoration(
      color: Colors.white,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(20),
      ),
      shadows: const [
        BoxShadow(
          color: Color(0x3F6C5E5E),
          blurRadius: 6,
          offset: Offset(0, 2),
          spreadRadius: 0,
        )
      ],
    ),
    padding: const EdgeInsets.symmetric(horizontal: 15, vertical: 10),
    child: Column(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      mainAxisAlignment: MainAxisAlignment.spaceAround,
      children: [
        Row(
          children: [
            AutoSizeText(
              'Progress Quiz',
              style: textStyle.copyWith(
                fontSize: 20,
                fontWeight: FontWeight.w700,
              ),
            ),
            Image.asset('assets/tablet/robot_ai.png', width: 50, height: 50, fit: BoxFit.fill),
          ],
        ),
        const SizedBox(height: 30),
        Image.asset(
            onTakeQuiz == null ? 'assets/tablet/progress_quiz.png' : 'assets/icons/quiz-icon.png',
            height: 150),
        const SizedBox(height: 15),
        AutoSizeText(
          onTakeQuiz == null
              ? 'Unlock the test after completing all\nlessons in this module!'
              : 'The quiz is unlocked! Get started and test your skills!',
          textAlign: TextAlign.center,
          style: textStyle,
        ),
        const SizedBox(height: 15),
        Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            InkWell(
              onTap: onTakeQuiz,
              child: Container(
                decoration: ShapeDecoration(
                  color: onTakeQuiz != null ? C.GENIUS_PRIMARY : C.GENIUS_GREY,
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(10),
                  ),
                ),
                alignment: Alignment.center,
                padding: const EdgeInsets.symmetric(horizontal: 15, vertical: 10),
                child: AutoSizeText(
                  'Take the quiz',
                  style: textStyle.copyWith(color: Colors.white),
                ),
              ),
            ),
          ],
        ),
        height15,
      ],
    ),
  );
}
---
Path: /lib/pages/learn_pages/modules_page.dart

import 'package:auto_size_text/auto_size_text.dart';
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/models/api/module_request.dart';
import 'package:twins/notifiers/modules_notifier.dart';
import 'package:twins/pages/learn_pages/module_page.dart';
import 'package:twins/pages/learn_pages/widgets/module_card.dart';
import 'package:twins/services/like_genius_service.dart';
import 'package:twins/widgets/dialogs/like_dialog.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
class ModulesPage extends HookConsumerWidget {
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final displayLikeGenius = ref.watch(likeGeniusServiceProvider);
    useEffect(() {
      if (displayLikeGenius == true) {
        Future.delayed(const Duration(seconds: 0), () async {
          await LikeDialog().show();
        });
      }
      return null;
    }, [displayLikeGenius]);
    List<Widget> generatePlaceholders({int n = 3}) {
      return [
        for (var i = 0; i < n; i++) ...[
          const ModuleCard(
            module: GeniusModule(
                id: '',
                key: '',
                title: '',
                description: '',
                image: null,
                level: '',
                isPro: false,
                lessons: []),
            isPlaceholder: true,
          ),
        ] 
      ];
    }
    var modules = ref.watch(modulesNotifierProvider);
    return GridView.count(
      shrinkWrap: true,
      primary: false,
      physics: const NeverScrollableScrollPhysics(),
      crossAxisCount: 3,
      mainAxisSpacing: 20,
      crossAxisSpacing: 20,
      childAspectRatio: 3 / 4,
      padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 5),
      children: [
        ...modules.map(
          data: (data) {
            return [
              ...data.value
                  .expand((module) => [
                        Consumer(
                          builder: (context, ref, child) {
                            return InkWell(
                              onTap: () async {
                                await ModulePage(
                                  module: module,
                                ).show();
                              },
                              child: ModuleCard(module: module),
                            );
                          },
                        ),
                      ])
                  .toList(),
            ];
          },
          error: (err) => [
            SizedBox(
              height: 150,
              width: double.infinity,
              child: Padding(
                padding: const EdgeInsets.all(8.0),
                child: Column(
                  children: [
                    Icon(
                      Icons.public_off_rounded,
                      size: 40,
                      color: Colors.grey.shade400,
                    ),
                    const SizedBox(height: 10),
                    const AutoSizeText(
                      'Something went wrong. Please retry later.',
                      textAlign: TextAlign.center,
                    ),
                    AutoSizeText(err.error.toString()),
                  ],
                ),
              ),
            ),
          ],
          loading: (d) => generatePlaceholders(),
        ),
      ],
    );
  }
}
---
Path: /lib/pages/learn_pages/widgets/section_item.dart

import 'package:auto_size_text/auto_size_text.dart';
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/components/app_asset.dart';
import 'package:twins/models/api/section_request.dart';
import 'package:twins/style/values.dart';
enum SectionItemStatus {
  Done,
  Locked,
  None,
}
String _getSectionImageByType(SectionType type) {
  switch (type) {
    case SectionType.VOCABULARY:
      return AppAsset.flashcardIcon;
    case SectionType.LISTENING:
      return AppAsset.listeningIcon;
    case SectionType.SCRIPTED_CONVERSATION:
      return AppAsset.chatIcon;
    case SectionType.GRAMMAR:
      return AppAsset.eclipseStar;
  }
}
String _getSectionTextByType(SectionType type) {
  switch (type) {
    case SectionType.VOCABULARY:
      return 'Vocabulary';
    case SectionType.LISTENING:
      return 'Listening';
    case SectionType.SCRIPTED_CONVERSATION:
      return 'Assisted conversation';
    case SectionType.GRAMMAR:
      return 'Grammar';
  }
}
Color _getSectionBadgeColorByStatus(SectionItemStatus status) {
  switch (status) {
    case SectionItemStatus.Done:
      return const Color(0xFF90F4BC);
    case SectionItemStatus.Locked:
      return Colors.white;
    case SectionItemStatus.None:
      return Colors.grey.shade300;
  }
}
Color _getSectionIconColorByStatus(SectionItemStatus status) {
  switch (status) {
    case SectionItemStatus.Done:
      return Colors.white;
    case SectionItemStatus.Locked:
      return C.GENIUS_GREY;
    case SectionItemStatus.None:
      return Colors.white;
  }
}
IconData? _getIconByStatus(SectionItemStatus status) {
  switch (status) {
    case SectionItemStatus.Done:
      return Icons.done_rounded;
    case SectionItemStatus.Locked:
      return Icons.lock_rounded;
    case SectionItemStatus.None:
      return null;
  }
}
class SectionItem extends HookWidget {
  final SectionType type;
  final SectionItemStatus status;
  final int minutes;
  final void Function()? onTap;
  const SectionItem(
      {Key? key,
      required this.type,
      required this.status,
      required this.minutes,
      required this.onTap})
      : super(key: key);
  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      behavior: HitTestBehavior.translucent,
      onTap: () {
        if (status == SectionItemStatus.Locked) return;
        onTap?.call();
      },
      child: Container(
        width: double.infinity,
        margin: const EdgeInsets.only(bottom: 2),
        padding: EdgeInsets.only(right: S.x(3)),
        child: Row(
          mainAxisSize: MainAxisSize.max,
          children: [
            Container(
              decoration: ShapeDecoration(
                  shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(15),
                      side: const BorderSide(color: C.GENIUS_GREY, width: 0.8))),
              padding: const EdgeInsets.all(20),
              child: Image.asset(_getSectionImageByType(type),
                  height: 50,
                  width: 50,
                  fit: BoxFit.fill,
                  color: status == SectionItemStatus.Locked ? C.GENIUS_GREY : null),
            ),
            SizedBox(width: S.x(4)),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  RichText(
                    text: TextSpan(children: [
                      TextSpan(
                          text: _getSectionTextByType(type),
                          style: Theme.of(context).textTheme.titleSmall!.copyWith(
                              color: Colors.black, fontSize: 20, fontWeight: FontWeight.w700)),
                      if (status == SectionItemStatus.Done)
                        WidgetSpan(
                          alignment: PlaceholderAlignment.bottom,
                          child: Padding(
                            padding: const EdgeInsets.symmetric(horizontal: 5),
                            child: Image.asset('assets/icons/star_active.png',
                                height: 20, width: 20, fit: BoxFit.fill),
                          ),
                        ),
                    ]),
                  ),
                  AutoSizeText(
                    '$minutes mins',
                    style: const TextStyle(fontWeight: FontWeight.w600, fontSize: 16),
                  )
                ],
              ),
            ),
            Container(
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(20),
                border: Border.all(color: C.GENIUS_GREY),
                color: _getSectionBadgeColorByStatus(status),
              ),
              padding: const EdgeInsets.all(10),
              child: _getIconByStatus(status) != null
                  ? Icon(
                      _getIconByStatus(status),
                      color: _getSectionIconColorByStatus(status),
                      size: 20,
                    )
                  : const SizedBox(height: 20, width: 20),
            ),
          ],
        ),
      ),
    );
  }
}
---
Path: /lib/pages/learn_pages/widgets/lessons_widget.dart

import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/models/api/lesson_request.dart';
import 'package:twins/pages/learn_pages/widgets/lesson_widget.dart';
class Lessons extends HookWidget {
  final String moduleKey;
  final List<LessonData> lessons;
  const Lessons({Key? key, required this.lessons, required this.moduleKey}) : super(key: key);
  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        for (int i = 0; i < lessons.length; i++) ...[
          LessonWidget(
            moduleKey: moduleKey,
            lesson: lessons[i],
            index: (i + 1).toString().padLeft(2, '0'), 
          ),
        ],
      ],
    );
  }
}
---
Path: /lib/pages/learn_pages/widgets/module_info_card.dart

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/models/api/module_request.dart';
import 'package:twins/style/values.dart';
class ModuleInfoCard extends HookWidget {
  final GeniusModule module;
  const ModuleInfoCard({required this.module});
  @override
  Widget build(BuildContext context) {
    return Card(
      color: const Color(0xFFE8EFFA),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(16),
      ),
      child: SizedBox(
        width: double.infinity,
        height: 230,
        child: Stack(
          clipBehavior: Clip.hardEdge,
          children: [
            Positioned.fill(
              child: Padding(
                padding: EdgeInsets.only(top: S.x(5), left: S.x(3), right: 8.0),
                child: Row(
                  crossAxisAlignment: CrossAxisAlignment.end,
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  mainAxisSize: MainAxisSize.max,
                  children: [
                    Expanded(
                      child: Align(
                        alignment: Alignment.topLeft,
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              'Get up speed with our first module!',
                              style: Theme.of(context).textTheme.titleMedium,
                            ),
                            SizedBox(height: S.x(5)),
                            Text(
                              'Learn how to introduce yourself',
                              style: Theme.of(context)
                                  .textTheme
                                  .bodySmall!
                                  .copyWith(color: Colors.grey.shade900),
                            ),
                          ],
                        ),
                      ),
                    ),
                    SizedBox(width: S.x(5)),
                    Image.asset(
                      'assets/lessons/module-info.png',
                      height: 180,
                    ),
                  ],
                ),
              ),
            ),
            Positioned(
              bottom: 0,
              left: 0,
              right: 0,
              child: ClipRRect(
                borderRadius: BorderRadius.circular(16),
                child: BackdropFilter(
                  filter: ImageFilter.blur(sigmaX: 15, sigmaY: 15),
                  child: Container(
                    padding:
                        EdgeInsets.only(right: S.x(5), left: S.x(2), top: S.x(2), bottom: S.x(1)),
                    color: const Color(0xFFD1C4C4).withOpacity(0.2), 
                    child: DefaultTextStyle(
                      style: Theme.of(context).textTheme.bodySmall!.copyWith(color: Colors.black),
                      child: Row(
                        crossAxisAlignment: CrossAxisAlignment.center,
                        mainAxisSize: MainAxisSize.max,
                        children: [
                          const Icon(Icons.timer_outlined),
                          SizedBox(width: S.x(1)),
                          const Text('3 hours'),
                          SizedBox(width: S.x(1)),
                          const Icon(Icons.book_outlined),
                          SizedBox(width: S.x(1)),
                          const Text('TODO 1 words'),
                          const Spacer(),
                          Chip(
                            label: Text(
                              'Eiken 5',
                              style: Theme.of(context)
                                  .textTheme
                                  .bodySmall!
                                  .copyWith(color: Colors.black, fontWeight: FontWeight.bold),
                            ),
                          )
                        ],
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
---
Path: /lib/pages/learn_pages/widgets/next_lesson_card.dart

import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/style/values.dart';
class NextLessonCard extends HookWidget {
  @override
  Widget build(BuildContext context) {
    const Radius cardRadius = Radius.circular(16);
    const BorderRadius cardBorderRadius = BorderRadius.all(cardRadius);
    return Stack(
      clipBehavior: Clip.none,
      children: [
        Card(
          shape: const RoundedRectangleBorder(
            borderRadius: cardBorderRadius,
          ),
          margin: EdgeInsets.zero,
          elevation: 0,
          child: SizedBox(
            width: double.infinity,
            height: 180,
            child: ClipRRect(
              borderRadius: cardBorderRadius,
              child: Stack(
                children: [
                  Container(
                    color: const Color(0xFFE8EFFA),
                  ),
                  Column(
                    children: [
                      Expanded(
                        flex: 3,
                        child: Container(), 
                      ),
                      Expanded(
                        flex: 2,
                        child: Container(
                          decoration: BoxDecoration(
                            color: const Color(0xFFFDFDFF),
                            borderRadius: const BorderRadius.only(
                              bottomLeft: cardRadius,
                              bottomRight: cardRadius,
                            ),
                            border: Border.all(
                              color: const Color(0xFFE5E5E5),
                              width: 1,
                            ),
                          ),
                          width: double.infinity,
                          child: Padding(
                            padding: const EdgeInsets.all(10),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text('Lesson 2', style: Theme.of(context).textTheme.titleMedium),
                                Text('Basics of Office Work',
                                    style: Theme.of(context).textTheme.bodyMedium),
                              ],
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ),
        ),
        Positioned(
          bottom: 73,
          right: 5,
          child: Image.asset(
            'assets/lessons/next-lesson.png',
            width: 210,
          ),
        ),
        Positioned(
          bottom: 38,
          right: 40,
          child: FloatingActionButton(
            elevation: 0,
            shape: ShapeBorder.lerp(
              RoundedRectangleBorder(borderRadius: BorderRadius.circular(50)),
              const CircleBorder(),
              1,
            ),
            onPressed: () {},
            backgroundColor: C.GENIUS_PRIMARY,
            child: const Icon(
              Icons.play_arrow_rounded,
              color: C.GENIUS_WHITE,
              size: 40,
            ),
          ),
        ),
      ],
    );
  }
}
---
Path: /lib/pages/learn_pages/widgets/lesson_widget.dart

import 'package:auto_size_text/auto_size_text.dart';
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/components/app_asset.dart';
import 'package:twins/components/static_decoration.dart';
import 'package:twins/models/api/lesson_request.dart';
import 'package:twins/models/results/section_result.dart';
import 'package:twins/pages/exercices/completion_page.dart';
import 'package:twins/pages/exercices/exercises_page.dart';
import 'package:twins/pages/learn_pages/widgets/section_item.dart';
import 'package:twins/providers/genius_result_provider.dart';
import 'package:twins/style/values.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:percent_indicator/linear_percent_indicator.dart';
class LessonWidget extends HookConsumerWidget {
  final String moduleKey;
  final LessonData lesson;
  final String index;
  const LessonWidget({required this.lesson, required this.moduleKey, required this.index});
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final expandedState = useState(false);
    final expanded = expandedState.value;
    final lessonResult = ref.watch(lessonResultProvider(
      level: 'EIKEN5',
      module: moduleKey,
      lesson: lesson.key,
    ));
    final sectionDoneCount = lessonResult == null ? 0 : lessonResult.sections.length;
    final lessonProgress = ref.watch(lessonProgressProvider(
        level: 'EIKEN5', module: moduleKey, lesson: lesson.key, lessonData: lesson));
    AnimationController animationController =
        useAnimationController(duration: const Duration(seconds: 3), initialValue: 1);
    animationController.repeat(reverse: true, period: const Duration(seconds: 4));
    return Column(
      children: [
        Container(
          padding: const EdgeInsets.only(top: 8.0, bottom: 15, left: 10, right: 20),
          width: double.infinity,
          decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(15),
              border: Border.all(color: const Color(0xFFE7E7E7)),
              color: const Color(0xFFF9FAFF)),
          child: InkWell(
            onTap: () {
              expandedState.value = !expandedState.value;
              if (expandedState.value == true) {
                WidgetsBinding.instance.addPostFrameCallback((_) {
                  Future.delayed(const Duration(milliseconds: 200), () {
                    Scrollable.ensureVisible(
                      alignmentPolicy: ScrollPositionAlignmentPolicy.keepVisibleAtEnd,
                      context,
                      duration: const Duration(milliseconds: 200),
                      curve: Curves.easeInOut,
                    );
                  });
                });
              }
            },
            child: Column(
              children: [
                Row(
                  mainAxisSize: MainAxisSize.max,
                  children: [
                    Container(
                        constraints: const BoxConstraints(
                          maxHeight: 120,
                        ),
                        decoration: BoxDecoration(
                          color: Colors.grey,
                          borderRadius: BorderRadius.circular(30),
                        ),
                        clipBehavior: Clip.hardEdge,
                        child: Image.asset(lesson.image ?? 'assets/tablet/lesson1_avt.png')),
                    SizedBox(width: S.x(6)),
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        RichText(
                          text: TextSpan(
                            children: [
                              TextSpan(
                                text: lesson.title,
                                style: Theme.of(context).textTheme.titleLarge,
                              ),
                              for (final ind in lesson.sections.indexed)
                                WidgetSpan(
                                  alignment: PlaceholderAlignment.middle,
                                  child: Container(
                                    margin: const EdgeInsets.only(bottom: 5, left: 5),
                                    height: 25,
                                    width: 25,
                                    child: Image.asset(
                                        ind.$1 >= sectionDoneCount
                                            ? 'assets/icons/star_inactive.png'
                                            : 'assets/icons/star_active.png',
                                        height: 20,
                                        width: 20,
                                        fit: BoxFit.cover),
                                  ),
                                ),
                            ],
                          ),
                        ),
                        SizedBox(height: S.x(2)),
                        AutoSizeText(lesson.description,
                            style: Theme.of(context).textTheme.bodyMedium),
                        SizedBox(height: S.x(3)),
                        SizedBox(
                            width: MediaQuery.of(context).size.width / 5,
                            child: LinearPercentIndicator(
                              padding: const EdgeInsets.symmetric(horizontal: 10),
                              lineHeight: 15,
                              barRadius: const Radius.circular(20),
                              percent: lessonProgress, 
                              animation: true,
                              animationDuration: 1000,
                              curve: Curves.easeOutCubic,
                              animateFromLastPercent: true,
                              backgroundColor: C.GENIUS_GREY,
                              linearGradient: const LinearGradient(
                                  colors: [Color(0xFF689BFB), Color(0xFF68CAF4)], stops: [0.25, 1]),
                            )),
                      ],
                    ),
                    const Spacer(),
                    Column(
                      children: [
                        Container(
                          decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(20),
                            color: C.GENIUS_PRIMARY,
                          ),
                          padding: const EdgeInsets.symmetric(vertical: 5, horizontal: 15),
                          child: const Text('25 words',
                              style: TextStyle(
                                  color: Colors.white, fontWeight: FontWeight.w700, fontSize: 10)),
                        ),
                        height20,
                        CircleAvatar(
                          backgroundColor: Colors.white,
                          maxRadius: 20,
                          child: Image.asset(AppAsset.arrowDropdown,
                              height: 15,
                              fit: BoxFit.cover,
                              color: expandedState.value ? C.GENIUS_GREY : C.GENIUS_PRIMARY),
                        ),
                      ],
                    ),
                  ],
                ),
              ],
            ),
          ),
        ),
        const SizedBox(
          height: 10,
        ),
        Padding(
          padding: const EdgeInsets.only(left: 120),
          child: AnimatedCrossFade(
            firstChild: Container(),
            secondChild: Column(children: [
              for (final (index, section) in lesson.sections.indexed) ...[
                SectionItem(
                  type: section.type,
                  status: index > sectionDoneCount
                      ? SectionItemStatus.Locked
                      : index == sectionDoneCount
                          ? SectionItemStatus.None
                          : SectionItemStatus.Done,
                  minutes: section.minutes ?? 5,
                  onTap: () async {
                    SectionResult? result = await ExercisesPage(
                      section: section,
                      lesson: lesson,
                    ).show();
                    if (result != null) {
                      await CompletionPage(
                        result: result,
                        moduleKey: moduleKey,
                        lessonKey: lesson.key,
                        sectionKey: section.type.name,
                      ).show();
                    }
                  },
                ),
                if (index < lesson.sections.length - 1)
                  const Divider(thickness: 1, color: C.GENIUS_GREY)
              ],
            ]),
            crossFadeState: expanded ? CrossFadeState.showSecond : CrossFadeState.showFirst,
            duration: const Duration(milliseconds: 200),
          ),
        ),
        height20,
      ],
    );
  }
}
---
Path: /lib/pages/learn_pages/widgets/module_card.dart

import 'dart:math';
import 'package:auto_size_text/auto_size_text.dart';
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/models/api/module_request.dart';
import 'package:twins/providers/genius_result_provider.dart';
import 'package:twins/style/values.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
class _ModuleCardBase extends HookWidget {
  final void Function()? onTap;
  final Widget title;
  final Widget subtitle;
  final String? image;
  final Widget progress;
  final Widget info;
  final bool isStarted;
  final bool isPlaceholder;
  const _ModuleCardBase({
    Key? key,
    this.onTap,
    required this.isPlaceholder,
    required this.title,
    required this.subtitle,
    this.image,
    required this.progress,
    required this.info,
    required this.isStarted,
  }) : super(key: key);
  @override
  Widget build(BuildContext context) {
    const textStyle = TextStyle(
        fontFamily: 'Poppins', fontSize: 20, fontWeight: FontWeight.w500, color: Color(0xFF0F0F0F));
    return Container(
      decoration:
          BoxDecoration(color: const Color(0xFFF9FAFF), borderRadius: BorderRadius.circular(20)),
      padding: const EdgeInsets.all(8.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Stack(
            alignment: Alignment.center,
            children: [
              ClipRRect(
                borderRadius: BorderRadius.circular(20),
                child: Image.asset('assets/tablet/module${1 + Random().nextInt(100) % 3}_bg.png',
                    fit: BoxFit.cover),
              ),
              Image.asset(image ?? 'assets/tablet/rocket.png', width: 100, fit: BoxFit.fitWidth),
              Positioned(
                top: 5,
                right: 10,
                child: FilledButton.tonal(
                  style: ButtonStyle(
                      backgroundColor:
                          MaterialStateColor.resolveWith((states) => const Color(0xFFF6F5FB)),
                      padding: MaterialStateProperty.resolveWith(
                          (states) => const EdgeInsets.symmetric(horizontal: 10, vertical: 5))),
                  child: AutoSizeText('Eiken 5', style: textStyle.copyWith(fontSize: 13.3)),
                  onPressed: () => {},
                ),
              )
            ],
          ),
          title,
          subtitle,
          InkWell(
            onTap: onTap,
            child: Container(
              decoration: BoxDecoration(
                  color: isStarted ? Colors.blue : Colors.grey[300],
                  borderRadius: BorderRadius.circular(15)),
              padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),
              child: AutoSizeText(isStarted ? 'Continue' : 'Not Started',
                  style: textStyle.copyWith(fontSize: 16, color: Colors.white)),
            ),
          ),
        ],
      ),
    );
  }
}
class GeniusPlaceholder extends HookWidget {
  final double? height;
  final double? width;
  const GeniusPlaceholder({
    Key? key,
    this.height,
    this.width,
  }) : super(key: key);
  @override
  Widget build(BuildContext context) {
    return Container(
      width: width,
      height: height,
      decoration: BoxDecoration(
        color: Colors.grey[300],
        borderRadius: BorderRadius.circular(4.0),
      ),
    );
  }
}
class ModuleCard extends HookConsumerWidget {
  final void Function()? onTap;
  final GeniusModule module;
  final bool isPlaceholder;
  const ModuleCard({
    Key? key,
    this.onTap,
    required this.module,
    this.isPlaceholder = false,
  }) : super(key: key);
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final moduleResult = ref.watch(moduleResultProvider(
      level: 'EIKEN5',
      module: module.key,
    ));
    final moduleProgress =
        ref.watch(moduleProgressProvider(level: 'EIKEN5', module: module.key, moduleData: module));
    const textStyle = TextStyle(
      fontFamily: 'Poppins',
      fontSize: 18.6,
      fontWeight: FontWeight.w500,
      color: C.GENIUS_BLACK,
    );
    return _ModuleCardBase(
      onTap: onTap,
      isPlaceholder: isPlaceholder,
      title: isPlaceholder
          ? const Column(
              children: [
                SizedBox(height: 8),
                GeniusPlaceholder(width: 120, height: 18),
              ],
            )
          : AutoSizeText(module.title, style: textStyle),
      subtitle: isPlaceholder
          ? const Column(
              children: [
                SizedBox(height: 10),
                GeniusPlaceholder(width: 120, height: 10),
                SizedBox(height: 3),
              ],
            )
          : AutoSizeText(module.description,
              style: textStyle.copyWith(fontSize: 16, color: const Color(0xFFB9ADAD)),
              overflow: TextOverflow.ellipsis),
      image: module.image,
      progress: ClipRRect(
        borderRadius: BorderRadius.circular(50),
        child: isPlaceholder
            ? const GeniusPlaceholder(width: 120, height: 18)
            : LinearProgressIndicator(
                backgroundColor: const Color(0xFFDEE1E8),
                value: moduleProgress,
              ),
      ),
      info: isPlaceholder
          ? const Column(
              children: [
                SizedBox(height: 8),
                GeniusPlaceholder(width: 80, height: 10),
              ],
            )
          : Container(
              padding: const EdgeInsets.symmetric(horizontal: 15, vertical: 2),
              decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(15.0),
                  color: C.GENIUS_YELLOW.withOpacity(0.3)),
              child: Text(
                '${module.lessons.length} lessons',
                style: Theme.of(context).textTheme.bodySmall!.copyWith(
                      color: C.GENIUS_ORANGE.withOpacity(0.6),
                      fontWeight: FontWeight.bold,
                    ),
              ),
            ),
      isStarted: moduleResult != null,
    );
  }
}
---
Path: /lib/models/user_model.dart

import 'package:freezed_annotation/freezed_annotation.dart';
part 'user_model.freezed.dart';
part 'user_model.g.dart';
@freezed
class UserProfile with _$UserProfile {
  const UserProfile._();
  const factory UserProfile({
    required String? id,
    required String? name,
    required String? level,
    required String? role,
    required String? character,
    required bool registered,
  }) = _UserProfile;
  factory UserProfile.fromJson(Map<String, Object?> json) => _$UserProfileFromJson(json);
  static UserProfile nullify(UserProfile userProfile) {
    return UserProfile(
      id: userProfile.id,
      name: null,
      level: null,
      role: userProfile.role,
      character: null,
      registered: false,
    );
  }
}
@freezed
class UserState with _$UserState {
  const UserState._();
  const factory UserState.loading() = UserStateLoading;
  const factory UserState.success(UserProfile userProfile) = UserStateSuccess;
  const factory UserState.error(String message) = UserStateError;
  bool get completed {
    return map(
        loading: (_) => false,
        error: (_) => false,
        success: (userState) {
          return userState.userProfile.level != null &&
              userState.userProfile.name != null &&
              userState.userProfile.level!.isNotEmpty &&
              userState.userProfile.name!.isNotEmpty &&
              userState.userProfile.character != null &&
              userState.userProfile.character!.isNotEmpty &&
              userState.userProfile.registered;
        });
  }
}
---
Path: /lib/models/user_capability.dart

import 'package:freezed_annotation/freezed_annotation.dart';
part 'user_capability.freezed.dart';
@freezed
class UserCapabilityState with _$UserCapabilityState {
  const factory UserCapabilityState.initial() = _Initial;
  const factory UserCapabilityState.limitReached() = _LimitReached;
  const factory UserCapabilityState.can() = _Can;
}
---
Path: /lib/models/speech_to_text_model.dart

import 'package:freezed_annotation/freezed_annotation.dart';
part 'speech_to_text_model.freezed.dart';
enum SpeechToTextStatus {
  stopped,
  listening,
  failure,
}
@freezed
class SpeechToTextState with _$SpeechToTextState {
  const SpeechToTextState._();
  const factory SpeechToTextState({
    required bool hasAccess,
    required SpeechToTextStatus status,
    required String? error,
  }) = _SpeechToTextState;
}
---
Path: /lib/models/mcq_exercise_model.dart

import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:twins/models/api/lesson_request.dart';
part 'mcq_exercise_model.freezed.dart';
@freezed
class MCQExerciseData with _$MCQExerciseData {
  const MCQExerciseData._();
  const factory MCQExerciseData(
    TranslatedConcept answer,
    List<TranslatedConcept> concepts,
  ) = _MCQExerciseData;
  factory MCQExerciseData.createMCQExerciseData({
    required TranslatedConcept correctAnswer,
    required List<TranslatedConcept> options,
    bool shuffle = true,
    int nbOptions = 4,
    bool answerIsInOptions = false,
  }) {
    final wrongChoices = List<TranslatedConcept>.from(options);
    if (shuffle) {
      wrongChoices.shuffle();
    }
    int numberOfNonAddedChoices = answerIsInOptions ? 0 : 1;
    List<TranslatedConcept> choices = wrongChoices
      ..length = options.length > nbOptions - numberOfNonAddedChoices
          ? nbOptions - numberOfNonAddedChoices
          : options.length;
    if (!answerIsInOptions) {
      choices.add(correctAnswer);
    }
    if (shuffle) {
      choices.shuffle();
    }
    return MCQExerciseData(correctAnswer, choices);
  }
}
---
Path: /lib/models/notification_panel_model.dart

import 'package:flutter/material.dart';
import 'package:freezed_annotation/freezed_annotation.dart';
part 'notification_panel_model.freezed.dart';
enum NotificationPanelType {
  info,
  success,
  warning,
  error,
}
@freezed
class NotificationPanelData with _$NotificationPanelData {
  const NotificationPanelData._();
  const factory NotificationPanelData({
    required String id,
    required NotificationPanelType notificationType,
    required Widget child,
  }) = _NotificationPanelData;
}
---
Path: /lib/models/exercice_reward.dart

import 'package:freezed_annotation/freezed_annotation.dart';
part 'exercice_reward.freezed.dart';
part 'exercice_reward.g.dart';
@freezed
class ExerciceReward with _$ExerciceReward {
  const ExerciceReward._();
  const factory ExerciceReward({
    required String image,
    required int coins,
    required String sentence,
  }) = _ExerciceReward;
  factory ExerciceReward.fromJson(Map<String, Object?> json) => _$ExerciceRewardFromJson(json);
}
---
Path: /lib/models/setting_model.dart

import 'package:freezed_annotation/freezed_annotation.dart';
part 'setting_model.g.dart';
part 'setting_model.freezed.dart';
@freezed
class Setting with _$Setting {
  const Setting._();
  factory Setting({
    @Default(true) bool globalSoundEnabled,
    @Default(true) bool sfxEnabled,
    @Default(true) bool hapticEnabled,
  }) = _Setting;
  factory Setting.fromJson(Map<String, Object?> json) => _$SettingFromJson(json);
}
---
Path: /lib/models/results/genius_result.dart

import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:twins/models/results/level_result.dart';
part 'genius_result.freezed.dart';
part 'genius_result.g.dart';
@freezed
class GeniusResult with _$GeniusResult {
  const GeniusResult._();
  const factory GeniusResult({
    required Map<String, LevelResult> levels,
  }) = _GeniusResult;
  factory GeniusResult.fromJson(Map<String, Object?> json) => _$GeniusResultFromJson(json);
}
---
Path: /lib/models/results/lesson_result.dart

import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:twins/models/results/section_result.dart';
part 'lesson_result.freezed.dart';
part 'lesson_result.g.dart';
@freezed
class LessonResult with _$LessonResult {
  const LessonResult._();
  const factory LessonResult({
    required double? score,
    required Map<String, SectionResult> sections,
  }) = _LessonResult;
  factory LessonResult.fromJson(Map<String, Object?> json) => _$LessonResultFromJson(json);
}
---
Path: /lib/models/results/level_result.dart

import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:twins/models/results/module_result.dart';
part 'level_result.freezed.dart';
part 'level_result.g.dart';
@freezed
class LevelResult with _$LevelResult {
  const LevelResult._();
  const factory LevelResult({
    required double? score,
    required Map<String, ModuleResult> modules,
  }) = _LevelResult;
  factory LevelResult.fromJson(Map<String, Object?> json) => _$LevelResultFromJson(json);
}
---
Path: /lib/models/results/exercice_result.dart

import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:twins/models/api/lesson_request.dart';
part 'exercice_result.freezed.dart';
part 'exercice_result.g.dart';
@freezed
class ExerciceResult with _$ExerciceResult {
  const ExerciceResult._();
  const factory ExerciceResult({
    required bool success,
    required TranslatedConcept? userInput,
    required TranslatedConcept correctAnswer,
  }) = _ExerciceResult;
  factory ExerciceResult.fromJson(Map<String, Object?> json) => _$ExerciceResultFromJson(json);
}
---
Path: /lib/models/results/section_result.dart

import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:twins/models/results/exercice_result.dart';
part 'section_result.freezed.dart';
part 'section_result.g.dart';
@freezed
class SectionResult with _$SectionResult {
  const SectionResult._();
  const factory SectionResult({
    required double score,
    required List<ExerciceResult> exercices,
  }) = _SectionResult;
  factory SectionResult.fromJson(Map<String, Object?> json) => _$SectionResultFromJson(json);
}
---
Path: /lib/models/results/module_result.dart

import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:twins/models/results/lesson_result.dart';
part 'module_result.freezed.dart';
part 'module_result.g.dart';
@freezed
class ModuleResult with _$ModuleResult {
  const ModuleResult._();
  const factory ModuleResult({
    required double? score,
    required Map<String, LessonResult> lessons,
  }) = _ModuleResult;
  factory ModuleResult.fromJson(Map<String, Object?> json) => _$ModuleResultFromJson(json);
}
---
Path: /lib/models/api/practice_request.dart

---
Path: /lib/models/api/section_request.dart

import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:twins/models/api/exercise_request.dart';
part 'section_request.freezed.dart';
part 'section_request.g.dart';
enum SectionType { VOCABULARY, LISTENING, SCRIPTED_CONVERSATION, GRAMMAR }
@freezed
class SectionData with _$SectionData {
  const SectionData._();
  const factory SectionData({
    required String id,
    required SectionType type,
    required String? background,
    required String? character,
    required int? minutes,
    required List<ExerciseData> exercises,
  }) = _SectionData;
  factory SectionData.fromJson(Map<String, Object?> json) => _$SectionDataFromJson(json);
  int get totalExercisesCount =>
      exercises.fold(0, (previousValue, exercice) => previousValue + exercice.exerciseCount);
  List<String> get neededFiles {
    final files = <String>[];
    if (background != null) {
      files.add(background!);
    }
    for (final exercice in exercises) {
      files.addAll(exercice.neededFiles);
    }
    return files;
  }
}
---
Path: /lib/models/api/module_request.dart

import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:twins/models/api/lesson_request.dart';
part 'module_request.freezed.dart';
part 'module_request.g.dart';
@freezed
class GeniusModule with _$GeniusModule {
  const GeniusModule._();
  const factory GeniusModule({
    required String id,
    required String key,
    required String title,
    required String description,
    required String? image,
    required String level,
    required bool isPro,
    bool? isStarted,
    required List<LessonData> lessons,
  }) = _GeniusModule;
  factory GeniusModule.fromJson(Map<String, Object?> json) => _$GeniusModuleFromJson(json);
}
@freezed
class ModulesState with _$ModulesState {
  const ModulesState._();
  const factory ModulesState.initial() = Initial;
  const factory ModulesState.loading() = Loading;
  const factory ModulesState.success(List<GeniusModule> modules) = Success;
  const factory ModulesState.failure(String message) = Failure;
}
---
Path: /lib/models/api/chat_request.dart

import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:twins/models/api/lesson_request.dart';
part 'chat_request.freezed.dart';
part 'chat_request.g.dart';
enum ChatMessageType {
  message,
  error,
  exerciceError,
}
enum ChatSenderType {
  user,
  assistant,
}
@freezed
class ChatExchange with _$ChatExchange {
  const ChatExchange._();
  const factory ChatExchange({
    required ChatSenderType role,
    required TranslatedConcept concept,
    required ChatMessageType type,
    @Default(false) bool displayTranslation,
  }) = _ChatExchange;
  factory ChatExchange.fromJson(Map<String, Object?> json) => _$ChatExchangeFromJson(json);
  String get Display {
    if (displayTranslation) {
      return concept.translation ?? concept.content;
    }
    return concept.content;
  }
}
@freezed
class ChatResponse with _$ChatResponse {
  const ChatResponse._();
  const factory ChatResponse({
    required List<ChatExchange> replies,
    required String emotion,
  }) = _ChatResponse;
  factory ChatResponse.fromJson(Map<String, Object?> json) => _$ChatResponseFromJson(json);
}
@freezed
class ChatRequestData with _$ChatRequestData {
  const ChatRequestData._();
  const factory ChatRequestData({
    required String characterInfoId,
    required List<ChatExchange> dialogue,
  }) = _ChatRequestData;
  factory ChatRequestData.fromJson(Map<String, Object?> json) => _$ChatRequestDataFromJson(json);
}
@freezed
class ChatRequestState with _$ChatRequestState {
  const ChatRequestState._();
  const factory ChatRequestState.initial() = _Initial;
  const factory ChatRequestState.loading() = _Loading;
  const factory ChatRequestState.success(ChatResponse chat) = _Success;
  const factory ChatRequestState.failure(String message) = _Failure;
}
---
Path: /lib/models/api/exercise_request.dart

import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:twins/models/api/lesson_request.dart';
part 'exercise_request.freezed.dart';
part 'exercise_request.g.dart';
@freezed
class VocabularyAcquisitionData with _$VocabularyAcquisitionData {
  const VocabularyAcquisitionData._();
  const factory VocabularyAcquisitionData({
    required TranslatedConcept concept,
  }) = _VocabularyAcquisitionData;
  factory VocabularyAcquisitionData.fromJson(Map<String, Object?> json) =>
      _$VocabularyAcquisitionDataFromJson(json);
}
@freezed
class VocabularyPracticeData with _$VocabularyPracticeData {
  const VocabularyPracticeData._();
  const factory VocabularyPracticeData({
    required TranslatedConcept concept,
    required List<TranslatedConcept> choices,
  }) = _VocabularyPracticeData;
  factory VocabularyPracticeData.fromJson(Map<String, Object?> json) =>
      _$VocabularyPracticeDataFromJson(json);
}
@freezed
class WordReorderingData with _$WordReorderingData {
  const WordReorderingData._();
  const factory WordReorderingData({
    required String sentence,
    required String goodSentence,
    required List<TranslatedConcept> choices,
  }) = _WordReorderingData;
  factory WordReorderingData.fromJson(Map<String, Object?> json) =>
      _$WordReorderingDataFromJson(json);
}
@freezed
class WordCompletionData with _$WordCompletionData {
  const WordCompletionData._();
  const factory WordCompletionData({
    required String sentence,
    required TranslatedConcept concept,
    required List<TranslatedConcept> choices,
  }) = _WordCompletionData;
  factory WordCompletionData.fromJson(Map<String, Object?> json) =>
      _$WordCompletionDataFromJson(json);
}
@freezed
class ReadingData with _$ReadingData {
  const ReadingData._();
  const factory ReadingData({
    required String text,
    required TranslatedConcept concept,
    required List<TranslatedConcept> choices,
  }) = _ReadingData;
  factory ReadingData.fromJson(Map<String, Object?> json) => _$ReadingDataFromJson(json);
}
@freezed
class ListeningData with _$ListeningData {
  const ListeningData._();
  const factory ListeningData({
    required String audio,
    required String? image,
    required bool? displayWords,
    required TranslatedConcept concept,
    required List<TranslatedConcept> choices,
  }) = _ListeningData;
  factory ListeningData.fromJson(Map<String, Object?> json) => _$ListeningDataFromJson(json);
}
enum ChatExchangeDataDisplayType {
  USER_LANGUAGE,
  LEARNING_LANGUAGE,
}
enum ChatExchangeDataType {
  ASSISTANT,
  USER,
  INPUT,
}
@freezed
class ChatExchangeData with _$ChatExchangeData {
  const ChatExchangeData._();
  const factory ChatExchangeData({
    required String id,
    required ChatExchangeDataType type,
    required String? emotion,
    required TranslatedConcept concept,
    required List<TranslatedConcept> choices,
  }) = _ChatExchangeData;
  factory ChatExchangeData.fromJson(Map<String, Object?> json) => _$ChatExchangeDataFromJson(json);
}
@freezed
class ScriptedConversationData with _$ScriptedConversationData {
  const ScriptedConversationData._();
  const factory ScriptedConversationData({
    required List<ChatExchangeData> conversation,
  }) = _ScriptedConversationData;
  factory ScriptedConversationData.fromJson(Map<String, Object?> json) =>
      _$ScriptedConversationDataFromJson(json);
}
@freezed
class ExplanationData with _$ExplanationData {
  const ExplanationData._();
  const factory ExplanationData({
    required List<TranslatedConcept> texts,
  }) = _ExplanationData;
  factory ExplanationData.fromJson(Map<String, Object?> json) => _$ExplanationDataFromJson(json);
}
@Freezed(
    unionKey: 'type', fallbackUnion: 'unknown', unionValueCase: FreezedUnionCase.screamingSnake)
class ExerciseData with _$ExerciseData {
  const ExerciseData._();
  const factory ExerciseData.vocabularyAcquisition(
      VocabularyAcquisitionData vocabularyAcquisition) = VocabularyAcquisition;
  const factory ExerciseData.vocabularyPractice(VocabularyPracticeData vocabularyPractice) =
      VocabularyPractice;
  const factory ExerciseData.wordReordering(WordReorderingData wordReordering) = WordReordering;
  const factory ExerciseData.wordCompletion(WordCompletionData wordCompletion) = WordCompletion;
  const factory ExerciseData.reading(ReadingData reading) = Reading;
  const factory ExerciseData.listening(ListeningData listening) = Listening;
  const factory ExerciseData.scriptedConversation(ScriptedConversationData scriptedConversation) =
      ScriptedConversation;
  const factory ExerciseData.explanation(ExplanationData explanation) = Explanation;
  const factory ExerciseData.unknown({
    required String type,
  }) = Unknown;
  factory ExerciseData.fromJson(Map<String, Object?> json) => _$ExerciseDataFromJson(json);
  int get exerciseCount {
    return map(
      vocabularyAcquisition: (_) => 1,
      vocabularyPractice: (_) => 1,
      wordReordering: (_) => 1,
      wordCompletion: (_) => 1,
      reading: (_) => 1,
      listening: (_) => 1,
      scriptedConversation: (data) => data.scriptedConversation.conversation
          .where((element) => element.type == ChatExchangeDataType.INPUT)
          .length,
      explanation: (_) => 0,
      unknown: (_) => 1,
    );
  }
  List<String> get neededFiles {
    return map(
      vocabularyAcquisition: (ex) => ex.vocabularyAcquisition.concept.image == null
          ? []
          : [ex.vocabularyAcquisition.concept.image!],
      vocabularyPractice: (ex) =>
          ex.vocabularyPractice.concept.image == null ? [] : [ex.vocabularyPractice.concept.image!],
      wordReordering: (_) => [],
      wordCompletion: (_) => [],
      reading: (_) => [],
      listening: (ex) => ex.listening.image == null ? [] : [ex.listening.image!],
      scriptedConversation: (_) => [],
      explanation: (_) => [],
      unknown: (_) => [],
    );
  }
  bool get fullScreen {
    return map(
      vocabularyAcquisition: (_) => false,
      vocabularyPractice: (_) => false,
      wordReordering: (_) => false,
      wordCompletion: (_) => false,
      reading: (_) => false,
      listening: (_) => false,
      scriptedConversation: (_) => false,
      explanation: (_) => true,
      unknown: (_) => false,
    );
  }
}
---
Path: /lib/models/api/lesson_request.dart

import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:twins/models/api/section_request.dart';
part 'lesson_request.freezed.dart';
part 'lesson_request.g.dart';
@freezed
class Concept with _$Concept {
  const Concept._();
  const factory Concept({
    required String id,
    required String content,
    required String type,
  }) = _Concept;
  factory Concept.fromJson(Map<String, Object?> json) => _$ConceptFromJson(json);
}
@freezed
class TranslatedConcept with _$TranslatedConcept {
  const TranslatedConcept._();
  const factory TranslatedConcept({
    @Default('') String id,
    required String content,
    String? translation,
    String? image,
    @Default('Vocabulary') String type,
  }) = _TranslatedConcept;
  factory TranslatedConcept.fromJson(Map<String, Object?> json) =>
      _$TranslatedConceptFromJson(json);
}
@freezed
class LessonData with _$LessonData {
  const LessonData._();
  const factory LessonData({
    required String id,
    required String key,
    required String title,
    required String description,
    required String? image,
    required List<SectionData> sections,
  }) = _LessonData;
  factory LessonData.fromJson(Map<String, Object?> json) => _$LessonDataFromJson(json);
}
@freezed
class LessonsRequestState with _$LessonsRequestState {
  const LessonsRequestState._();
  const factory LessonsRequestState.initial() = _Initial;
  const factory LessonsRequestState.loading() = _Loading;
  const factory LessonsRequestState.success(List<LessonData> lessons) = _Success;
  const factory LessonsRequestState.failure(String message) = _Failure;
}
@freezed
class LessonsMessageCountState with _$LessonsMessageCountState {
  const LessonsMessageCountState._();
  const factory LessonsMessageCountState({
    required Map<String, int>? map,
  }) = _LessonsMessageCountState;
  factory LessonsMessageCountState.fromJson(Map<String, Object?> json) =>
      _$LessonsMessageCountStateFromJson(json);
  int getLessonMessageCountByKey(String key) {
    if (map == null) return 0;
    return map![key] ?? 0;
  }
}
---
Path: /lib/components/static_decoration.dart

import 'package:flutter/material.dart';
const EdgeInsets horizonatal20 = EdgeInsets.symmetric(horizontal: 20);
EdgeInsets customVerticalHorizontal20({double vertical = 0}) =>
    EdgeInsets.symmetric(horizontal: 20, vertical: vertical);
SizedBox customWidth(double width) => SizedBox(width: width);
const SizedBox width05 = SizedBox(width: 05);
const SizedBox width10 = SizedBox(width: 10);
const SizedBox width15 = SizedBox(width: 15);
SizedBox customHeight(double height) => SizedBox(height: height);
const SizedBox height05 = SizedBox(height: 05);
const SizedBox height10 = SizedBox(height: 10);
const SizedBox height15 = SizedBox(height: 15);
const SizedBox height20 = SizedBox(height: 20);
const SizedBox height16 = SizedBox(height: 16);
BorderRadius circularBorderRadius(double radius) => BorderRadius.circular(radius);
BorderRadius circular5BorderRadius = BorderRadius.circular(4);
BorderRadius circular8BorderRadius = BorderRadius.circular(8);
BorderRadius circular10BorderRadius = BorderRadius.circular(10);
BorderRadius circular15BorderRadius = BorderRadius.circular(15);
BorderRadius circular20BorderRadius = BorderRadius.circular(20);
BorderRadius circular24BorderRadius = BorderRadius.circular(24);
BorderRadius circular25BorderRadius = BorderRadius.circular(25);
BorderRadius circular30BorderRadius = BorderRadius.circular(30);
---
Path: /lib/components/app_asset.dart

import 'package:flutter/foundation.dart';
import 'package:twins/utilities/env.dart';
class AppAsset {
  AppAsset._();
  static const nointernet = 'assets/images/nointernet.png';
  static const bgimages = 'assets/images/BG.png';
  static const logo = 'assets/images/logo.png';
  static const neuronBackground = 'assets/images/neuron_background.png';
  static const characterOne = 'assets/images/character_one.png';
  static const profilCharacter = 'assets/images/profile_character.png';
  static const questionFrame = 'assets/images/question_frame.png';
  static const levelZero = 'assets/images/level_zero.png';
  static const levelOne = 'assets/images/level_one.png';
  static const levelTwo = 'assets/images/level_two.png';
  static const characterLogin = 'assets/images/character_login.png';
  static const arrowBack = 'assets/images/arrow_back.png';
  static const onboardBoy = 'assets/images/onboard_boy.png';
  static const onboardGirl = 'assets/images/onboard_girl.png';
  static const robotBottom = 'assets/images/robot_bottom.png';
  static const eclipseStar = 'assets/images/eclipse_star.png';
  static const geniusTeacher = 'assets/images/genius_teacher.png';
  static const characterIllustration = 'assets/images/character_illustration.png';
  static const airplaneLine = 'assets/images/airplane-line.png';
  static const arrowDropdown = 'assets/images/arrow_dropdown.png';
  static const iconDone = 'assets/images/icon_done.png';
  static const listeningIcon = 'assets/icons/listening-icon.png';
  static const chatIcon = 'assets/icons/chat-icon.png';
  static const flashcardIcon = 'assets/icons/flash-card-icon.png';
}
class AppConstants {
  AppConstants._();
  static const bool _isLocal = (kDebugMode || kProfileMode);
  static String get apiUrl {
    return _isLocal ? Env.apiUrl : 'https:
  }
}
---
Path: /lib/components/app_text_style.dart

import 'package:flutter/material.dart';
import 'colors.dart';
class AppTextStyle {
  AppTextStyle._();
  static const headerStyle = TextStyle(
    fontSize: 20,
    fontWeight: FontWeight.w600,
    color: primaryBlack,
  );
  static const normalSemiBold8 = TextStyle(
    fontSize: 8,
    fontWeight: FontWeight.w600,
    color: primaryBlack,
  );
  static const normalRegular10 = TextStyle(
    fontSize: 10,
    fontWeight: FontWeight.w500,
    color: primaryBlack,
  );
  static const normalSemiBold10 = TextStyle(
    fontSize: 10,
    fontWeight: FontWeight.w600,
    color: primaryBlack,
  );
  static const normalSemiBold11 = TextStyle(
    fontSize: 11,
    fontWeight: FontWeight.w600,
    color: primaryBlack,
  );
  static const normalBold10 = TextStyle(
    fontSize: 10,
    fontWeight: FontWeight.w700,
    color: primaryBlack,
  );
  static const normalBold12 = TextStyle(
    fontSize: 12,
    fontWeight: FontWeight.w700,
    color: primaryBlack,
  );
  static const normalRegular12 = TextStyle(
    fontSize: 12,
    fontWeight: FontWeight.w500,
    color: primaryBlack,
  );
  static const normalSemiBold12 = TextStyle(
    fontSize: 12,
    fontWeight: FontWeight.w600,
    color: primaryBlack,
  );
  static const normalRegular13 = TextStyle(
    fontSize: 13,
    fontWeight: FontWeight.w500,
    color: primaryBlack,
  );
  static const normalSemiBold13 = TextStyle(
    fontSize: 13,
    fontWeight: FontWeight.w600,
    color: primaryBlack,
  );
  static const regularBold = TextStyle(
    fontSize: 14,
    fontWeight: FontWeight.bold,
    color: primaryBlack,
  );
  static const normalRegular14 = TextStyle(
    fontSize: 14,
    fontWeight: FontWeight.w400,
    color: primaryBlack,
  );
  static const normalBold14 = TextStyle(
    fontSize: 14,
    fontWeight: FontWeight.w700,
    color: primaryBlack,
  );
  static const normalRegular15 = TextStyle(
    fontSize: 15,
    fontWeight: FontWeight.w400,
    color: primaryBlack,
  );
  static const normalRegular18 = TextStyle(
      fontSize: 18, fontWeight: FontWeight.w400, color: primaryBlack, fontFamily: "Cera Pro");
  static const italicRegular15 = TextStyle(
    fontSize: 15,
    fontWeight: FontWeight.w400,
    fontStyle: FontStyle.italic,
    color: primaryBlack,
  );
  static const normalSemiBold15 = TextStyle(
    fontSize: 15,
    fontWeight: FontWeight.w600,
    color: primaryBlack,
  );
  static const normalRegular16 = TextStyle(
    fontSize: 16,
    fontWeight: FontWeight.w500,
    color: primaryBlack,
  );
  static const normalSemiBold16 = TextStyle(
    fontSize: 16,
    fontWeight: FontWeight.w600,
    color: primaryBlack,
  );
  static const normalWhiteSemiBold16 = TextStyle(
    fontSize: 16,
    fontWeight: FontWeight.w600,
    color: primaryBlack,
  );
  static const normalBold16 = TextStyle(
    fontSize: 16,
    fontWeight: FontWeight.bold,
    color: primaryBlack,
  );
  static const normalSemiBold17 = TextStyle(
    fontSize: 17,
    fontWeight: FontWeight.w600,
    color: primaryBlack,
  );
  static const normalRegular17 = TextStyle(
    fontSize: 17,
    fontWeight: FontWeight.w400,
    color: primaryBlack,
  );
  static const normalSemiBold18 = TextStyle(
    fontSize: 18,
    fontWeight: FontWeight.w600,
    color: primaryBlack,
  );
  static const normalBold18 = TextStyle(
    fontSize: 18,
    fontWeight: FontWeight.w700,
    color: primaryBlack,
  );
  static const normalBold20 = TextStyle(
    fontSize: 20,
    fontWeight: FontWeight.w700,
    color: primaryBlack,
  );
  static const normalSemiBold20 = TextStyle(
    fontSize: 20,
    fontWeight: FontWeight.w600,
    color: primaryBlack,
  );
  static const normalSemiBold22 = TextStyle(
    fontSize: 22,
    fontWeight: FontWeight.w600,
    color: primaryBlack,
  );
  static const normalSemiBold26 = TextStyle(
    fontSize: 26,
    fontWeight: FontWeight.w600,
    color: primaryBlack,
  );
  static const normalBold26 = TextStyle(
    fontSize: 26,
    fontWeight: FontWeight.w700,
    color: primaryBlack,
  );
  static const normalBold28 = TextStyle(
    fontSize: 28,
    fontWeight: FontWeight.w700,
    color: primaryBlack,
  );
  static const normalBold32 = TextStyle(
    fontSize: 32,
    fontWeight: FontWeight.w700,
    color: primaryBlack,
  );
  static const normalBold50 = TextStyle(
    fontSize: 50,
    fontWeight: FontWeight.w700,
    color: primaryBlack,
  );
  static const normalBold24 = TextStyle(
    fontSize: 24,
    fontWeight: FontWeight.w700,
    color: primaryBlack,
  );
  static const normalSemiBold14 = TextStyle(
    fontSize: 14,
    fontWeight: FontWeight.w600,
    color: primaryBlack,
  );
  static const normalSemiBold30 = TextStyle(
    fontSize: 30,
    fontWeight: FontWeight.w600,
    color: primaryBlack,
  );
  static const normalRegular40 = TextStyle(
    fontSize: 40,
    fontWeight: FontWeight.w400,
    color: primaryBlack,
  );
  static const normalRegular44 = TextStyle(
    fontSize: 44,
    fontWeight: FontWeight.w400,
    color: primaryBlack,
  );
}
---
Path: /lib/components/colors.dart

import 'package:flutter/material.dart';
Map<String, Color> colorStyles = {
  'primary': Colors.blue,
  'ligth_font': Colors.black54,
  'gray': Colors.black45,
  'white': Colors.white
};
const Color lightBlackColor = Color(0xff1A1A1A);
const Color greyColor = Color(0xffC0C0C0);
const Color appBackgroundColor = Color(0xffF1F5FA);
const Color secondBackgroundColor = Color(0xffEEEEEE);
const Color textGreyColor = Color(0xffACB0B5);
const Color appColor = Color(0xff1A67FB);
const Color appBlackColor = Color(0xff1E1E1E);
const Color dividerColor = Color(0xff8D8DA2);
const Color containerBlackColor = Color(0xff1E252A);
const Color darkprimaryButtonColor = Color(0xffA88C40);
const Color secondaryButtonColor = Color(0xff5A5A5A);
const Color darKYellowGradientColor = Color(0xff8F5E25);
const Color lightYellowGradientColor = Color(0xffD7BD73);
const Color gradientLightColor = Color(0xff1E252B);
const Color gradientDarkColor = Color(0xff2A333B);
const Color textFieldColor = Color(0xff32393F);
const Color textFieldTitleColor = Color(0xffC0C0C0);
const Color textFieldBorderColor = Color(0xffE2E3E5);
const Color titleBlack = Color(0xff1E1E1E);
const Color barrierBlackColor = Color(0xff2C353D);
const Color startColor = Color(0xffD7D9DB);
const Color blurBackgroundColor = Color(0xff282829);
const Color yellowColor = Color(0xffFFC400);
const Color skyColor = Color(0xff63C7F5);
const Color whiteColor = Color(0xffffffff);
const Color redColor = Color(0xffFF3333);
const Color commongreycolor = Color(0xff6E757C);
const Color offWhite = Color(0xffF8F8F8);
const Color ongolingBackgroundBlack = Color(0xff282828);
const Color backgroundColor = Color(0xffF9F9F9);
const Color lightgreycolor = Color(0xffE9E9E9);
const Color backgroundGrey = Color(0xffEBE9E9);
const Color lightGrey = Color(0xffF4F4F5);
const Color hintGrey = Color(0xffBABABA);
const Color contentGrey = Color(0xff969498);
const Color regularGrey = Color(0xff7F7D89);
const Color darkGreyWhite = Color(0xffA1ACB6); 
const Color greenColor = Color(0xff19AA5C);
const Color lightRedColor = Color(0xffFF4A59);
const Color lightappColor = Color(0xffFFE7E7);
const Color red = Color(0xffB21807); 
const Color success = Color(0xff426d54); 
const Color infoDialog = Color(0xff79B3E4);
const Color blue = Color(0xff068AEC);
const Color yellow = Color(0xffFFCC00);
const Color borderGrey = Color(0xffDBDBDB);
const Color lightSilver = Color(0xffF7F7F7);
const Color darkSilver = Color(0xffE4E4E4);
const Color grey = Color(0xff999999);
const MaterialColor primaryBlack = MaterialColor(
  _blackPrimaryValue,
  <int, Color>{
    50: Color(0xFF000000),
    100: Color(0xFF000000),
    200: Color(0xFF000000),
    300: Color(0xFF000000),
    400: Color(0xFF000000),
    500: Color(_blackPrimaryValue),
    600: Color(0xFF000000),
    700: Color(0xFF000000),
    800: Color(0xFF000000),
    900: Color(0xFF000000),
  },
);
const int _blackPrimaryValue = 0xFF000000;
const MaterialColor primaryWhite = MaterialColor(
  _whitePrimaryValue,
  <int, Color>{
    50: Color(0xFFFFFFFF),
    100: Color(0xFFFFFFFF),
    200: Color(0xFFFFFFFF),
    300: Color(0xFFFFFFFF),
    400: Color(0xFFFFFFFF),
    500: Color(_whitePrimaryValue),
    600: Color(0xFFFFFFFF),
    700: Color(0xFFFFFFFF),
    800: Color(0xFFFFFFFF),
    900: Color(0xFFFFFFFF),
  },
);
const int _whitePrimaryValue = 0xFFFFFFFF;
const int _scaffoldValue = 0xFFFAFAFA;
const MaterialColor scaffoldColor = MaterialColor(
  _scaffoldValue,
  <int, Color>{
    50: Color(0xFFFAFAFA),
    100: Color(0xFFFAFAFA),
    200: Color(0xFFFAFAFA),
    300: Color(0xFFFAFAFA),
    400: Color(0xFFFAFAFA),
    500: Color(_whitePrimaryValue),
    600: Color(0xFFFAFAFA),
    700: Color(0xFFFAFAFA),
    800: Color(0xFFFAFAFA),
    900: Color(0xFFFAFAFA),
  },
);
---
Path: /lib/components/buttons/outline_button.dart

import 'package:flutter/material.dart';
import '../app_text_style.dart';
import '../colors.dart';
import '../static_decoration.dart';
class OutlineBorderButton extends StatelessWidget {
  String? title;
  VoidCallback onPressed;
  VoidCallback? onLongPress;
  double? height;
  double? width;
  double? borderwidth;
  double? radius;
  double? fontSize;
  Color? textColor;
  Color? borderColor;
  Color? backgroundColor;
  ButtonTextTheme? textTheme;
  BorderRadiusGeometry? borderRadius;
  OutlineBorderButton({
    Key? key,
    required this.title,
    required this.onPressed,
    this.height,
    this.width,
    this.fontSize,
    this.radius,
    this.textColor,
    this.borderColor,
    this.onLongPress,
    this.textTheme,
    this.backgroundColor,
    this.borderwidth,
    this.borderRadius,
  }) : super(key: key);
  @override
  Widget build(BuildContext context) {
    return SizedBox(
      width: width ?? double.infinity,
      height: height ?? 55,
      child: OutlinedButton(
        style: OutlinedButton.styleFrom(
          shape: RoundedRectangleBorder(
            borderRadius: borderRadius ?? circular30BorderRadius,
          ),
          backgroundColor:
              backgroundColor ?? secondaryButtonColor.withOpacity(0.3),
          side: BorderSide(
              color: borderColor ?? primaryWhite, width: borderwidth ?? 1),
        ),
        onPressed: onPressed,
        child: Text(
          title.toString(),
          style: AppTextStyle.normalBold18.copyWith(
              color: textColor ?? primaryWhite, fontSize: fontSize ?? 16),
        ),
      ),
    );
  }
}
class OutlineIconButton extends StatelessWidget {
  String? title;
  VoidCallback onPressed;
  Color? color;
  Icon icon;
  OutlineIconButton({
    Key? key,
    this.color,
    required this.title,
    required this.onPressed,
    required this.icon,
  }) : super(key: key);
  @override
  Widget build(BuildContext context) {
    return OutlinedButton.icon(
      style: ButtonStyle(
        shape: MaterialStateProperty.all(RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(8),
        )),
      ),
      label: Text(title.toString()),
      icon: icon,
      onPressed: onPressed,
    );
  }
}
---
Path: /lib/components/buttons/text_button.dart

import 'package:flutter/material.dart';
import '../app_text_style.dart';
import '../colors.dart';
import '../static_decoration.dart';
class PrimaryTextButton extends StatelessWidget {
  String? title;
  VoidCallback onPressed;
  Color? buttonColor;
  Color? textColor;
  double? width;
  double? height;
  BorderSide? border;
  bool autofocus;
  Color? titleColor;
  BorderRadiusGeometry? borderRadius;
  PrimaryTextButton({
    Key? key,
    required this.title,
    required this.onPressed,
    this.buttonColor,
    this.textColor,
    this.border,
    this.width,
    this.height,
    this.titleColor,
    this.borderRadius,
    this.autofocus = true,
  }) : super(key: key);
  @override
  Widget build(BuildContext context) {
    return Center(
      child: TextButton(
        autofocus: autofocus,
        style: TextButton.styleFrom(
          foregroundColor: textColor ?? primaryWhite,
          shape: RoundedRectangleBorder(
            side: border ?? BorderSide.none,
            borderRadius: borderRadius ?? BorderRadius.circular(30),
          ),
          disabledForegroundColor: primaryWhite.withOpacity(0.38),
          backgroundColor: buttonColor ?? appColor,
          fixedSize: Size(
            width ?? MediaQuery.of(context).size.width / 1.16,
            height ?? 52,
          ),
          alignment: Alignment.center,
          textStyle: const TextStyle(
            fontSize: 16,
            debugLabel: "Title",
            fontWeight: FontWeight.w500,
          ),
        ),
        onPressed: onPressed,
        child: FittedBox(
          fit: BoxFit.scaleDown,
          child: Text(
            title.toString(),
            softWrap: true,
            textAlign: TextAlign.center,
            style: AppTextStyle.normalBold28.copyWith(color: titleColor ?? primaryWhite),
          ),
        ),
      ),
    );
  }
}
class ImageButton extends StatelessWidget {
  final double? width;
  final double? height;
  final TextStyle? textStyle;
  final String? imageLink;
  final IconData? iconLink;
  final String? buttonName;
  final Color? buttonColor;
  final double? iconHeight;
  final VoidCallback? onPressed;
  const ImageButton({
    Key? key,
    this.width,
    this.height,
    this.textStyle,
    this.buttonColor,
    this.imageLink,
    this.iconLink,
    this.iconHeight,
    required this.onPressed,
    required this.buttonName,
  }) : super(key: key);
  @override
  Widget build(BuildContext context) {
    return InkWell(
      onTap: onPressed,
      child: Container(
        height: height ?? 55,
        width: width ?? double.infinity,
        alignment: Alignment.center,
        decoration: BoxDecoration(
          borderRadius: circular30BorderRadius,
          color: buttonColor ?? secondaryButtonColor.withOpacity(0.3),
          border: Border.all(color: primaryWhite, width: 1.0),
        ),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            imageLink != null
                ? Image.asset(
                    imageLink.toString(),
                    height: iconHeight ?? 30,
                    fit: BoxFit.cover,
                  )
                : Icon(
                    iconLink,
                    color: primaryWhite,
                    size: iconHeight ?? 26,
                  ),
            width15,
            Text(buttonName.toString(), style: textStyle ?? AppTextStyle.normalSemiBold16),
          ],
        ),
      ),
    );
  }
}
---
Path: /lib/features/auth/presentation/pages/recover_password_page.dart

import 'package:email_validator/email_validator.dart';
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:flutter_keyboard_visibility/flutter_keyboard_visibility.dart';
import 'package:gap/gap.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:twins/features/auth/presentation/providers/auth_provider.dart';
import 'package:twins/style/genius_button_style.dart';
import 'package:twins/style/values.dart';
import 'package:twins/utilities/snack_bar_helper.dart';
import 'package:twins/widgets/core/genius_button.dart';
import 'package:twins/widgets/never_avoid_fullscreen_area.dart';
final formKey = GlobalKey<FormState>();
class RecoverPasswordPage extends HookConsumerWidget {
  final String email;
  const RecoverPasswordPage(this.email, {super.key});
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final emailController = useTextEditingController(text: email);
    final height = MediaQuery.of(context).size.height;
    final isLoadingState = useState(false);
    final isLoading = isLoadingState.value;
    final authNotifier = ref.watch(authNotifierProvider.notifier);
    String? emailValidator(String? value) {
      if (value == null || value.isEmpty) {
        return 'Please enter your email';
      }
      if (!EmailValidator.validate(value)) {
        return 'Please enter a valid email';
      }
      return null;
    }
    void showErrorSnackBar(String message) {
      SnackbarHelper.showError(context, message);
    }
    void resetPassword() async {
      if (formKey.currentState!.validate()) {
        final email = emailController.text;
        isLoadingState.value = true;
        await authNotifier.sendPasswordResetEmail(email).then(
          (res) {
            isLoadingState.value = false;
            if (res.isLeft()) {
              showErrorSnackBar(res.leftOrNull?.message ?? "An error occurred");
            } else if (res.isRight()) {
              showDialog(
                context: context,
                barrierDismissible: false,
                builder: (BuildContext dialogContext) {
                  return AlertDialog(
                    title: const Text('Success'),
                    content: Text('Password reset email sent successfully to $email'),
                    actions: <Widget>[
                      GeniusButton(
                        expanded: false,
                        style: GeniusButtonStyle.dark,
                        onPressed: () {
                          Navigator.of(dialogContext).pop(); 
                          Navigator.of(context).pop(); 
                        },
                        child: const Text("OK"),
                      ),
                    ],
                  );
                },
              );
            }
          },
        );
      }
    }
    return KeyboardDismissOnTap(
      child: Scaffold(
        body: SafeArea(
          child: Row(
            children: [
              Expanded(
                flex: 2,
                child: LayoutBuilder(
                  builder: (context, constraints) {
                    return NeverAvoidFullscreenArea(
                      height: constraints.maxHeight,
                      child: Column(
                        children: [
                          Gap(S.x(10)),
                          Expanded(
                            child: Image.asset(
                              'assets/images/login.png',
                              height: height,
                            ),
                          ),
                        ],
                      ),
                    );
                  },
                ),
              ),
              Expanded(
                flex: 2,
                child: Padding(
                  padding: const EdgeInsets.all(S.x2),
                  child: Column(
                    children: [
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text(
                            "Forgot Password",
                            style: Theme.of(context).textTheme.displayMedium,
                          ),
                          Image.asset(
                            'assets/images/twins-logo.png',
                            height: 120,
                          )
                        ],
                      ),
                      Expanded(
                        child: Form(
                          key: formKey,
                          child: Column(
                            mainAxisAlignment: MainAxisAlignment.center,
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                "Let’s get you a new password so you can access your personal account.",
                                style: Theme.of(context).textTheme.bodyLarge!.copyWith(
                                      color: const Color(0xFF313131),
                                    ),
                              ),
                              const Gap(S.x2),
                              TextFormField(
                                keyboardType: TextInputType.emailAddress,
                                autofillHints: [AutofillHints.email],
                                validator: emailValidator,
                                controller: emailController,
                                decoration: const InputDecoration(
                                  labelText: "Email",
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                      if (!isLoading)
                        Center(
                          child: GeniusButton(
                            expanded: true,
                            style: GeniusButtonStyle.dark,
                            onPressed: resetPassword,
                            child: const Text("Reset Password"),
                          ),
                        ),
                      if (isLoading)
                        const Center(
                          child: CircularProgressIndicator(),
                        ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
---
Path: /lib/features/auth/presentation/pages/login_page.dart

import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:flutter_keyboard_visibility/flutter_keyboard_visibility.dart';
import 'package:gap/gap.dart';
import 'package:twins/features/auth/presentation/providers/auth_provider.dart';
import 'package:twins/features/auth/presentation/widgets/forgot_password_button.dart';
import 'package:twins/style/genius_button_style.dart';
import 'package:twins/style/values.dart';
import 'package:twins/utilities/snack_bar_helper.dart';
import 'package:twins/widgets/core/genius_button.dart';
import 'package:twins/widgets/never_avoid_fullscreen_area.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:email_validator/email_validator.dart';
final formKey = GlobalKey<FormState>();
class LoginPage extends HookConsumerWidget {
  const LoginPage({Key? key}) : super(key: key);
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final emailController = useTextEditingController();
    final passwordController = useTextEditingController();
    final height = MediaQuery.of(context).size.height;
    final isLoadingState = useState(false);
    bool isLoading = isLoadingState.value;
    final authNotifier = ref.watch(authNotifierProvider.notifier);
    void showErrorSnackBar(String message) {
      SnackbarHelper.showError(context, message);
    }
    void login() async {
      if (formKey.currentState!.validate()) {
        final email = emailController.text;
        final password = passwordController.text;
        isLoadingState.value = true;
        final res = await authNotifier.signInWithEmailAndPassword(email, password);
        if (res.isLeft()) {
          showErrorSnackBar(res.leftOrNull?.message ?? "An error occurred");
          isLoadingState.value = false;
        }
      }
    }
    String? emailValidator(String? value) {
      if (value == null || value.isEmpty) {
        return 'Please enter your email';
      }
      if (!EmailValidator.validate(value)) {
        return 'Please enter a valid email';
      }
      return null;
    }
    String? passwordValidator(String? value) {
      if (value == null || value.isEmpty) {
        return 'Please enter your password';
      }
      return null;
    }
    return KeyboardDismissOnTap(
      child: Scaffold(
        body: SafeArea(
          child: Row(
            children: [
              Expanded(
                flex: 2,
                child: LayoutBuilder(
                  builder: (context, constraints) {
                    return NeverAvoidFullscreenArea(
                      height: constraints.maxHeight,
                      child: Column(
                        children: [
                          Gap(S.x(10)),
                          Expanded(
                            child: Image.asset(
                              'assets/images/login.png',
                              height: height,
                            ),
                          ),
                        ],
                      ),
                    );
                  },
                ),
              ),
              Expanded(
                flex: 2,
                child: Padding(
                  padding: const EdgeInsets.all(S.x2),
                  child: Column(
                    children: [
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text(
                            "Log in",
                            style: Theme.of(context).textTheme.displayMedium,
                          ),
                          Image.asset(
                            'assets/images/twins-logo.png',
                            height: 120,
                          )
                        ],
                      ),
                      Expanded(
                        child: Form(
                          key: formKey,
                          child: SingleChildScrollView(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Gap(S.x(30)),
                                Text(
                                  "Let’s get you all set up so you can access your personal account.",
                                  style: Theme.of(context)
                                      .textTheme
                                      .bodyLarge!
                                      .copyWith(color: const Color(0xFF313131)),
                                ),
                                const Gap(S.x2),
                                TextFormField(
                                  keyboardType: TextInputType.emailAddress,
                                  autofillHints: [AutofillHints.email],
                                  validator: emailValidator,
                                  controller: emailController,
                                  decoration: const InputDecoration(
                                    labelText: "Email",
                                  ),
                                ),
                                TextFormField(
                                  autofillHints: [AutofillHints.password],
                                  obscureText: true,
                                  validator: passwordValidator,
                                  controller: passwordController,
                                  decoration: const InputDecoration(
                                    labelText: "Password",
                                  ),
                                ),
                                if (!isLoading) ForgotPasswordButton(emailController.text),
                                const Gap(S.x4),
                              ],
                            ),
                          ),
                        ),
                      ),
                      if (!isLoading)
                        Center(
                          child: GeniusButton(
                            expanded: true,
                            style: GeniusButtonStyle.dark,
                            onPressed: login,
                            child: const Text("Login"),
                          ),
                        ),
                      if (isLoading)
                        const Center(
                          child: CircularProgressIndicator(),
                        ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
---
Path: /lib/features/auth/presentation/widgets/forgot_password_button.dart

import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/features/auth/presentation/pages/recover_password_page.dart';
import 'package:twins/style/genius_button_style.dart';
import 'package:twins/style/values.dart';
class ForgotPasswordButton extends HookWidget {
  final String email;
  const ForgotPasswordButton(this.email);
  @override
  Widget build(BuildContext context) {
    GeniusButtonStyle style = GeniusButtonStyle.dark;
    Widget child = Text(
      "Forgot Password",
      style: TextStyle(
        fontSize: 16,
        fontWeight: FontWeight.bold,
        color: style.color,
      ),
    );
    return Padding(
      padding: const EdgeInsets.only(top: S.x5),
      child: InkWell(
        onTap: () => Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => RecoverPasswordPage(email),
          ),
        ),
        child: child,
      ),
    );
  }
}
---
Path: /lib/features/auth/presentation/providers/auth_provider.dart

import 'package:twins/core/domain/entities/either.dart';
import 'package:twins/core/exceptions/app_exceptions.dart';
import 'package:twins/core/usecases/empty_params.dart';
import 'package:twins/features/auth/data/datasources/auth_datasource.dart';
import 'package:twins/features/auth/data/repositories/auth_repository_impl.dart';
import 'package:twins/features/auth/domain/entities/auth_email_and_password_params.dart';
import 'package:twins/features/auth/domain/repositories/auth_repository.dart';
import 'package:twins/features/auth/domain/usecases/logout.dart';
import 'package:twins/features/auth/domain/usecases/sign_in_with_email_and_password.dart';
import 'package:twins/features/auth/domain/usecases/send_password_reset_email.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:twins/features/profile/presentation/providers/profile_provider.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
part 'auth_provider.g.dart';
@riverpod
AuthDataSource authDataSource(AuthDataSourceRef ref) {
  return AuthDataSource(Supabase.instance.client.auth);
}
@riverpod
AuthRepository authRepository(AuthRepositoryRef ref) {
  final dataSource = ref.watch(authDataSourceProvider);
  return AuthRepositoryImpl(dataSource);
}
@riverpod
Logout logout(LogoutRef ref) {
  final repository = ref.watch(authRepositoryProvider);
  return Logout(repository);
}
@riverpod
SignInWithEmailAndPassword signInWithEmailAndPassword(SignInWithEmailAndPasswordRef ref) {
  final repository = ref.watch(authRepositoryProvider);
  return SignInWithEmailAndPassword(repository);
}
@riverpod
SendPasswordResetEmail sendPasswordResetEmail(SendPasswordResetEmailRef ref) {
  final repository = ref.watch(authRepositoryProvider);
  return SendPasswordResetEmail(repository);
}
@riverpod
class AuthNotifier extends _$AuthNotifier {
  late Logout _logout;
  late SignInWithEmailAndPassword _signInWithEmailAndPassword;
  late SendPasswordResetEmail _sendPasswordResetEmail;
  @override
  Stream<User?> build() async* {
    _logout = ref.watch(logoutProvider);
    _signInWithEmailAndPassword = ref.watch(signInWithEmailAndPasswordProvider);
    _sendPasswordResetEmail = ref.watch(sendPasswordResetEmailProvider);
    yield* Supabase.instance.client.auth.onAuthStateChange.asyncMap(
      (s) {
        return s.session?.user;
      },
    );
  }
  Future<void> logout() async {
    ref.read(profileNotifierProvider.notifier).removeUserProfile();
    await _logout(const NoParams());
  }
  Future<Either<AppException, NoParams>> signInWithEmailAndPassword(
      String email, String password) async {
    return await _signInWithEmailAndPassword(
      AuthEmailAndPasswordParams(
        email: email,
        password: password,
      ),
    );
  }
  Future<Either<AppException, NoParams>> sendPasswordResetEmail(String email) async {
    return await _sendPasswordResetEmail(email);
  }
}
@riverpod
bool isAuthenticationLoading(IsAuthenticationLoadingRef ref) {
  final userAsyncValue = ref.watch(authNotifierProvider);
  return userAsyncValue.when(
    data: (user) => false,
    loading: () => true,
    error: (error, stack) => false,
  );
}
@riverpod
User? authenticatedUser(AuthenticatedUserRef ref) {
  final userAsyncValue = ref.watch(authNotifierProvider);
  return userAsyncValue.when(
    data: (user) => user,
    loading: () => null,
    error: (error, stack) => null,
  );
}
@riverpod
bool isUserAuthenticated(IsUserAuthenticatedRef ref) {
  final user = ref.watch(authenticatedUserProvider);
  return user != null;
}
---
Path: /lib/features/auth/data/datasources/auth_datasource.dart

import 'package:twins/core/domain/entities/either.dart';
import 'package:twins/core/exceptions/app_exceptions.dart';
import 'package:twins/core/usecases/empty_params.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
class AuthDataSource {
  final GoTrueClient _client;
  AuthDataSource(this._client);
  Future<Either<AppException, NoParams>> logout() async {
    await _client.signOut();
    return Either.right(const NoParams());
  }
  Future<Either<AppException, NoParams>> signInWithEmailAndPassword(
      {required String email, required String password}) async {
    try {
      await _client.signInWithPassword(email: email, password: password);
      return Either.right(const NoParams());
    } catch (e) {
      return Either.left(AppException(
          message: 'Failed to sign in with email and password : ${e.toString()}',
          statusCode: 500,
          identifier: 'Unknown Exception'));
    }
  }
  Future<Either<AppException, NoParams>> sendPasswordResetEmail({required String email}) async {
    try {
      await _client.resetPasswordForEmail(email);
      return Either.right(const NoParams());
    } catch (e) {
      return Either.left(AppException(
          message: 'Failed to send password reset email : ${e.toString()}',
          statusCode: 500,
          identifier: 'Reset Email Error'));
    }
  }
}
---
Path: /lib/features/auth/data/repositories/auth_repository_impl.dart

import 'package:twins/core/domain/entities/either.dart';
import 'package:twins/core/exceptions/app_exceptions.dart';
import 'package:twins/core/usecases/empty_params.dart';
import 'package:twins/features/auth/data/datasources/auth_datasource.dart';
import 'package:twins/features/auth/domain/entities/auth_email_and_password_params.dart';
import 'package:twins/features/auth/domain/repositories/auth_repository.dart';
class AuthRepositoryImpl extends AuthRepository {
  final AuthDataSource _dataSource;
  AuthRepositoryImpl(this._dataSource);
  @override
  Future<Either<AppException, NoParams>> logout() {
    return _dataSource.logout();
  }
  @override
  Future<Either<AppException, NoParams>> signInWithEmailAndPassword(
      AuthEmailAndPasswordParams params) {
    return _dataSource.signInWithEmailAndPassword(
      email: params.email,
      password: params.password,
    );
  }
  @override
  Future<Either<AppException, NoParams>> sendPasswordResetEmail({required String email}) async {
    return await _dataSource.sendPasswordResetEmail(email: email);
  }
}
---
Path: /lib/features/auth/domain/repositories/auth_repository.dart

import 'package:twins/core/domain/entities/either.dart';
import 'package:twins/core/exceptions/app_exceptions.dart';
import 'package:twins/core/usecases/empty_params.dart';
import 'package:twins/features/auth/domain/entities/auth_email_and_password_params.dart';
abstract class AuthRepository {
  Future<Either<AppException, NoParams>> logout();
  Future<Either<AppException, NoParams>> signInWithEmailAndPassword(
      AuthEmailAndPasswordParams params);
  Future<Either<AppException, NoParams>> sendPasswordResetEmail({required String email});
}
---
Path: /lib/features/auth/domain/entities/auth_email_and_password_params.dart

class AuthEmailAndPasswordParams {
  final String email;
  final String password;
  AuthEmailAndPasswordParams({required this.email, required this.password});
}
---
Path: /lib/features/auth/domain/usecases/logout.dart

import 'package:twins/core/domain/entities/either.dart';
import 'package:twins/core/exceptions/app_exceptions.dart';
import 'package:twins/core/usecases/empty_params.dart';
import 'package:twins/core/usecases/usecase.dart';
import 'package:twins/features/auth/domain/repositories/auth_repository.dart';
class Logout implements UseCase<NoParams, NoParams> {
  final AuthRepository repository;
  Logout(this.repository);
  @override
  Future<Either<AppException, NoParams>> call(NoParams params) async {
    return await repository.logout();
  }
}
---
Path: /lib/features/auth/domain/usecases/sign_in_with_email_and_password.dart

import 'package:twins/core/domain/entities/either.dart';
import 'package:twins/core/exceptions/app_exceptions.dart';
import 'package:twins/core/usecases/empty_params.dart';
import 'package:twins/core/usecases/usecase.dart';
import 'package:twins/features/auth/domain/entities/auth_email_and_password_params.dart';
import 'package:twins/features/auth/domain/repositories/auth_repository.dart';
class SignInWithEmailAndPassword implements UseCase<NoParams, AuthEmailAndPasswordParams> {
  final AuthRepository repository;
  SignInWithEmailAndPassword(this.repository);
  @override
  Future<Either<AppException, NoParams>> call(AuthEmailAndPasswordParams params) async {
    return await repository.signInWithEmailAndPassword(params);
  }
}
---
Path: /lib/features/auth/domain/usecases/send_password_reset_email.dart

import 'package:twins/core/domain/entities/either.dart';
import 'package:twins/core/exceptions/app_exceptions.dart';
import 'package:twins/core/usecases/empty_params.dart';
import 'package:twins/core/usecases/usecase.dart';
import 'package:twins/features/auth/domain/repositories/auth_repository.dart';
class SendPasswordResetEmail implements UseCase<NoParams, String> {
  final AuthRepository repository;
  SendPasswordResetEmail(this.repository);
  @override
  Future<Either<AppException, NoParams>> call(String email) async {
    return await repository.sendPasswordResetEmail(email: email);
  }
}
---
Path: /lib/features/profile/presentation/providers/profile_provider.dart

import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:twins/core/domain/entities/either.dart';
import 'package:twins/core/exceptions/app_exceptions.dart';
import 'package:twins/features/auth/presentation/providers/auth_provider.dart';
import 'package:twins/features/profile/data/datasources/local_profile_datasource.dart';
import 'package:twins/features/profile/data/datasources/remote_profile_datasource.dart';
import 'package:twins/features/profile/data/repositories/profile_repository_impl.dart';
import 'package:twins/features/profile/domain/repositories/profile_repository.dart';
import 'package:twins/features/profile/domain/usecases/load_user_profile_local.dart';
import 'package:twins/features/profile/domain/usecases/load_user_profile_remote.dart';
import 'package:twins/features/profile/domain/usecases/remove_user_profile.dart';
import 'package:twins/features/profile/domain/usecases/update_user_profile_local.dart';
import 'package:twins/features/profile/domain/usecases/update_user_profile_remote.dart';
import 'package:twins/models/user_model.dart';
import 'package:twins/providers/dio_client_provider.dart';
import 'package:twins/providers/shared_preferences_provider.dart';
part 'profile_provider.g.dart';
@riverpod
RemoteProfileDataSource remoteProfileDataSource(RemoteProfileDataSourceRef ref) {
  final dio = ref.watch(dioClientProvider);
  return RemoteProfileDataSource(dio: dio);
}
@riverpod
LocalProfileDataSource localProfileDataSource(LocalProfileDataSourceRef ref) {
  final sharedPreference = ref.watch(sharedPreferencesOrNullProvider);
  return LocalProfileDataSource(sharedPreferences: sharedPreference);
}
@riverpod
ProfileRepository profileRepository(ProfileRepositoryRef ref) {
  final remoteDataSource = ref.watch(remoteProfileDataSourceProvider);
  final localDataSource = ref.watch(localProfileDataSourceProvider);
  return ProfileRepositoryImpl(remoteDataSource, localDataSource);
}
@riverpod
LoadUserProfileLocal loadUserProfileLocal(LoadUserProfileLocalRef ref) {
  final repository = ref.watch(profileRepositoryProvider);
  return LoadUserProfileLocal(repository);
}
@riverpod
LoadUserProfileRemote loadUserProfileRemote(LoadUserProfileRemoteRef ref) {
  final repository = ref.watch(profileRepositoryProvider);
  return LoadUserProfileRemote(repository);
}
@riverpod
UpdateUserProfileRemote updateUserProfileRemote(UpdateUserProfileRemoteRef ref) {
  final repository = ref.watch(profileRepositoryProvider);
  return UpdateUserProfileRemote(repository);
}
@riverpod
UpdateUserProfileLocal updateUserProfileLocal(UpdateUserProfileLocalRef ref) {
  final repository = ref.watch(profileRepositoryProvider);
  return UpdateUserProfileLocal(repository);
}
@riverpod
RemoveUserProfile removeUserProfile(RemoveUserProfileRef ref) {
  final repository = ref.watch(profileRepositoryProvider);
  return RemoveUserProfile(repository);
}
@riverpod
UserProfile? userProfileOrNull(UserProfileOrNullRef ref) {
  final state = ref.watch(profileNotifierProvider);
  return state.maybeWhen(
    success: (profile) => profile,
    orElse: () => null,
  );
}
@riverpod
bool userProfileIsLoading(UserProfileIsLoadingRef ref) {
  return ref.watch(profileNotifierProvider).maybeWhen(
        loading: () => true,
        success: (userProfile) => false,
        orElse: () => false,
      );
}
@riverpod
String userLevelOrEiken5(UserLevelOrEiken5Ref ref) {
  final userLevel = ref.watch(
    profileNotifierProvider.select(
      (value) {
        if (value is UserStateSuccess) {
          return value.userProfile.level;
        }
        return null;
      },
    ),
  );
  if (userLevel == null) return 'EIKEN5';
  return userLevel;
}
@riverpod
String translatedUserLevel(TranslatedUserLevelRef ref) {
  final userLevel = ref.watch(
    profileNotifierProvider.select(
      (value) {
        if (value is UserStateSuccess) {
          return value.userProfile.level;
        }
        return null;
      },
    ),
  );
  if (userLevel == null) return 'Eiken 5';
  switch (userLevel) {
    case 'EIKEN5':
      return 'Eiken 5';
    case 'EIKEN4':
      return 'Eiken 4';
    case 'EIKEN3':
      return 'Eiken 3';
    default:
      return userLevel;
  }
}
@riverpod
bool userIsCompleted(UserIsCompletedRef ref) {
  final userState = ref.watch(profileNotifierProvider);
  return userState.completed;
}
@riverpod
class ProfileNotifier extends _$ProfileNotifier {
  late LoadUserProfileLocal _loadUserProfileLocal;
  late LoadUserProfileRemote _loadUserProfileRemote;
  late UpdateUserProfileRemote _updateUserProfileRemote;
  late UpdateUserProfileLocal _updateUserProfileLocal;
  late RemoveUserProfile _removeUserProfile;
  late String? _id;
  @override
  UserState build() {
    _loadUserProfileLocal = ref.watch(loadUserProfileLocalProvider);
    _loadUserProfileRemote = ref.watch(loadUserProfileRemoteProvider);
    _updateUserProfileRemote = ref.watch(updateUserProfileRemoteProvider);
    _updateUserProfileLocal = ref.watch(updateUserProfileLocalProvider);
    _removeUserProfile = ref.watch(removeUserProfileProvider);
    _id = ref.watch(authenticatedUserProvider)?.id;
    loadUserProfile();
    return const UserState.loading();
  }
  UserState _handleResult(Either<AppException, UserProfile> result) {
    return result.fold(
      (exeception) => UserState.error(exeception.message),
      (profile) => UserState.success(profile),
    );
  }
  Future<void> loadUserProfile() async {
    state = const UserState.loading();
    final localUserProfileRes = _handleResult(await _loadUserProfileLocal(_id));
    if (localUserProfileRes is UserStateSuccess) {
      state = localUserProfileRes;
    }
    state = _handleResult(await _loadUserProfileRemote(_id));
    UserState userState = state;
    if (userState is UserStateSuccess) {
      _updateUserProfileLocal(userState.userProfile);
    }
  }
  Future<void> updateUserProfile() async {
    UserState userState = state;
    if (userState is UserStateSuccess) {
      state = const UserState.loading();
      state =
          _handleResult(await _updateUserProfileRemote(userState.userProfile.copyWith(id: _id)));
      UserState remoteUserState = state;
      if (remoteUserState is UserStateSuccess) {
        _updateUserProfileLocal(remoteUserState.userProfile);
      }
    }
  }
  Future<void> setName({required String? name}) async {
    UserState userState = state;
    if (userState is UserStateSuccess) {
      state = UserState.success(userState.userProfile.copyWith(name: name));
    }
  }
  Future<void> setLevel({required String? level}) async {
    UserState userState = state;
    if (userState is UserStateSuccess) {
      state = UserState.success(userState.userProfile.copyWith(level: level));
    }
  }
  Future<void> setCharacter({required String? character}) async {
    UserState userState = state;
    if (userState is UserStateSuccess) {
      state = UserState.success(userState.userProfile.copyWith(character: character));
    }
  }
  Future<void> removeUserProfile() async {
    UserState userState = state;
    if (userState is UserStateSuccess) {
      state = _handleResult(await _removeUserProfile(userState.userProfile));
    }
  }
}
---
Path: /lib/features/profile/data/datasources/remote_profile_datasource.dart

import 'package:dio/dio.dart';
import 'package:twins/core/domain/entities/either.dart';
import 'package:twins/core/exceptions/app_exceptions.dart';
import 'package:twins/models/user_model.dart';
class RemoteProfileDataSource {
  final Dio dio;
  RemoteProfileDataSource({required this.dio});
  Future<Either<AppException, UserProfile>> loadUserProfile(String? id) async {
    try {
      if (id == null) {
        return Either.left(const UserNotFoundException());
      } else {
        String url = '/info/profile/$id';
        Response response = await dio.get(url);
        final profile = UserProfile.fromJson(response.data);
        return Either.right(profile);
      }
    } catch (e) {
      return Either.left(AppException(
        message: "Error loading user profile: $e",
        statusCode: 500,
        identifier: 'Unknown error',
      ));
    }
  }
  Future<Either<AppException, UserProfile>> updateUserProfile(UserProfile userProfile) async {
    String? id = userProfile.id;
    try {
      String url = '/info/profile/$id';
      Response response = await dio.put(url, data: userProfile.toJson());
      final profile = UserProfile.fromJson(response.data);
      return Either.right(profile);
    } on DioException catch (e) {
      return Either.left(
        AppException(
          message: "Error updating user profile: ${e.response?.data}",
          statusCode: e.response?.statusCode ?? 500,
          identifier: 'Dio error',
        ),
      );
    } catch (e) {
      return Either.left(
        AppException(
          message: "Error updating user profile: $e",
          statusCode: 500,
          identifier: 'Unknown error',
        ),
      );
    }
  }
}
---
Path: /lib/features/profile/data/datasources/local_profile_datasource.dart

import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:twins/core/domain/entities/either.dart';
import 'package:twins/core/exceptions/app_exceptions.dart';
import 'package:twins/models/user_model.dart';
class LocalProfileDataSource {
  final SharedPreferences? sharedPreferences;
  LocalProfileDataSource({required this.sharedPreferences});
  Future<Either<AppException, UserProfile>> loadUserProfile(String? id) async {
    try {
      if (id == null) {
        return Either.right(
          const UserProfile(
            id: null,
            name: null,
            level: null,
            role: null,
            character: null,
            registered: false,
          ),
        );
      }
      final userDataString = sharedPreferences?.getString(id);
      if (userDataString != null) {
        final json = jsonDecode(userDataString);
        return Either.right(UserProfile.fromJson(json));
      } else {
        return Either.left(const UserNotFoundException());
      }
    } on FormatException catch (e) {
      return Either.left(CacheFailureException(e.message));
    } catch (e) {
      return Either.left(
        AppException(
          message: 'Error loading user profile: $e',
          statusCode: 500,
          identifier: 'Unknown error',
        ),
      );
    }
  }
  Future<Either<AppException, UserProfile>> updateUserProfile(UserProfile userProfile) async {
    String? id = userProfile.id;
    try {
      await sharedPreferences?.setString(
        id,
        jsonEncode(
          userProfile.toJson(),
        ),
      );
      return Either.right(userProfile);
        } on FormatException catch (e) {
      return Either.left(CacheFailureException(e.message));
    } catch (e) {
      return Either.left(
        AppException(
          message: 'Error updating user profile: $e',
          statusCode: 500,
          identifier: 'Unknown error',
        ),
      );
    }
  }
  Future<Either<AppException, UserProfile>> removeUserProfile(UserProfile userProfile) async {
    String? id = userProfile.id;
    try {
      await sharedPreferences?.remove(id);
          final defaultUserProfile = UserProfile.nullify(userProfile);
      return Either.right(defaultUserProfile);
    } catch (e) {
      return Either.left(
        AppException(
          message: "Error removing user: $e",
          statusCode: 500,
          identifier: 'Unknown error',
        ),
      );
    }
  }
}
---
Path: /lib/features/profile/data/repositories/profile_repository_impl.dart

import 'package:twins/core/domain/entities/either.dart';
import 'package:twins/core/exceptions/app_exceptions.dart';
import 'package:twins/features/profile/data/datasources/local_profile_datasource.dart';
import 'package:twins/features/profile/data/datasources/remote_profile_datasource.dart';
import 'package:twins/features/profile/domain/repositories/profile_repository.dart';
import 'package:twins/models/user_model.dart';
class ProfileRepositoryImpl implements ProfileRepository {
  final RemoteProfileDataSource _remoteProfileDataSource;
  final LocalProfileDataSource _localProfileDataSource;
  ProfileRepositoryImpl(this._remoteProfileDataSource, this._localProfileDataSource);
  @override
  Future<Either<AppException, UserProfile>> loadUserProfileLocal(String? id) async =>
      await _localProfileDataSource.loadUserProfile(id);
  @override
  Future<Either<AppException, UserProfile>> loadUserProfileRemote(String? id) async =>
      await _remoteProfileDataSource.loadUserProfile(id);
  @override
  Future<Either<AppException, UserProfile>> updateUserProfileLocal(UserProfile userProfile) async =>
      await _localProfileDataSource.updateUserProfile(userProfile);
  @override
  Future<Either<AppException, UserProfile>> updateUserProfileRemote(
          UserProfile userProfile) async =>
      await _remoteProfileDataSource.updateUserProfile(userProfile);
  @override
  Future<Either<AppException, UserProfile>> removeUserProfile(UserProfile userProfile) async =>
      await _localProfileDataSource.removeUserProfile(userProfile);
}
---
Path: /lib/features/profile/domain/repositories/profile_repository.dart

import 'package:twins/core/domain/entities/either.dart';
import 'package:twins/core/exceptions/app_exceptions.dart';
import 'package:twins/models/user_model.dart';
abstract class ProfileRepository {
  Future<Either<AppException, UserProfile>> loadUserProfileRemote(String? id);
  Future<Either<AppException, UserProfile>> loadUserProfileLocal(String? id);
  Future<Either<AppException, UserProfile>> updateUserProfileLocal(UserProfile userProfile);
  Future<Either<AppException, UserProfile>> updateUserProfileRemote(UserProfile userProfile);
  Future<Either<AppException, UserProfile>> removeUserProfile(UserProfile userProfile);
}
---
Path: /lib/features/profile/domain/usecases/remove_user_profile.dart

import 'package:twins/core/domain/entities/either.dart';
import 'package:twins/core/exceptions/app_exceptions.dart';
import 'package:twins/features/profile/domain/repositories/profile_repository.dart';
import 'package:twins/models/user_model.dart';
class RemoveUserProfile {
  final ProfileRepository _repository;
  RemoveUserProfile(this._repository);
  Future<Either<AppException, UserProfile>> call(UserProfile userProfile) {
    return _repository.removeUserProfile(userProfile);
  }
}
---
Path: /lib/features/profile/domain/usecases/load_user_profile_local.dart

import 'package:twins/core/domain/entities/either.dart';
import 'package:twins/core/exceptions/app_exceptions.dart';
import 'package:twins/features/profile/domain/repositories/profile_repository.dart';
import 'package:twins/models/user_model.dart';
class LoadUserProfileLocal {
  final ProfileRepository _repository;
  LoadUserProfileLocal(this._repository);
  Future<Either<AppException, UserProfile>> call(String? id) {
    return _repository.loadUserProfileLocal(id);
  }
}
---
Path: /lib/features/profile/domain/usecases/update_user_profile_remote.dart

import 'package:twins/core/domain/entities/either.dart';
import 'package:twins/core/exceptions/app_exceptions.dart';
import 'package:twins/features/profile/domain/repositories/profile_repository.dart';
import 'package:twins/models/user_model.dart';
class UpdateUserProfileRemote {
  final ProfileRepository _repository;
  UpdateUserProfileRemote(this._repository);
  Future<Either<AppException, UserProfile>> call(UserProfile userProfile) async {
    return _repository.updateUserProfileRemote(userProfile);
  }
}
---
Path: /lib/features/profile/domain/usecases/load_user_profile_remote.dart

import 'package:twins/core/domain/entities/either.dart';
import 'package:twins/core/exceptions/app_exceptions.dart';
import 'package:twins/features/profile/domain/repositories/profile_repository.dart';
import 'package:twins/models/user_model.dart';
class LoadUserProfileRemote {
  final ProfileRepository _repository;
  LoadUserProfileRemote(this._repository);
  Future<Either<AppException, UserProfile>> call(String? id) {
    return _repository.loadUserProfileRemote(id);
  }
}
---
Path: /lib/features/profile/domain/usecases/update_user_profile_local.dart

import 'package:twins/core/domain/entities/either.dart';
import 'package:twins/core/exceptions/app_exceptions.dart';
import 'package:twins/features/profile/domain/repositories/profile_repository.dart';
import 'package:twins/models/user_model.dart';
class UpdateUserProfileLocal {
  final ProfileRepository _repository;
  UpdateUserProfileLocal(this._repository);
  Future<Either<AppException, UserProfile>> call(UserProfile userProfile) async {
    return _repository.updateUserProfileLocal(userProfile);
  }
}
---
Path: /lib/features/splash/presentation/splash_page.dart

import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
class SplashPage extends HookWidget {
  const SplashPage({Key? key}) : super(key: key);
  @override
  Widget build(BuildContext context) {
    return const Scaffold(
      body: Center(
        child: CircularProgressIndicator(),
      ),
    );
  }
}
---
Path: /lib/features/category/presentation/widgets/category_section.dart

import 'package:flutter/material.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:twins/features/category/domain/entities/category_entity.dart';
import 'package:twins/features/category/presentation/riverpod/category_provider.dart';
import 'categories_list_view.dart';
class CategorySection extends HookConsumerWidget {
  const CategorySection({super.key});
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final categoriesNotifier = ref.watch(categoriesNotifierProvider);
    return categoriesNotifier.maybeWhen(
      orElse: () => const SizedBox.shrink(),
      success: (categories) => SizedBox(
        height: 40,
        width: double.infinity,
        child: CategoriesListView(items: categories),
      ),
    );
  }
}
---
Path: /lib/features/category/presentation/widgets/categories_list_view.dart

import 'package:flutter/material.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:twins/features/category/domain/entities/category_entity.dart';
import 'package:twins/features/category/presentation/riverpod/category_provider.dart';
import 'package:twins/features/category/presentation/widgets/category_card.dart';
class CategoriesListView extends ConsumerWidget {
  final List<CategoryEntity> items;
  const CategoriesListView({super.key, required this.items});
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return ListView(
      scrollDirection: Axis.horizontal,
      children: [
        for (final item in items)
          CategoryCard(
            category: item,
            isSelected: ref.watch(categoriesNotifierProvider.notifier).isSelected(item),
            onTap: (p0) => ref.read(categoriesNotifierProvider.notifier).selectCategory(p0),
          )
      ],
    );
  }
}
---
Path: /lib/features/category/presentation/widgets/category_card.dart

import 'package:flutter/material.dart';
import 'package:twins/features/category/domain/entities/category_entity.dart';
import 'package:twins/style/values.dart';
class CategoryCard extends StatelessWidget {
  final CategoryEntity category;
  final bool isSelected;
  final Function(CategoryEntity) onTap;
  const CategoryCard({
    Key? key,
    required this.category,
    required this.isSelected,
    required this.onTap,
  }) : super(key: key);
  @override
  Widget build(BuildContext context) {
    final containerDecoration = BoxDecoration(
      border: Border.all(color: C.GENIUS_GREY_DARK),
      color: isSelected ? C.GENIUS_PRIMARY : C.GENIUS_WHITE,
      borderRadius: BorderRadius.circular(20),
    );
    final textStyle = TextStyle(
      color: isSelected ? C.GENIUS_WHITE : C.GENIUS_BLACK,
    );
    return Padding(
      padding: const EdgeInsets.only(right: 16.0),
      child: InkWell(
        onTap: () => onTap(category),
        child: Container(
          decoration: containerDecoration,
          padding: const EdgeInsets.symmetric(
            horizontal: 16.0,
            vertical: 8.0,
          ),
          child: Text(
            category.name,
            style: textStyle,
          ),
        ),
      ),
    );
  }
}
---
Path: /lib/features/category/presentation/widgets/category_modules_section.dart

import 'package:auto_size_text/auto_size_text.dart';
import 'package:flutter/material.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:twins/features/category/presentation/riverpod/category_provider.dart';
import 'package:twins/models/api/module_request.dart';
import 'package:twins/pages/learn_pages/module_page.dart';
import 'package:twins/pages/learn_pages/widgets/module_card.dart';
class CategoryModulesSection extends HookConsumerWidget {
  const CategoryModulesSection({super.key});
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final categoryModulesNotifier = ref.watch(categoryModulesNotifierProvider);
    List<Widget> generatePlaceholders({int n = 3}) {
      return [
        for (var i = 0; i < n; i++) ...[
          const ModuleCard(
            module: GeniusModule(
                id: '',
                key: '',
                title: '',
                description: '',
                image: null,
                level: '',
                isPro: false,
                lessons: []),
            isPlaceholder: true,
          ),
        ]
      ];
    }
    return GridView.count(
      shrinkWrap: true,
      primary: false,
      physics: const NeverScrollableScrollPhysics(),
      crossAxisCount: 3,
      mainAxisSpacing: 20,
      crossAxisSpacing: 20,
      childAspectRatio: 3 / 4,
      padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 5),
      children: [
        ...categoryModulesNotifier.maybeMap(
          orElse: () => [],
          success: (data) {
            return [
              ...data.modules
                  .expand(
                    (module) => [
                      Consumer(
                        builder: (context, ref, child) {
                          return InkWell(
                            onTap: () async {
                              await ModulePage(
                                module: module,
                              ).show();
                            },
                            child: ModuleCard(module: module),
                          );
                        },
                      ),
                    ],
                  )
                  .toList(),
            ];
          },
          error: (err) => [
            SizedBox(
              height: 150,
              width: double.infinity,
              child: Padding(
                padding: const EdgeInsets.all(8.0),
                child: Column(
                  children: [
                    Icon(
                      Icons.public_off_rounded,
                      size: 40,
                      color: Colors.grey.shade400,
                    ),
                    const SizedBox(height: 10),
                    const AutoSizeText(
                      'Something went wrong. Please retry later.',
                      textAlign: TextAlign.center,
                    ),
                    AutoSizeText(err.message.toString()),
                  ],
                ),
              ),
            ),
          ],
          loading: (d) => generatePlaceholders(),
        ),
      ],
    );
  }
}
---
Path: /lib/features/category/presentation/riverpod/category_provider.dart

import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:twins/features/category/data/datasources/local_categories_datasource.dart';
import 'package:twins/features/category/data/datasources/remote_categories_datasource.dart';
import 'package:twins/features/category/data/repositories/category_repository_impl.dart';
import 'package:twins/features/category/domain/entities/category_entity.dart';
import 'package:twins/features/category/domain/repositories/category_repository.dart';
import 'package:twins/features/category/domain/usecases/fetch_categories_use_case.dart';
import 'package:twins/features/category/domain/usecases/fetch_category_modules_use_case.dart';
import 'package:twins/features/category/domain/usecases/fetch_saved_category_use_case.dart';
import 'package:twins/features/category/domain/usecases/update_saved_category_use_case.dart';
import 'package:twins/providers/dio_client_provider.dart';
import 'package:twins/providers/shared_preferences_provider.dart';
part 'category_provider.g.dart';
@riverpod
RemoteCategoriesDataSource remoteCategoriesDataSource(RemoteCategoriesDataSourceRef ref) {
  final dio = ref.watch(dioClientProvider);
  return RemoteCategoriesDataSource(dio: dio);
}
@riverpod
LocalCategoriesDataSource localCategoriesDataSource(LocalCategoriesDataSourceRef ref) {
  final sharedPreference = ref.watch(sharedPreferencesOrNullProvider);
  return LocalCategoriesDataSource(sharedPreferences: sharedPreference);
}
@riverpod
CategoryRepository categoryRepository(CategoryRepositoryRef ref) {
  final remoteDataSource = ref.watch(remoteCategoriesDataSourceProvider);
  final localDataSource = ref.watch(localCategoriesDataSourceProvider);
  return CategoryRepositoryImpl(remoteDataSource, localDataSource);
}
@riverpod
FetchCategories fetchCategories(FetchCategoriesRef ref) {
  final repository = ref.watch(categoryRepositoryProvider);
  return FetchCategories(repository);
}
@riverpod
FetchCategoryModules fetchCategoryModules(FetchCategoryModulesRef ref) {
  final repository = ref.watch(categoryRepositoryProvider);
  return FetchCategoryModules(repository);
}
@riverpod
FetchSavedCategory fetchSavedCategory(FetchSavedCategoryRef ref) {
  final repository = ref.watch(categoryRepositoryProvider);
  return FetchSavedCategory(repository);
}
@riverpod
UpdateSavedCategory updateSavedCategory(UpdateSavedCategoryRef ref) {
  final repository = ref.watch(categoryRepositoryProvider);
  return UpdateSavedCategory(repository);
}
@riverpod
class CategoriesNotifier extends _$CategoriesNotifier {
  late FetchCategories _fetchCategories;
  late FetchSavedCategory _fetchSavedCategory;
  late UpdateSavedCategory _updateSavedCategory;
  late CategoryEntity _selectedCategory;
  @override
  CategoriesState build() {
    _fetchCategories = ref.watch(fetchCategoriesProvider);
    _fetchSavedCategory = ref.watch(fetchSavedCategoryProvider);
    _updateSavedCategory = ref.watch(updateSavedCategoryProvider);
    loadCategories();
    return const CategoriesState.loading();
  }
  Future<void> loadCategories() async {
    state = const CategoriesState.loading();
    final resultCategories = await _fetchCategories();
    resultCategories.fold(
      (error) => state = CategoriesState.error(error.message),
      (categories) => state = CategoriesState.success(categories),
    );
    await _loadSavedCategory();
  }
  Future<void> _loadSavedCategory() async {
    final resultSavedCategory = await _fetchSavedCategory();
    resultSavedCategory.fold(
      (p0) => null,
      (category) {
        if (category != null) {
          _selectedCategory = category;
        } else {
          CategoriesState categoriesState = state;
          if (categoriesState is CategoriesStateSuccess) {
            if (categoriesState.categories.isNotEmpty) {
              _selectedCategory = categoriesState.categories.first;
              _updateSavedCategory(_selectedCategory);
            }
          }
        }
      },
    );
    final categoryModulesNotifier = ref.read(categoryModulesNotifierProvider.notifier);
    categoryModulesNotifier.loadCategoryModules(_selectedCategory.id);
  }
  void selectCategory(CategoryEntity newCategory) {
    CategoriesState categoriesState = state;
    if (categoriesState is CategoriesStateSuccess) {
      final categories = categoriesState.categories;
      _selectedCategory = newCategory;
      state = CategoriesState.success(categories);
      _updateSavedCategory(_selectedCategory);
      final categoryModulesNotifier = ref.read(categoryModulesNotifierProvider.notifier);
      categoryModulesNotifier.loadCategoryModules(_selectedCategory.id);
    }
  }
  bool isSelected(CategoryEntity newCategory) => newCategory.id == _selectedCategory.id;
}
@riverpod
bool categoriesIsLoading(CategoriesIsLoadingRef ref) {
  return ref.watch(categoriesNotifierProvider).maybeWhen(
        loading: () => true,
        success: (categories) => false,
        orElse: () => false,
      );
}
@riverpod
class CategoryModulesNotifier extends _$CategoryModulesNotifier {
  late FetchCategoryModules _fetchCategoryModules;
  @override
  CategoryModulesState build() {
    _fetchCategoryModules = ref.watch(fetchCategoryModulesProvider);
    return const CategoryModulesState.loading();
  }
  Future<void> loadCategoryModules(String categoryId) async {
    state = const CategoryModulesState.loading();
    final result = await _fetchCategoryModules(categoryId);
    result.fold(
      (error) => state = CategoryModulesState.error(error.message),
      (modules) => state = CategoryModulesState.success(modules),
    );
  }
}
---
Path: /lib/features/category/data/datasources/local_categories_datasource.dart

import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:twins/core/domain/entities/either.dart';
import 'package:twins/core/exceptions/app_exceptions.dart';
import 'package:twins/features/category/domain/entities/category_entity.dart';
String _key = "category";
class LocalCategoriesDataSource {
  final SharedPreferences? sharedPreferences;
  LocalCategoriesDataSource({required this.sharedPreferences});
  Future<Either<AppException, CategoryEntity?>> fetchSavedCategory() async {
    try {
      final valueString = sharedPreferences?.getString(_key);
      if (valueString != null) {
        final json = jsonDecode(valueString);
        return Either.right(CategoryEntity.fromJson(json));
      } else {
        return Either.right(null);
      }
    } catch (e) {
      return Either.left(
        AppException(
          message: 'Error fetching saved category: $e',
          statusCode: 500,
          identifier: 'Unknown error',
        ),
      );
    }
  }
  Future<Either<AppException, CategoryEntity>> updateSavedCategory(
      CategoryEntity newCategory) async {
    try {
      await sharedPreferences?.setString(_key, jsonEncode(newCategory.toJson()));
      return Either.right(newCategory);
    } catch (e) {
      return Either.left(
        AppException(
          message: 'Error fetching saved category: $e',
          statusCode: 500,
          identifier: 'Unknown error',
        ),
      );
    }
  }
}
---
Path: /lib/features/category/data/datasources/remote_categories_datasource.dart

import 'package:dio/dio.dart';
import 'package:twins/core/domain/entities/either.dart';
import 'package:twins/core/exceptions/app_exceptions.dart';
import 'package:twins/features/category/domain/entities/category_entity.dart';
import 'package:twins/models/api/module_request.dart';
class RemoteCategoriesDataSource {
  final Dio dio;
  RemoteCategoriesDataSource({required this.dio});
  Future<Either<AppException, List<CategoryEntity>>> fetchCategories() async {
    try {
      String path = '/categories/';
      Response response = await dio.get(path);
      List jsonList = response.data;
      final categories = jsonList.map((e) => CategoryEntity.fromJson(e)).toList();
      return Either.right(categories);
    } catch (e) {
      return Either.left(
        AppException(
          message: "Error fetching categories: $e",
          statusCode: 500,
          identifier: 'Unknown error',
        ),
      );
    }
  }
  Future<Either<AppException, List<GeniusModule>>> fetchCategoryModules(String categoryId) async {
    try {
      String path = '/categories/$categoryId/modules';
      Response response = await dio.get(path);
      List jsonList = response.data;
      final modules = jsonList.map((e) => GeniusModule.fromJson(e)).toList();
      return Either.right(modules);
    } catch (e) {
      return Either.left(
        AppException(
          message: "Error fetching category $categoryId modules: $e",
          statusCode: 500,
          identifier: 'Unknown error',
        ),
      );
    }
  }
}
---
Path: /lib/features/category/data/repositories/category_repository_impl.dart

import 'package:twins/core/domain/entities/either.dart';
import 'package:twins/core/exceptions/app_exceptions.dart';
import 'package:twins/features/category/data/datasources/local_categories_datasource.dart';
import 'package:twins/features/category/data/datasources/remote_categories_datasource.dart';
import 'package:twins/features/category/domain/entities/category_entity.dart';
import 'package:twins/features/category/domain/repositories/category_repository.dart';
import 'package:twins/models/api/module_request.dart';
class CategoryRepositoryImpl implements CategoryRepository {
  final RemoteCategoriesDataSource _remoteCategoriesDataSource;
  final LocalCategoriesDataSource _localCategoriesDataSource;
  CategoryRepositoryImpl(this._remoteCategoriesDataSource, this._localCategoriesDataSource);
  @override
  Future<Either<AppException, List<CategoryEntity>>> fetchCategories() async =>
      await _remoteCategoriesDataSource.fetchCategories();
  @override
  Future<Either<AppException, List<GeniusModule>>> fetchCategoryModules(String categoryId) async =>
      await _remoteCategoriesDataSource.fetchCategoryModules(categoryId);
  @override
  Future<Either<AppException, CategoryEntity?>> fetchSavedCategory() async =>
      await _localCategoriesDataSource.fetchSavedCategory();
  @override
  Future<Either<AppException, CategoryEntity>> updateSavedCategory(
          CategoryEntity newCategory) async =>
      await _localCategoriesDataSource.updateSavedCategory(newCategory);
}
---
Path: /lib/features/category/domain/repositories/category_repository.dart

import 'package:twins/core/domain/entities/either.dart';
import 'package:twins/core/exceptions/app_exceptions.dart';
import 'package:twins/features/category/domain/entities/category_entity.dart';
import 'package:twins/models/api/module_request.dart';
abstract class CategoryRepository {
  Future<Either<AppException, List<CategoryEntity>>> fetchCategories();
  Future<Either<AppException, List<GeniusModule>>> fetchCategoryModules(String categoryId);
  Future<Either<AppException, CategoryEntity?>> fetchSavedCategory();
  Future<Either<AppException, CategoryEntity>> updateSavedCategory(CategoryEntity newCategory);
}
---
Path: /lib/features/category/domain/entities/category_entity.dart

import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:twins/models/api/module_request.dart';
part 'category_entity.freezed.dart';
part 'category_entity.g.dart';
@freezed
class CategoryEntity with _$CategoryEntity {
  const CategoryEntity._();
  const factory CategoryEntity({
    required String id,
    required String name,
  }) = _CategoryEntity;
  factory CategoryEntity.fromJson(Map<String, Object?> json) => _$CategoryEntityFromJson(json);
}
@freezed
class CategoriesState with _$CategoriesState {
  const CategoriesState._();
  const factory CategoriesState.loading() = CategoriesStateLoading;
  const factory CategoriesState.success(List<CategoryEntity> categories) = CategoriesStateSuccess;
  const factory CategoriesState.error(String message) = CategoriesStateError;
}
@freezed
class CategoryModulesState with _$CategoryModulesState {
  const CategoryModulesState._();
  const factory CategoryModulesState.loading() = CategoryModulesStateLoading;
  const factory CategoryModulesState.success(List<GeniusModule> modules) =
      CategoryModulesStateSuccess;
  const factory CategoryModulesState.error(String message) = CategoryModulesStateError;
}
---
Path: /lib/features/category/domain/usecases/update_saved_category_use_case.dart

import 'package:twins/core/domain/entities/either.dart';
import 'package:twins/core/exceptions/app_exceptions.dart';
import 'package:twins/features/category/domain/entities/category_entity.dart';
import 'package:twins/features/category/domain/repositories/category_repository.dart';
class UpdateSavedCategory {
  final CategoryRepository _repository;
  UpdateSavedCategory(this._repository);
  Future<Either<AppException, CategoryEntity>> call(CategoryEntity newCategory) async =>
      await _repository.updateSavedCategory(newCategory);
}
---
Path: /lib/features/category/domain/usecases/fetch_categories_use_case.dart

import 'package:twins/core/domain/entities/either.dart';
import 'package:twins/core/exceptions/app_exceptions.dart';
import 'package:twins/features/category/domain/entities/category_entity.dart';
import 'package:twins/features/category/domain/repositories/category_repository.dart';
class FetchCategories {
  final CategoryRepository _repository;
  FetchCategories(this._repository);
  Future<Either<AppException, List<CategoryEntity>>> call() async =>
      await _repository.fetchCategories();
}
---
Path: /lib/features/category/domain/usecases/fetch_saved_category_use_case.dart

import 'package:twins/core/domain/entities/either.dart';
import 'package:twins/core/exceptions/app_exceptions.dart';
import 'package:twins/features/category/domain/entities/category_entity.dart';
import 'package:twins/features/category/domain/repositories/category_repository.dart';
class FetchSavedCategory {
  final CategoryRepository _repository;
  FetchSavedCategory(this._repository);
  Future<Either<AppException, CategoryEntity?>> call() async =>
      await _repository.fetchSavedCategory();
}
---
Path: /lib/features/category/domain/usecases/fetch_category_modules_use_case.dart

import 'package:twins/core/domain/entities/either.dart';
import 'package:twins/core/exceptions/app_exceptions.dart';
import 'package:twins/features/category/domain/repositories/category_repository.dart';
import 'package:twins/models/api/module_request.dart';
class FetchCategoryModules {
  final CategoryRepository _repository;
  FetchCategoryModules(this._repository);
  Future<Either<AppException, List<GeniusModule>>> call(String categoryId) {
    return _repository.fetchCategoryModules(categoryId);
  }
}
---
Path: /lib/features/tts/data/datasources/tts_datasource.dart

import 'package:dio/dio.dart';
class TTSDataSource {
  final Dio dio;
  TTSDataSource(this.dio);
  Future<List<int>?> getAudioFromText(String text, String characterId) async {
    try {
      String url =
          '/content/tts?text=$text&characterId=$characterId&emotion=happiness&emotion_level=2&pitch=100&speed=100&volume=100';
      var response = await dio.get(
        url,
        options: Options(responseType: ResponseType.bytes),
      );
      return response.data;
    } catch (e) {
      return null;
    }
  }
  Future<String?> getTranslation(String text) async {
    CancelToken getTranslationToken = CancelToken();
    try {
      getTranslationToken.cancel();
      getTranslationToken = CancelToken();
      String url = '/content/translate?text=$text';
      var response = await dio.get(
        url,
        cancelToken: getTranslationToken,
      );
      return response.data['translation'];
    } catch (e) {
      return null;
    }
  }
}
---
Path: /lib/features/tts/data/repositories/tts_repository_impl.dart

import 'package:flutter/material.dart';
import '../../domain/repositories/tts_repository.dart';
import '../datasources/tts_datasource.dart';
class TTSRepositoryImpl implements TTSRepository {
  final TTSDataSource _dataSource;
  TTSRepositoryImpl(this._dataSource);
  @override
  Future<List<int>?> getAudioFromText(String text, String characterId) {
    try {
      return _dataSource.getAudioFromText(text, characterId);
    } catch (e) {
      debugPrint("Error in TTSRepositoryImpl.getAudioFromText: $e");
      return Future.value(null);
    }
  }
  @override
  Future<String?> getTranslation(String text) {
    try {
      return _dataSource.getTranslation(text);
    } catch (e) {
      debugPrint("Error in TTSRepositoryImpl.getTranslation: $e");
      return Future.value(null);
    }
  }
}
---
Path: /lib/features/tts/domain/repositories/tts_repository.dart

abstract class TTSRepository {
  Future<List<int>?> getAudioFromText(String text, String characterId);
  Future<String?> getTranslation(String text);
}
---
Path: /lib/features/tts/domain/providers/tts_client_provider.dart

import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:twins/features/tts/data/datasources/tts_datasource.dart';
import 'package:twins/features/tts/data/repositories/tts_repository_impl.dart';
import 'package:twins/features/tts/domain/repositories/tts_repository.dart';
import 'package:twins/features/tts/domain/usecases/get_audio_from_text_use_case.dart';
import 'package:twins/features/tts/domain/usecases/get_translation_use_case.dart';
import 'package:twins/providers/dio_client_provider.dart';
part 'tts_client_provider.g.dart';
@riverpod
TTSDataSource ttsDataSource(TtsDataSourceRef ref) {
  final dio = ref.read(dioClientProvider);
  return TTSDataSource(dio);
}
@riverpod
TTSRepository ttsRepository(TtsRepositoryRef ref) {
  final dataSource = ref.watch(ttsDataSourceProvider);
  return TTSRepositoryImpl(dataSource);
}
@riverpod
GetAudioFromTextUseCase getAudioFromTextUseCase(GetAudioFromTextUseCaseRef ref) {
  final repository = ref.watch(ttsRepositoryProvider);
  return GetAudioFromTextUseCase(repository);
}
@riverpod
GetTranslationUseCase getTranslationUseCase(GetTranslationUseCaseRef ref) {
  final repository = ref.watch(ttsRepositoryProvider);
  return GetTranslationUseCase(repository);
}
---
Path: /lib/features/tts/domain/usecases/get_translation_use_case.dart

import '../repositories/tts_repository.dart';
class GetTranslationUseCase {
  final TTSRepository _repository;
  GetTranslationUseCase(this._repository);
  Future<String?> call(String text) {
    return _repository.getTranslation(text);
  }
}
---
Path: /lib/features/tts/domain/usecases/get_audio_from_text_use_case.dart

import '../repositories/tts_repository.dart';
class GetAudioFromTextUseCase {
  final TTSRepository _repository;
  GetAudioFromTextUseCase(this._repository);
  Future<List<int>?> call(String text, String characterId) {
    return _repository.getAudioFromText(text, characterId);
  }
}
---
Path: /lib/widgets/never_avoid_fullscreen_area.dart

import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
class NeverAvoidFullscreenArea extends HookWidget {
  final double? height;
  final double? width;
  final bool useSafeArea;
  const NeverAvoidFullscreenArea({
    required this.child,
    this.height,
    this.width,
    this.useSafeArea = true,
  });
  final Widget child;
  @override
  Widget build(BuildContext context) {
    final media = MediaQueryData.fromWindow(WidgetsBinding.instance.window);
    final safeArea =
        height == null && width == null ? context.findAncestorWidgetOfExactType<SafeArea>() : null;
    var finalHeight = useMemoized(() => height ?? media.size.height);
    var finalWidth = useMemoized(() => width ?? media.size.width);
    if (useSafeArea && safeArea != null) {
      finalHeight -= media.padding.top;
      finalWidth -= media.padding.left + media.padding.right;
    }
    Widget content = child;
    content = SizedBox(
      height: finalHeight,
      width: finalWidth,
      child: content,
    );
    return SingleChildScrollView(
      physics: const NeverScrollableScrollPhysics(),
      child: content,
    );
  }
}
---
Path: /lib/widgets/chat_scroll_view.dart

import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/models/api/chat_request.dart';
import 'package:twins/models/api/lesson_request.dart';
import 'package:twins/style/values.dart';
import 'package:twins/widgets/chat_message_bubble.dart';
import 'package:flutter_spinkit/flutter_spinkit.dart';
class ChatScrollView extends HookWidget {
  const ChatScrollView({
    required this.characterId,
    required this.messages,
    required this.isAvatarTyping,
    this.showHelpers = false,
  });
  final String characterId;
  final List<ChatExchange> messages;
  final bool isAvatarTyping;
  final bool showHelpers;
  @override
  Widget build(BuildContext context) {
    final controller = useScrollController();
    useEffect(() {
      if (controller.hasClients) {
        controller.jumpTo(0);
      }
      return;
    }, [messages]);
    return SingleChildScrollView(
      physics: const AlwaysScrollableScrollPhysics(),
      controller: controller,
      reverse: true,
      child: Column(
        children: [
          for (final message in messages) 
            Padding(
              padding: const EdgeInsets.symmetric(
                horizontal: S.x1,
                vertical: S.half,
              ),
              child: ChatMessageBubble(
                characterId: characterId,
                showHelpers: showHelpers,
                chat: message,
                child: Text(message.Display),
              ),
            ),
          if (isAvatarTyping) 
            const Padding(
              padding: EdgeInsets.symmetric(
                horizontal: S.x1,
                vertical: S.half,
              ),
              child: ChatMessageBubble(
                chat: ChatExchange(
                    role: ChatSenderType.assistant,
                    concept: TranslatedConcept(content: ''),
                    type: ChatMessageType.message),
                characterId: null,
                child: Padding(
                  padding: EdgeInsets.all(S.half),
                  child: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      SpinKitThreeBounce(
                        color: C.GENIUS_PRIMARY,
                        size: 12,
                      ),
                    ],
                  ),
                ),
              ),
            ),
        ],
      ),
    );
  }
}
---
Path: /lib/widgets/chat_message_bubble.dart

import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:twins/features/tts/domain/providers/tts_client_provider.dart';
import 'package:twins/mixins/widget.dart';
import 'package:twins/models/api/chat_request.dart';
import 'package:twins/providers/tts_provider.dart';
import 'package:twins/services/audio_player_service.dart';
import 'package:twins/style/genius_button_style.dart';
import 'package:twins/style/values.dart';
import 'package:twins/widgets/core/genius_rounded_square_button.dart';
class TranslateDialogue extends HookConsumerWidget with DialogWidget<void> {
  TranslateDialogue({
    required this.text,
  });
  final String text;
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final loadingTranslationState = useState(false);
    useEffect(() {
      WidgetsBinding.instance.addPostFrameCallback((_) async {
        loadingTranslationState.value = true;
        await Future.delayed(const Duration(seconds: 2));
        loadingTranslationState.value = false;
      });
      return null;
    }, []);
    return Padding(
      padding: const EdgeInsets.all(S.x5),
      child: Text(text),
    );
  }
}
class ChatMessageBubble extends HookConsumerWidget {
  const ChatMessageBubble({
    required this.characterId,
    required this.chat,
    required this.child,
    this.showHelpers = false,
  });
  final String? characterId;
  final ChatExchange chat;
  final textStyle = const TextStyle(
    fontSize: 25,
  );
  final Widget child;
  final bool showHelpers;
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final loadingAudioState = useState(false);
    final loadingTranslationState = useState(false);
    final loadingTranslation = loadingTranslationState.value;
    final tts = ref.watch(ttsNotifierProvider(AudioPlayerType.INTERLOCUTOR).notifier);
    final translationState = useState<String?>(null);
    final translation = translationState.value;
    final BoxDecoration decoration;
    final TextStyle style;
    Widget Loading = const Padding(
      padding: EdgeInsets.only(top: 5, left: 5, bottom: 5, right: 7),
      child: SizedBox(
        width: 20,
        height: 20,
        child: CircularProgressIndicator(),
      ),
    );
    Future<void> playAudio() async {
      if (characterId == null) return;
      if (await tts.audioExists(chat.Display, characterId!) == false) {
        loadingAudioState.value = true;
      }
      await tts.playAudio(chat.Display, characterId!);
      loadingAudioState.value = true;
      loadingAudioState.value = false;
    }
    Future<void> displayTranslation() async {
      if (translation == null && chat.concept.translation == null) {
        loadingTranslationState.value = true;
        final getTranslationUseCase = ref.read(getTranslationUseCaseProvider);
        translationState.value = await getTranslationUseCase.call(chat.Display);
        loadingTranslationState.value = false;
      } else if (chat.concept.translation != null) {
        translationState.value = chat.concept.translation;
      }
    }
    switch (chat.role) {
      case ChatSenderType.user:
        switch (chat.type) {
          case ChatMessageType.message:
            decoration = BoxDecoration(
              gradient: C.GENIUS_WHITE_GRADIENT.withOpacity(opacityStart: 0.95, opacityEnd: 0.8),
              border: Border.all(
                color: Colors.white24,
                width: 1.0,
              ),
              borderRadius: const BorderRadius.only(
                topRight: Radius.circular(R.x3),
                topLeft: Radius.circular(R.x3),
                bottomLeft: Radius.circular(R.x3),
                bottomRight: Radius.circular(R.x1),
              ),
              boxShadow: [SHADOW_CARD],
            );
            style = textStyle.copyWith(
              color: Colors.grey.shade700,
            );
            break;
          case ChatMessageType.exerciceError:
            decoration = BoxDecoration(
              gradient: C.GENIUS_ERROR_GRADIENT.withOpacity(opacityStart: 0.8, opacityEnd: 0.7),
              border: Border.all(
                color: Colors.white24,
                width: 1.0,
              ),
              borderRadius: const BorderRadius.only(
                topRight: Radius.circular(R.x1),
                topLeft: Radius.circular(R.x4),
                bottomLeft: Radius.circular(R.x4),
                bottomRight: Radius.circular(R.x1),
              ),
              boxShadow: [SHADOW_CARD],
            );
            style = textStyle.copyWith(
              color: Colors.white,
              fontWeight: FontWeight.bold,
            );
            break;
          case ChatMessageType.error:
            decoration = BoxDecoration(
              gradient: C.GENIUS_ACCENT_GRADIENT.withOpacity(opacityStart: 0.8, opacityEnd: 0.7),
              border: Border.all(
                color: Colors.white24,
                width: 1.0,
              ),
              borderRadius: const BorderRadius.only(
                topRight: Radius.circular(R.x1),
                topLeft: Radius.circular(R.x4),
                bottomLeft: Radius.circular(R.x4),
                bottomRight: Radius.circular(R.x1),
              ),
              boxShadow: [SHADOW_CARD],
            );
            style = textStyle.copyWith(
              color: Colors.white,
              fontWeight: FontWeight.bold,
            );
            break;
        }
        break;
      case ChatSenderType.assistant:
        decoration = BoxDecoration(
          gradient: C.GENIUS_PRIMARY_GRADIENT.withOpacity(opacityStart: 0.8, opacityEnd: 0.7),
          border: Border.all(
            color: Colors.white24,
            width: 1.0,
          ),
          borderRadius: const BorderRadius.only(
            topRight: Radius.circular(R.x4),
            topLeft: Radius.circular(R.x1),
            bottomLeft: Radius.circular(R.x4),
            bottomRight: Radius.circular(R.x4),
          ),
          boxShadow: [SHADOW_CARD],
        );
        style = textStyle.copyWith(
          color: Colors.white,
        );
        break;
    }
    Widget content = child;
    if (showHelpers && chat.role == ChatSenderType.assistant) {
      content = Column(
        mainAxisSize: MainAxisSize.min,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          child,
        ],
      );
    }
    final bubble = Container(
      margin: const EdgeInsets.only(bottom: S.x1),
      padding: const EdgeInsets.symmetric(
        horizontal: S.x4,
        vertical: S.x2,
      ),
      decoration: decoration,
      child: DefaultTextStyle(
        style: style,
        child: content,
      ),
    );
    switch (chat.role) {
      case ChatSenderType.user:
        return Row(
          mainAxisAlignment: MainAxisAlignment.end,
          children: [
            const Spacer(),
            Flexible(
              flex: 2,
              child: bubble,
            ),
          ],
        );
      case ChatSenderType.assistant:
        return Row(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            Flexible(
              flex: 4,
              child: bubble,
            ),
            const SizedBox(width: S.x2),
            if (showHelpers)
              Column(
                mainAxisAlignment: MainAxisAlignment.center,
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisSize: MainAxisSize.min,
                children: [
                  GeniusRoundedSquareButton(
                    size: 45,
                    radius: 10,
                    onTap: playAudio,
                    style: GeniusButtonStyle.greyLight,
                    child: const Icon(
                      Icons.volume_up,
                      size: 25,
                    ),
                  ),
                  const SizedBox(
                    width: S.x1,
                  ),
                  if (loadingTranslation) Loading
                ],
              ),
            const Spacer(),
          ],
        );
    }
  }
}
---
Path: /lib/widgets/text_widgets/input_text_field_widget.dart

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:twins/widgets/text_widgets/validator.dart';
import '../../components/app_text_style.dart';
import '../../components/colors.dart';
class EmailWidget extends StatelessWidget {
  const EmailWidget({
    Key? key,
    this.fieldKey,
    this.hintText,
    this.style,
    this.prefixIcon,
    required this.controller,
    this.borderColor,
    this.textInputAction,
    this.keyboardType,
    this.textStyle,
    this.filledColor,
    this.enabled,
    this.focusNode,
    this.validator,
  }) : super(key: key);
  final Key? fieldKey;
  final String? hintText;
  final TextStyle? style;
  final TextStyle? textStyle;
  final Widget? prefixIcon;
  final TextEditingController? controller;
  final FocusNode? focusNode;
  final TextInputAction? textInputAction;
  final bool? enabled;
  final TextInputType? keyboardType;
  final Color? filledColor;
  final FormFieldValidator<String?>? validator;
  final Color? borderColor;
  @override
  Widget build(BuildContext context) {
    return textFormField(
        fieldKey: fieldKey,
        hintText: hintText,
        enabled: enabled,
        focusNode: focusNode,
        controller: controller,
        textInputAction: textInputAction,
        keyboardType: TextInputType.emailAddress,
        borderColor: borderColor,
        filledColor: filledColor,
        validator: validator ??
            (value) => Validators.validateEmail(
                  value!.trim(),
                ));
  }
}
class PasswordWidget extends StatefulWidget {
  final Key? fieldKey;
  final int? maxLength;
  final String? hintText;
  final FormFieldValidator<String?>? validator;
  final TextEditingController? controller;
  final FocusNode? focusNode;
  final TextInputAction? textInputAction;
  const PasswordWidget({
    Key? key,
    required this.controller,
    this.fieldKey,
    this.maxLength,
    this.hintText,
    this.validator,
    this.focusNode,
    this.textInputAction,
  }) : super(key: key);
  @override
  PasswordWidgetState createState() => PasswordWidgetState();
}
class PasswordWidgetState extends State<PasswordWidget> {
  bool _obscureText = true;
  @override
  Widget build(BuildContext context) {
    return textFormField(
        fieldKey: widget.fieldKey,
        hintText: widget.hintText,
        obscureText: _obscureText,
        focusNode: widget.focusNode,
        controller: widget.controller,
        textInputAction: widget.textInputAction,
        maxLength: widget.maxLength,
        maxLines: 1,
        suffixIcon: GestureDetector(
          onTap: () {
            setState(() {
              _obscureText = !_obscureText;
            });
          },
          child: Icon(
            _obscureText ? Icons.visibility_outlined : Icons.visibility_off_outlined,
            color: primaryWhite,
          ),
        ),
        validator:
            widget.validator ?? (value) => Validators.validateRequired(value!.trim(), 'Password')
        );
  }
}
class NumberWidget extends StatelessWidget {
  const NumberWidget({
    Key? key,
    this.fieldKey,
    this.hintText,
    this.validator,
    this.prefixIcon,
    required this.controller,
    this.maxLength,
    this.focusNode,
    this.autofocus,
    this.style,
    this.textInputAction,
    this.textAlign = TextAlign.left,
    this.inputFormatters,
    this.textStyle,
    this.keyboardType,
    this.borderColor,
    this.fillColor,
    this.enabled,
  }) : super(key: key);
  final Key? fieldKey;
  final String? hintText;
  final List<TextInputFormatter?>? inputFormatters;
  final FormFieldValidator<String?>? validator;
  final TextEditingController? controller;
  final int? maxLength;
  final bool? enabled;
  final FocusNode? focusNode;
  final bool? autofocus;
  final TextStyle? style;
  final TextStyle? textStyle;
  final TextInputAction? textInputAction;
  final TextAlign textAlign;
  final TextInputType? keyboardType;
  final Color? fillColor;
  final Widget? prefixIcon;
  final Color? borderColor;
  @override
  Widget build(BuildContext context) {
    return textFormField(
      keyboardType: keyboardType ?? TextInputType.emailAddress,
      fieldKey: fieldKey,
      hintText: hintText,
      focusNode: focusNode,
      enabled: enabled,
      borderRaduis: 10,
      hintStyle: style ?? AppTextStyle.normalRegular12.copyWith(color: greyColor),
      textStyle: textStyle ?? AppTextStyle.normalRegular12,
      controller: controller,
      style: style,
      prefixIcon: prefixIcon,
      filledColor: fillColor,
      validator: validator,
      textAlign: textAlign,
      maxLength: maxLength,
      borderColor: borderColor,
      textInputAction: textInputAction,
    );
  }
}
class TextFormFieldWidget extends StatelessWidget {
  const TextFormFieldWidget({
    Key? key,
    this.fieldKey,
    this.hintText,
    this.textStyle,
    this.hintStyle,
    this.validator,
    this.prefixIcon,
    required this.controller,
    this.focusNode,
    this.maxLines,
    this.maxLength,
    this.suffixIcon,
    this.onTap,
    this.onChanged,
    this.onFieldSubmitted,
    this.textInputAction,
    this.keyboardType,
    this.borderColor,
    this.filledColor,
    this.enabled,
    this.readonly,
    this.scropadding,
    this.textAlign = TextAlign.left,
    this.contentPadding,
  }) : super(key: key);
  final EdgeInsets? scropadding;
  final Key? fieldKey;
  final bool? readonly;
  final String? hintText;
  final TextStyle? textStyle;
  final TextStyle? hintStyle;
  final Color? borderColor;
  final Color? filledColor;
  final FormFieldValidator<String?>? validator;
  final ValueChanged<String?>? onFieldSubmitted;
  final ValueChanged<String?>? onChanged;
  final Widget? prefixIcon;
  final Widget? suffixIcon;
  final TextEditingController? controller;
  final FocusNode? focusNode;
  final GestureTapCallback? onTap;
  final int? maxLines;
  final int? maxLength;
  final TextInputAction? textInputAction;
  final TextInputType? keyboardType;
  final TextAlign textAlign;
  final bool? enabled;
  final EdgeInsetsGeometry? contentPadding;
  @override
  Widget build(BuildContext context) {
    return textFormField(
      fieldKey: fieldKey,
      focusNode: focusNode,
      hintText: hintText,
      scropadding: scropadding,
      controller: controller,
      borderRaduis: 10,
      keyboardType: keyboardType ?? TextInputType.text,
      validator: validator,
      prefixIcon: prefixIcon,
      suffixIcon: suffixIcon,
      maxLength: maxLength,
      maxLines: maxLines,
      enabled: enabled ?? true,
      textInputAction: textInputAction,
      textAlign: textAlign,
      onTap: onTap,
      onFieldSubmitted: onFieldSubmitted,
      onChanged: onChanged,
      contentPadding: contentPadding ?? const EdgeInsets.fromLTRB(20, 15, 10, 15),
      textStyle: textStyle,
      hintStyle: hintStyle ?? AppTextStyle.normalRegular12.copyWith(color: greyColor),
      borderColor: borderColor,
      filledColor: filledColor,
    );
  }
}
class OutlineTextFormFieldWidget extends StatelessWidget {
  const OutlineTextFormFieldWidget({
    Key? key,
    this.fieldKey,
    this.hintText,
    this.enabled,
    this.textStyle,
    this.hintStyle,
    this.validator,
    this.prefixIcon,
    required this.controller,
    this.focusNode,
    this.maxLines,
    this.maxLength,
    this.suffixIcon,
    this.onTap,
    this.onChanged,
    this.onFieldSubmitted,
    this.textInputAction,
    this.keyboardType,
    this.textAlign = TextAlign.left,
  }) : super(key: key);
  final Key? fieldKey;
  final String? hintText;
  final TextStyle? textStyle;
  final TextStyle? hintStyle;
  final FormFieldValidator<String?>? validator;
  final ValueChanged<String?>? onFieldSubmitted;
  final ValueChanged<String?>? onChanged;
  final Widget? prefixIcon;
  final Widget? suffixIcon;
  final TextEditingController? controller;
  final FocusNode? focusNode;
  final GestureTapCallback? onTap;
  final int? maxLines;
  final int? maxLength;
  final TextInputAction? textInputAction;
  final TextInputType? keyboardType;
  final TextAlign textAlign;
  final bool? enabled;
  @override
  Widget build(BuildContext context) {
    return textFormField(
      fieldKey: fieldKey,
      focusNode: focusNode,
      enabled: enabled,
      hintText: hintText,
      controller: controller,
      keyboardType: TextInputType.text,
      validator: validator,
      prefixIcon: prefixIcon,
      suffixIcon: suffixIcon,
      maxLength: maxLength,
      maxLines: maxLines,
      textInputAction: textInputAction,
      textAlign: textAlign,
      onTap: onTap,
      onFieldSubmitted: onFieldSubmitted,
      onChanged: onChanged,
      textStyle: textStyle,
      hintStyle: hintStyle,
    );
  }
}
class TextAreaWidget extends StatelessWidget {
  const TextAreaWidget({
    Key? key,
    this.fieldKey,
    this.hintText,
    this.validator,
    required this.controller,
    this.focusNode,
    this.maxLines,
    this.maxLength,
    this.filledColor,
    this.hintStyle,
    this.enabled,
  }) : super(key: key);
  final Key? fieldKey;
  final bool? enabled;
  final int? maxLines;
  final int? maxLength;
  final String? hintText;
  final TextStyle? hintStyle;
  final Color? filledColor;
  final FormFieldValidator<String?>? validator;
  final TextEditingController? controller;
  final FocusNode? focusNode;
  @override
  Widget build(BuildContext context) {
    return textFormField(
        keyboardType: TextInputType.text,
        focusNode: focusNode,
        enabled: enabled,
        fieldKey: fieldKey,
        controller: controller,
        validator: validator,
        maxLines: maxLines,
        hintText: hintText,
        hintStyle: AppTextStyle.normalSemiBold14,
        textStyle: AppTextStyle.normalSemiBold14,
        filledColor: barrierBlackColor,
        borderColor: Colors.transparent);
  }
}
class SearchBar extends StatelessWidget {
  final String? hintText;
  final Function(String?)? onFieldSubmit;
  final Function(String?)? onFieldChange;
  final Function()? onSubmit;
  final Widget? prefixIcon;
  final IconData? suffixIcon;
  TextEditingController? controller;
  SearchBar({
    Key? key,
    this.hintText,
    this.onFieldSubmit,
    this.onSubmit,
    this.onFieldChange,
    this.prefixIcon,
    this.suffixIcon,
    required this.controller,
  }) : super(key: key);
  @override
  Widget build(BuildContext context) {
    return TextFormFieldWidget(
      controller: controller,
      onFieldSubmitted: onFieldSubmit,
      hintText: hintText ?? "Find restaurant or coffeeshop",
      hintStyle: AppTextStyle.normalRegular14,
      prefixIcon: prefixIcon ??
          IconButton(
            icon: const Icon(
              CupertinoIcons.search,
              color: primaryWhite,
            ),
            splashRadius: 5,
            onPressed: onSubmit,
          ),
      onChanged: onFieldChange,
      borderColor: Colors.transparent,
      filledColor: lightBlackColor,
    );
  }
}
TextFormField textFormField({
  final Key? fieldKey,
  final String? hintText,
  final String? labelText,
  final String? helperText,
  final String? initialValue,
  final int? errorMaxLines,
  final int? maxLines,
  final int? maxLength,
  final double? borderRaduis = 0,
  final bool? enabled,
  final bool autofocus = false,
  final bool obscureText = false,
  final Color? filledColor,
  final Color? cursorColor,
  final Color? borderColor,
  final Widget? prefixIcon,
  final Widget? suffixIcon,
  final FocusNode? focusNode,
  final TextStyle? style,
  final TextStyle? textStyle,
  final TextStyle? hintStyle,
  final TextAlign textAlign = TextAlign.left,
  final TextEditingController? controller,
  final List<TextInputFormatter>? inputFormatters,
  final TextInputAction? textInputAction,
  final TextInputType? keyboardType,
  final TextCapitalization textCapitalization = TextCapitalization.none,
  final GestureTapCallback? onTap,
  final FormFieldSetter<String?>? onSaved,
  final FormFieldValidator<String?>? validator,
  final ValueChanged<String?>? onChanged,
  final ValueChanged<String?>? onFieldSubmitted,
  final BorderSide? border,
  final EdgeInsetsGeometry? contentPadding,
  final bool? readonly,
  final EdgeInsets? scropadding,
}) {
  return TextFormField(
    scrollPadding: scropadding ?? EdgeInsets.zero,
    key: fieldKey,
    readOnly: readonly ?? false,
    controller: controller,
    focusNode: focusNode,
    maxLines: maxLines,
    initialValue: initialValue,
    keyboardType: keyboardType,
    textCapitalization: textCapitalization,
    obscureText: obscureText,
    enabled: enabled,
    validator: validator,
    maxLength: maxLength,
    textInputAction: textInputAction,
    inputFormatters: inputFormatters,
    onTap: onTap,
    onSaved: onSaved,
    onChanged: onChanged,
    onFieldSubmitted: onFieldSubmitted,
    autocorrect: true,
    autofocus: autofocus,
    textAlign: textAlign,
    cursorColor: primaryBlack,
    style: textStyle ?? AppTextStyle.normalRegular14,
    decoration: InputDecoration(
      prefixIcon: prefixIcon,
      contentPadding: contentPadding ?? const EdgeInsets.fromLTRB(20, 18, 10, 18),
      errorBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(borderRaduis!),
        borderSide: border ?? BorderSide.none,
      ),
      focusedBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(30),
        borderSide: BorderSide(width: 1, color: grey.withOpacity(.6)),
      ),
      enabledBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(30),
        borderSide: BorderSide(width: 1, color: grey.withOpacity(.6)),
      ),
      border: OutlineInputBorder(
        borderRadius: BorderRadius.circular(30),
        borderSide: BorderSide(width: 2.5, color: grey.withOpacity(.6)),
      ),
      errorMaxLines: 5,
      fillColor: filledColor ?? primaryWhite,
      filled: true,
      hintStyle: hintStyle ?? AppTextStyle.normalSemiBold14.copyWith(color: greyColor),
      hintText: hintText,
      enabled: enabled ?? true,
      suffixIcon: suffixIcon,
      labelText: labelText,
      helperText: helperText,
    ),
  );
}
TextFormField outlineTextField({
  final Key? fieldKey,
  final String? hintText,
  final String? labelText,
  final String? helperText,
  final String? initialValue,
  final int? errorMaxLines,
  final int? maxLines,
  final int? maxLength,
  final bool? enabled,
  final bool autofocus = false,
  final bool obscureText = false,
  final Color? filledColor,
  final Color? cursorColor,
  final Widget? prefixIcon,
  final Widget? suffixIcon,
  final FocusNode? focusNode,
  final TextStyle? style,
  final TextStyle? textStyle,
  final TextStyle? hintStyle,
  final TextAlign textAlign = TextAlign.left,
  final TextEditingController? controller,
  final List<TextInputFormatter>? inputFormatters,
  final TextInputAction? textInputAction,
  final TextInputType? keyboardType,
  final TextCapitalization textCapitalization = TextCapitalization.none,
  final GestureTapCallback? onTap,
  final FormFieldSetter<String?>? onSaved,
  final FormFieldValidator<String?>? validator,
  final ValueChanged<String?>? onChanged,
  final ValueChanged<String?>? onFieldSubmitted,
}) {
  return TextFormField(
    key: fieldKey,
    controller: controller,
    focusNode: focusNode,
    maxLines: maxLines,
    initialValue: initialValue,
    keyboardType: keyboardType,
    textCapitalization: textCapitalization,
    obscureText: obscureText,
    enabled: enabled,
    validator: validator,
    maxLength: maxLength,
    textInputAction: textInputAction,
    inputFormatters: inputFormatters,
    onTap: onTap,
    onSaved: onSaved,
    onChanged: onChanged,
    onFieldSubmitted: onFieldSubmitted,
    autocorrect: true,
    autofocus: autofocus,
    textAlign: textAlign,
    cursorColor: regularGrey,
    cursorHeight: 20,
    style: textStyle ?? AppTextStyle.normalRegular12,
    decoration: InputDecoration(
      contentPadding: const EdgeInsets.all(10),
      border: outlineBorderDecoration,
      enabledBorder: outlineBorderDecoration,
      focusedBorder: outlineBorderDecoration,
      errorBorder: const OutlineInputBorder(
        borderSide: BorderSide(color: red),
        borderRadius: BorderRadius.zero,
      ),
      hintText: hintText,
      hintStyle: hintStyle ?? AppTextStyle.normalRegular12,
      prefixIcon: prefixIcon,
      suffixIcon: suffixIcon,
      labelText: labelText,
      helperText: helperText,
    ),
  );
}
OutlineInputBorder outlineBorderDecoration = const OutlineInputBorder(
  borderSide: BorderSide(color: darkGreyWhite, width: 1.2),
  borderRadius: BorderRadius.zero,
);
---
Path: /lib/widgets/text_widgets/validator.dart

class Validators {
  static String? validateDigits(String value, String type, int length) {
    String patttern = r'(^[0-9]*$)';
    RegExp regExp = RegExp(patttern);
    if (value.isEmpty) {
      return "$type is Required";
    } else if (value.length != length) {
      return "$type must be of $length digits";
    } else if (!regExp.hasMatch(value)) {
      return "$type must be a number. Example: 100";
    }
    return null;
  }
  static String? validateContact(String value, String type) {
    if (value.isNotEmpty) {
      if (value.length < 11 || value.length > 20) {
        return "Are you sure that you've entered your phone correctly?";
      }
    }
    return null;
  }
  static String? validateAmount(int? value, String type, String type2) {
    if (value == null || value < 10) {
      return type;
    } else if (value > 200) {
      return type2;
    } else {
      return null;
    }
  }
  static String? validateCharacter(String value, String type, int length) {
    String patttern = r'(^[a-zA-Z0-9]{8,16}$)';
    RegExp regExp = RegExp(patttern);
    if (value.isEmpty) {
      return "$type is Required";
    } else if (value.length != length) {
      return "$type must be of $length character";
    } else if (!regExp.hasMatch(value)) {
      return "$type is invalid!";
    }
    return null;
  }
  static String? validateRequired(String value, String type) {
    if (value.isEmpty) {
      return "$type is required";
    }
    return null;
  }
  static String? validateMobile(String value) {
    String patttern = r'(^\(?([0-9]{3})\)?[-.●]?([0-9]{3})[-.●]?([0-9]{4,5})$)';
    RegExp regExp = RegExp(patttern);
    if (value.isEmpty) {
      return "Phone number is Required";
    } else if (!regExp.hasMatch(value)) {
      return "Phone number is not valid";
    }
    return null;
  }
  static String? validateEmail(String? value) {
    String pattern =
        r'^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$';
    RegExp regExp = RegExp(pattern);
    if (value == null) {
      return "Email is Required";
    } else if (!regExp.hasMatch(value)) {
      return "Invalid  Email";
    } else {
      return null;
    }
  }
  static String? validatePaypalEmail(String? value) {
    String pattern =
        r'^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$';
    RegExp regExp = RegExp(pattern);
    if (value == null) {
      return "Paypal Email is Required";
    } else if (!regExp.hasMatch(value)) {
      return "Invalid Paypal Email";
    } else {
      return null;
    }
  }
  static String? validateFname(String? value, String type, String type2) {
    String pattern = r'^[a-zA-Z]{2,50}$';
    RegExp regExp = RegExp(pattern);
    if (value == null || value.length <= 1) {
      return type;
    } else if (!regExp.hasMatch(value)) {
      return type2;
    } else {
      return null;
    }
  }
  static String? validateText({String? value, String? text, int? maxLen}) {
    if (value.toString().isEmpty) {
      return "$text is required";
    } else {
      if (value.toString().isNotEmpty) {
        if (value.toString().length < 2) {
          return "$text must have at least 2 characters";
        } else if (maxLen != null && value.toString().length > maxLen) {
          return "You have reached your maximum limit of characters allowed";
        } else {
          return null;
        }
      }
    }
    return null;
  }
  static String? validatePassword(String value) {
    String pattern =
        r'^.*(?=.{8,})((?=.*[!@#$%^&*()\-_=+{};:,<.>]){1})(?=.*\d)((?=.*[a-z]){1})((?=.*[A-Z]){1}).*$';
    RegExp regExp = RegExp(pattern);
    if (value.isEmpty) {
      return "Password is Required";
    } else if (!regExp.hasMatch(value)) {
      return "The password must be at least 8 characters long and contain a mixture of both uppercase and lowercase letters, at least one number and one special character (e.g.,! @ # ?).";
    } else {
      return null;
    }
  }
  String? validatepass(String value) {
    if (value.isEmpty) {
      return 'Please enter Password';
    }
    if (value.length < 9) {
      return 'Must be more than 8 charater';
    } else {
      return null;
    }
  }
  String? validateBusinessMobile(String value) {
    String patttern = r'(^[0-9]*$)';
    RegExp regExp = RegExp(patttern);
    if (value.isEmpty) {
      return "Mobile is Required";
    } else if (value.length != 10) {
      return "Mobile number must 10 digits";
    } else if (!regExp.hasMatch(value)) {
      return "Mobile Number must be digits";
    }
    return null;
  }
  String? validateestablishedyear(String value) {
    var date = DateTime.now();
    int currentYear = date.year;
    int userinputValue = 0;
    String patttern = r'(^[0-9]*$)';
    RegExp regExp = RegExp(patttern);
    if (!regExp.hasMatch(value)) {
      return "Year must be number only";
    } else if (value.isEmpty) {
      return "Established Year is Required";
    } else {
      userinputValue = int.parse(value);
    }
    if (userinputValue < 1850 || userinputValue > currentYear) {
      return "Year must be between 1850 and $currentYear";
    }
    return null;
  }
  String? validateLicenseno(String value) {
    if (value.isEmpty) {
      return "License No is Required";
    }
    return null;
  }
  String? validatenumberofemployee(String value) {
    String patttern = r'(^[1-9]\d*(\.\d+)?$)';
    RegExp regExp = RegExp(patttern);
    if (value.isEmpty) {
      return "Number of employee is Required";
    } else if (value.length > 4) {
      return "Number of employee is not more than 9999";
    } else if (!regExp.hasMatch(value)) {
      return "Number of employee must be digits";
    }
    return null;
  }
  String? validatedate(String value) {
    String patttern = r'([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))';
    RegExp regExp = RegExp(patttern);
    if (value.isEmpty) {
      return "Date is Required";
    } else if (!regExp.hasMatch(value)) {
      return "Please enter valid date";
    }
    return null;
  }
  String? validateLicenseissuingauthority(String value) {
    String patttern = r'(^[a-zA-Z ]*$)';
    RegExp regExp = RegExp(patttern);
    if (value.isEmpty) {
      return "License Issuing Authority is Required";
    } else if (!regExp.hasMatch(value)) {
      return "License Issuing Authority must be a-z and A-Z";
    }
    return null;
  }
}
---
Path: /lib/widgets/toggle/toggle_global_sound.dart

import 'package:flutter/material.dart';
import 'package:gap/gap.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:twins/notifiers/setting_notifier.dart';
import 'package:twins/style/values.dart';
class ToggleGlobalSound extends HookConsumerWidget {
  const ToggleGlobalSound({Key? key}) : super(key: key);
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final globalSoundEnabled = ref.watch(settingNotifierProvider).globalSoundEnabled;
    const enabledBackgroundColor = Color.fromARGB(255, 228, 228, 228);
    return Container(
      margin: const EdgeInsets.only(bottom: 10.0),
      padding: const EdgeInsets.symmetric(horizontal: 10.0, vertical: 5.0),
      clipBehavior: Clip.none,
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(100.0),
        boxShadow: [
          const BoxShadow(
            color: Color.fromARGB(50, 0, 0, 0),
            blurRadius: 2.0,
            spreadRadius: 0.2,
            offset: Offset(0.0, 2),
          ),
        ],
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          IconButton.filled(
            style: ButtonStyle(
              backgroundColor: MaterialStateProperty.all(
                  globalSoundEnabled ? enabledBackgroundColor : Colors.transparent),
              shape: MaterialStatePropertyAll<RoundedRectangleBorder>(
                RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(10.0),
                ),
              ),
            ),
            onPressed: () {
              ref.read(settingNotifierProvider.notifier).setGlobalSoundEnabled(true);
            },
            padding: const EdgeInsets.all(0),
            iconSize: 30,
            color: C.GENIUS_PRIMARY,
            icon: const Icon(Icons.volume_up),
          ),
          const Gap(S.x2),
          IconButton.filled(
            style: ButtonStyle(
              backgroundColor: MaterialStateProperty.all(
                  !globalSoundEnabled ? enabledBackgroundColor : Colors.transparent),
              shape: MaterialStatePropertyAll<RoundedRectangleBorder>(
                RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(10.0),
                ),
              ),
            ),
            onPressed: () {
              ref.read(settingNotifierProvider.notifier).setGlobalSoundEnabled(false);
            },
            padding: const EdgeInsets.all(0),
            iconSize: 30,
            color: const Color(0xFFFF7959),
            icon: const Icon(Icons.volume_off),
          ),
        ],
      ),
    );
  }
}
---
Path: /lib/widgets/dialogs/like_dialog.dart

import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/mixins/widget.dart';
import 'package:twins/services/like_genius_service.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:twins/style/genius_button_style.dart';
import 'package:twins/style/values.dart';
import 'package:twins/widgets/core/genius_button.dart';
import 'package:twins/widgets/dialogs/survey_dialog.dart';
class LikeDialog extends HookConsumerWidget with DialogWidget {
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final aggreedState = useState(false);
    void onDismiss({bool agreed = false}) {
      aggreedState.value = agreed;
      dismiss();
    }
    return WillPopScope(
      onWillPop: () async {
        if (aggreedState.value == true) {
          await SurveyDialog(autoOpened: true).show();
        } else {
          ref.read(likeGeniusServiceProvider.notifier).reset();
        }
        return true;
      },
      child: Card(
        child: Padding(
          padding: EdgeInsets.symmetric(vertical: 8.0, horizontal: S.x(5)),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Text(
                "Do you like Genius?",
                style:
                    Theme.of(context).textTheme.titleLarge!.copyWith(fontWeight: FontWeight.w900),
              ),
              SizedBox(height: S.x(2)),
              const Padding(
                padding: EdgeInsets.symmetric(horizontal: 0.0),
                child: Text(
                  'All we want is your honest feedback to improve :)',
                  textAlign: TextAlign.center,
                ),
              ),
              SizedBox(height: S.x(5)),
              Image.asset(
                'assets/images/robot-face.png',
                height: S.x(10),
              ),
              SizedBox(height: S.x(2)),
              Row(
                children: [
                  Expanded(
                    child: GeniusButton(
                      expanded: true,
                      padding: EdgeInsets.symmetric(horizontal: S.x(3), vertical: S.x(1)),
                      style: GeniusButtonStyle.dark,
                      onPressed: () {
                        onDismiss();
                      },
                      child: const Text(
                        "No",
                        style: TextStyle(
                          color: Colors.white,
                          fontSize: 20,
                          fontWeight: FontWeight.w700,
                        ),
                      ),
                    ),
                  ),
                  SizedBox(width: S.x(5)),
                  Expanded(
                    child: GeniusButton(
                      expanded: true,
                      padding: EdgeInsets.symmetric(horizontal: S.x(3), vertical: S.x(1)),
                      style: GeniusButtonStyle.dark,
                      onPressed: () async {
                        onDismiss(agreed: true);
                      },
                      child: const Text(
                        "Yes",
                        style: TextStyle(
                          color: Colors.white,
                          fontSize: 20,
                          fontWeight: FontWeight.w700,
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}
---
Path: /lib/widgets/dialogs/leave_exercice_dialog.dart

import 'package:flutter/material.dart';
import 'package:twins/mixins/widget.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/style/genius_button_style.dart';
import 'package:twins/style/values.dart';
import 'package:twins/widgets/core/genius_button.dart';
class LeaveExerciceDialog extends HookWidget with BottomSheetWidget<bool> {
  @override
  Widget build(BuildContext context) {
    return Card(
      child: Padding(
        padding: EdgeInsets.symmetric(vertical: 8.0, horizontal: S.x(5)) +
            EdgeInsets.only(bottom: S.x(4)),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Image.asset('assets/images/robot.png'),
            Text(
              "待って...行かないで！",
              style: Theme.of(context).textTheme.titleLarge!.copyWith(fontWeight: FontWeight.w900),
            ),
            SizedBox(height: S.x(2)),
            const Padding(
              padding: EdgeInsets.symmetric(horizontal: 0.0),
              child: Text(
                'いい調子で進んでるね！でも今やめると、ここまでの進捗がセーブされないよ。',
                textAlign: TextAlign.center,
              ),
            ),
            SizedBox(height: S.x(5)),
            GeniusButton(
              padding: EdgeInsets.symmetric(horizontal: S.x(8), vertical: S.x(4)),
              style: GeniusButtonStyle.dark,
              onPressed: () {
                dismiss(true);
              },
              child: const Text(
                "今すぐレッスン",
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 20,
                  fontWeight: FontWeight.w700,
                ),
              ),
            ),
            const SizedBox(height: 10),
            TextButton(
              onPressed: () {
                dismiss(false);
              },
              child: const Text(
                "レッスン終了",
                style: TextStyle(
                  color: Colors.black,
                  fontSize: 22,
                  fontWeight: FontWeight.w900,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
---
Path: /lib/widgets/dialogs/survey_dialog.dart

import 'package:flutter/material.dart';
import 'package:twins/mixins/widget.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/services/like_genius_service.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:twins/style/genius_button_style.dart';
import 'package:twins/style/values.dart';
import 'package:twins/widgets/core/genius_button.dart';
import 'package:url_launcher/url_launcher_string.dart';
class SurveyDialog extends HookConsumerWidget with DialogWidget {
  final bool autoOpened;
  SurveyDialog({this.autoOpened = false});
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final filledSurvey = useState(false);
    void onDismiss({bool filled = false}) {
      filledSurvey.value = filled;
      dismiss();
    }
    return WillPopScope(
      onWillPop: () async {
        if (!autoOpened) {
          return true;
        }
        if (filledSurvey.value == false) {
          ref.read(likeGeniusServiceProvider.notifier).reset();
        } else {
          ref.read(likeGeniusServiceProvider.notifier).saveFilled();
        }
        return true;
      },
      child: Card(
        child: Padding(
          padding: EdgeInsets.symmetric(vertical: 8.0, horizontal: S.x(5)),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Image.asset('assets/images/robot.png'),
              Text(
                "Help us improve!",
                style:
                    Theme.of(context).textTheme.titleLarge!.copyWith(fontWeight: FontWeight.w900),
              ),
              SizedBox(height: S.x(2)),
              const Padding(
                padding: EdgeInsets.symmetric(horizontal: 0.0),
                child: Text(
                  'We would be very grateful if you could fill the survey bellow and give us your impressions.',
                  textAlign: TextAlign.center,
                ),
              ),
              SizedBox(height: S.x(5)),
              GeniusButton(
                padding: EdgeInsets.symmetric(horizontal: S.x(8), vertical: S.x(4)),
                style: GeniusButtonStyle.dark,
                onPressed: () async {
                  await launchUrlString('https:
                  onDismiss(filled: true);
                },
                child: const Text(
                  "Take the survey",
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 20,
                    fontWeight: FontWeight.w700,
                  ),
                ),
              ),
              const SizedBox(height: 10),
              TextButton(
                onPressed: () {
                  onDismiss();
                },
                child: const Text(
                  "Not now",
                  style: TextStyle(
                    color: Colors.black,
                    fontSize: 22,
                    fontWeight: FontWeight.w900,
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
---
Path: /lib/widgets/dialogs/missed_exercises_dialog.dart

import 'package:flutter/material.dart';
import 'package:gap/gap.dart';
import 'package:twins/mixins/widget.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/style/genius_button_style.dart';
import 'package:twins/style/values.dart';
import 'package:twins/widgets/core/genius_button.dart';
class MissedExercisesDialog extends HookWidget with DialogWidget<bool> {
  MissedExercisesDialog();
  @override
  Widget build(BuildContext context) {
    void onDismiss(bool accepted) {
      dismiss(accepted);
    }
    return Card(
      child: Padding(
        padding: EdgeInsets.symmetric(vertical: 8.0, horizontal: S.x(5)),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Image.asset('assets/images/robot.png'),
            Text(
              "You've missed some exercises!",
              style: Theme.of(context).textTheme.titleLarge!.copyWith(fontWeight: FontWeight.w900),
            ),
            SizedBox(height: S.x(2)),
            const Padding(
              padding: EdgeInsets.symmetric(horizontal: 0.0),
              child: Text(
                'Let\'s try again to improve your skills!',
                textAlign: TextAlign.center,
              ),
            ),
            SizedBox(height: S.x(5)),
            GeniusButton(
              padding: EdgeInsets.symmetric(horizontal: S.x(8), vertical: S.x(4)),
              style: GeniusButtonStyle.dark,
              onPressed: () async {
                onDismiss(true);
              },
              child: const Text(
                "Retry missed exercises",
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 20,
                  fontWeight: FontWeight.w700,
                ),
              ),
            ),
            const Gap(10),
          ],
        ),
      ),
    );
  }
}
---
Path: /lib/widgets/chat/chat_area.dart

import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/style/genius_button_style.dart';
import 'package:twins/style/values.dart';
import 'package:twins/widgets/chat/chat_text_field.dart';
import 'package:twins/widgets/chat/speech_to_text_button.dart';
import 'package:twins/widgets/core/genius_rounded_square_button.dart';
import 'package:flutter_keyboard_visibility/flutter_keyboard_visibility.dart';
class ChatArea extends HookWidget {
  final void Function(String) onMessage;
  const ChatArea({required this.onMessage});
  @override
  Widget build(BuildContext context) {
    final currentModeState = useState(1);
    final currentMode = currentModeState.value;
    return KeyboardVisibilityBuilder(builder: (context, isKeyboardVisible) {
      return Card(
        color: Colors.white.withOpacity(0.8),
        child: Padding(
          padding: EdgeInsets.all(S.x(2)),
          child: Column(
            children: [
              AnimatedCrossFade(
                firstChild: Center(
                  child: SpeechToTextButton(
                    onMessage: onMessage,
                  ),
                ),
                secondChild: ChatTextField(
                  onMessage: onMessage,
                ),
                crossFadeState:
                    currentMode == 0 ? CrossFadeState.showFirst : CrossFadeState.showSecond,
                duration: const Duration(milliseconds: 200),
              ),
              AnimatedCrossFade(
                firstChild: Column(
                  children: [
                    Divider(
                      color: Colors.grey.shade300,
                    ),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        GeniusRoundedSquareButton(
                          radius: 100,
                          size: 40,
                          onTap: () {
                            currentModeState.value = 0;
                          },
                          style:
                              currentMode == 0 ? GeniusButtonStyle.dark : GeniusButtonStyle.light,
                          child: const Icon(Icons.record_voice_over, size: 20),
                        ),
                        SizedBox(
                          width: S.x(8),
                        ),
                        GeniusRoundedSquareButton(
                          size: 40,
                          radius: 100,
                          onTap: () {
                            currentModeState.value = 1;
                          },
                          style:
                              currentMode == 1 ? GeniusButtonStyle.dark : GeniusButtonStyle.light,
                          child: const Icon(Icons.text_fields, size: 20),
                        ),
                      ],
                    ),
                  ],
                ),
                secondChild: Container(),
                crossFadeState:
                    !isKeyboardVisible ? CrossFadeState.showFirst : CrossFadeState.showSecond,
                duration: const Duration(milliseconds: 200),
              ),
            ],
          ),
        ),
      );
    });
  }
}
---
Path: /lib/widgets/chat/chat_text_field.dart

import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/style/values.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
typedef MessageCallback = void Function(String text);
class ChatTextField extends HookConsumerWidget {
  const ChatTextField({
    this.focusNode,
    required this.onMessage,
    this.autocomplete = true,
  });
  final FocusNode? focusNode;
  final MessageCallback onMessage;
  final bool autocomplete;
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final controller = useTextEditingController();
    final text = useValueListenable(controller).text.trim();
    final clearMessage = useCallback(() {
      controller.clear();
    }, [controller]);
    final sendMessage = useCallback(() {
      if (text.isEmpty) {
        return;
      }
      onMessage(text);
      clearMessage();
    }, [controller, text]);
    return Row(
      children: [
        Expanded(
          child: TextField(
            autocorrect: autocomplete,
            keyboardType: TextInputType.text,
            textInputAction: TextInputAction.done,
            controller: controller,
            focusNode: focusNode,
            onSubmitted: (_) => sendMessage(),
            style: TextStyle(
              fontSize: 15,
              color: Colors.grey.shade900,
            ),
            cursorColor: Colors.grey.shade900,
            decoration: InputDecoration(
              contentPadding: const EdgeInsets.symmetric(
                horizontal: S.x2,
                vertical: S.x1,
              ),
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(50),
                borderSide: BorderSide.none,
              ),
              hintText: '  Aa',
              hintStyle: TextStyle(
                color: Colors.grey.shade900,
                fontSize: 16,
                fontWeight: FontWeight.bold,
              ),
              filled: true,
              fillColor: Colors.transparent,
              suffixIcon: Row(
                mainAxisSize: MainAxisSize.min,
                mainAxisAlignment: MainAxisAlignment.end,
                children: [
                  if (text.isNotEmpty) ...[
                    InkWell(
                      onTap: () => clearMessage(),
                      child: Container(
                        margin: const EdgeInsets.symmetric(horizontal: S.x1),
                        padding: const EdgeInsets.all(S.x2),
                        decoration: BoxDecoration(
                          color: Colors.white,
                          borderRadius: BorderRadius.circular(R.x3),
                          boxShadow: [SHADOW_CARD],
                        ),
                        child: const Icon(
                          Icons.close,
                          size: 24,
                          color: Colors.grey,
                        ),
                      ),
                    ),
                    InkWell(
                      onTap: () => sendMessage(),
                      child: Container(
                        margin: const EdgeInsets.symmetric(horizontal: S.x1),
                        padding: const EdgeInsets.all(S.x2),
                        decoration: BoxDecoration(
                          color: Colors.white,
                          borderRadius: BorderRadius.circular(R.x3),
                          boxShadow: [SHADOW_CARD],
                        ),
                        child: const Icon(
                          Icons.arrow_upward_rounded,
                          size: 24,
                          color: Colors.grey,
                        ),
                      ),
                    ),
                  ],
                  const SizedBox(width: S.x3),
                ],
              ),
            ),
          ),
        ),
      ],
    );
  }
}
---
Path: /lib/widgets/chat/speech_to_text_button.dart

import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:flutter_spinkit/flutter_spinkit.dart';
import 'package:twins/providers/speech_to_text_provider.dart';
import 'package:twins/services/speech_to_text_service.dart';
import 'package:twins/style/genius_button_style.dart';
import 'package:twins/widgets/core/genius_rounded_square_button.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
class SpeechToTextButton extends HookConsumerWidget {
  final void Function(String) onMessage;
  const SpeechToTextButton({
    required this.onMessage,
  });
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final spokenText = useState('');
    final speechToTextIsListening = ref.watch(speechToTextIsListeningProvider);
    final speechToTextHasAccess = ref.watch(speechToTextHasAccessProvider);
    final speechToTextService = ref.watch(speechToTextServiceProvider.notifier);
    final runSpeechToText = useCallback(() {
      final future = ref.read(speechToTextServiceProvider.notifier).listen().forEach((words) {
        spokenText.value = words;
      });
      return () => future.ignore();
    }, [speechToTextService]);
    useEffect(() {
      return () {
        speechToTextService.stop();
      };
    }, []);
    return speechToTextHasAccess
        ? GeniusRoundedSquareButton(
            radius: 100,
            onTap: () {
              if (!speechToTextIsListening) {
                runSpeechToText();
              } else {
                speechToTextService.stop();
                if (spokenText.value.isNotEmpty) onMessage(spokenText.value);
                spokenText.value = '';
              }
            },
            style: GeniusButtonStyle.dark,
            child: !speechToTextIsListening
                ? const Icon(
                    Icons.mic_sharp,
                    size: 30,
                    color: Colors.white,
                  )
                : const SpinKitWave(
                    color: Colors.white,
                    size: 16,
                  ),
          )
        : const Text('No access to microphone');
  }
}
---
Path: /lib/widgets/core/genius_button.dart

import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/style/genius_button_style.dart';
import 'package:twins/style/values.dart';
class GeniusButton extends HookWidget {
  const GeniusButton({
    required this.style,
    required this.onPressed,
    required this.child,
    this.padding = const EdgeInsets.symmetric(
      horizontal: S.x5,
      vertical: S.x2,
    ),
    this.radius = 1000,
    this.expanded = false,
  });
  final bool expanded;
  final GeniusButtonStyle style;
  final VoidCallback? onPressed;
  final EdgeInsets padding;
  final double radius;
  final Widget child;
  @override
  Widget build(BuildContext context) {
    final content = useMemoized(() {
      var content = child;
      content = IconTheme(
        data: IconThemeData(
          color: style.textColor,
          size: 28,
        ),
        child: child,
      );
      content = DefaultTextStyle(
        style: TextStyle(
          fontSize: 16,
          fontWeight: FontWeight.bold,
          color: style.textColor,
        ),
        child: content,
      );
      if (expanded) {
        content = Center(
          child: content,
        );
      }
      return content;
    }, [style, child]);
    return Container(
      width: expanded ? double.infinity : null,
      decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(radius),
          border: Border.all(color: const Color(0xFFDDDBDB), width: 1.5),
          gradient: style.gradient),
      child: Material(
        borderRadius: BorderRadius.circular(66),
        color: Colors.transparent,
        child: InkWell(
          borderRadius: BorderRadius.circular(66),
          onTap: onPressed,
          child: Padding(
            padding: padding,
            child: content,
          ),
        ),
      ),
    );
  }
}
---
Path: /lib/widgets/core/background_video.dart

import 'package:flutter/material.dart';
import 'package:video_player/video_player.dart';
class BackgroundVideo extends StatefulWidget {
  const BackgroundVideo({
    required this.videoPath,
  });
  final String videoPath;
  @override
  BackgroundVideoState createState() => BackgroundVideoState();
}
class BackgroundVideoState extends State<BackgroundVideo> {
  late VideoPlayerController controller;
  @override
  void initState() {
    super.initState();
    controller = VideoPlayerController.asset(widget.videoPath);
    controller.initialize().then((_) {
      setState(() {
        controller.play();
        controller.setLooping(true);
        controller.setVolume(0.0); 
      });
    });
  }
  @override
  void dispose() {
    controller.dispose();
    super.dispose();
  }
  @override
  Widget build(BuildContext context) {
    final height = MediaQuery.of(context).size.height;
    return controller.value.isInitialized
        ? SizedBox(
            child: OverflowBox(
              alignment: Alignment.center,
              child: FittedBox(
                fit: BoxFit.cover,
                child: SizedBox(
                  width: height * controller.value.aspectRatio,
                  height: height,
                  child: ClipRect(
                    child: VideoPlayer(controller),
                  ),
                ),
              ),
            ),
          )
        : Container(
            color: Colors.white,
          );
  }
}
---
Path: /lib/widgets/core/tabs.dart

import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
class Tabs extends HookWidget {
  final List<String> tabs;
  final List<Widget> children;
  const Tabs({
    Key? key,
    required this.tabs,
    required this.children,
  }) : super(key: key);
  @override
  Widget build(BuildContext context) {
    final tabController = useTabController(initialLength: tabs.length);
    TextStyle tabStyle = Theme.of(context).textTheme.titleSmall!.copyWith(
          fontWeight: FontWeight.w700, fontSize: 25
        );
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        TabBar(
          controller: tabController,
          labelStyle: tabStyle,
          unselectedLabelStyle: tabStyle,
          indicatorSize: TabBarIndicatorSize.label,
          indicator: UnderlineTabIndicator(
            borderSide: BorderSide(
              color: Theme.of(context).colorScheme.primary,
              width: 4.5,
            ),
          ),
          tabs: [
            for (var tab in tabs) Tab(text: tab),
          ],
        ),
        const SizedBox(height: 30),
        Expanded(child: TabBarView(
          controller: tabController,
          children: children,
        )),
      ],
    );
  }
}
---
Path: /lib/widgets/core/genius_badge.dart

import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/style/genius_button_style.dart';
import 'package:twins/style/values.dart';
class GeniusBadge extends HookWidget {
  const GeniusBadge({
    required this.style,
    required this.child,
    this.padding = const EdgeInsets.symmetric(horizontal: S.x2, vertical: 5),
  });
  final GeniusButtonStyle style;
  final EdgeInsets padding;
  final Widget child;
  @override
  Widget build(BuildContext context) {
    final content = useMemoized(() {
      var content = child;
      content = IconTheme(
        data: IconThemeData(
          color: style.textColor,
          size: 28,
        ),
        child: child,
      );
      content = DefaultTextStyle(
        style: TextStyle(
          fontSize: 16,
          fontWeight: FontWeight.bold,
          color: style.textColor,
        ),
        child: content,
      );
      return content;
    }, [style, child]);
    return Container(
      padding: padding,
      decoration: BoxDecoration(
        gradient: style.gradient,
        borderRadius: BorderRadius.circular(10),
      ),
      child: content,
    );
  }
}
---
Path: /lib/widgets/core/flippable_widget.dart

import 'dart:math';
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
class FlippableWidget extends HookWidget {
  final Widget frontContent;
  final Widget backContent;
  final bool showFront;
  const FlippableWidget({
    required this.frontContent,
    required this.backContent,
    this.showFront = true,
  });
  @override
  Widget build(BuildContext context) {
    final controller = useAnimationController(duration: const Duration(milliseconds: 500));
    final animation = Tween(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(
        parent: controller,
        curve: Curves.easeInOutCubic, 
      ),
    );
    useEffect(() {
      if (showFront) {
        controller.reverse();
      } else {
        controller.forward();
      }
      return null;
    }, [showFront]);
    return AnimatedBuilder(
      animation: controller,
      child: Container(color: Colors.red),
      builder: (context, child) {
        return Transform(
          alignment: FractionalOffset.center,
          transform: Matrix4.identity()
            ..setEntry(2, 1, 0.0015)
            ..rotateY(animation.value * pi),
          child: animation.value < 0.5
              ? frontContent
              : Transform(
                  alignment: FractionalOffset.center,
                  transform: Matrix4.identity()
                    ..setEntry(2, 1, 0.0015)
                    ..rotateY(pi),
                  child: backContent,
                ),
        );
      },
    );
  }
}
---
Path: /lib/widgets/core/genius_rounded_square_button.dart

import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/style/genius_button_style.dart';
import 'package:twins/style/values.dart';
class GeniusRoundedSquareButton extends HookWidget {
  const GeniusRoundedSquareButton({
    required this.onTap,
    required this.child,
    required this.style,
    this.radius = R.x3,
    this.size = 50,
  });
  final VoidCallback? onTap;
  final Widget child;
  final GeniusButtonStyle style;
  final double radius;
  final double size;
  @override
  Widget build(BuildContext context) {
    final content = useMemoized(() {
      Widget content = child;
      content = IconTheme(
        data: IconThemeData(
          color: style.iconColor,
          size: 24,
        ),
        child: child,
      );
      content = DefaultTextStyle(style: TextStyle(color: style.textColor), child: content);
      return content;
    }, [child, style]);
    return SizedBox(
      height: size,
      width: size,
      child: Container(
        decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(radius),
            border: Border.all(color: style.borderColor),
            color: const Color(0xFFF9FAFC),
            gradient: style.gradient),
        child: Material(
          color: Colors.transparent,
          child: InkWell(
            borderRadius: BorderRadius.circular(radius),
            onTap: onTap,
            child: Center(child: content),
          ),
        ),
      ),
    );
  }
}
---
Path: /lib/widgets/core/genius_card.dart

import 'package:flutter/material.dart';
import 'package:twins/style/values.dart';
class GeniusCard extends StatelessWidget {
  final Widget child;
  final Color? color;
  final bool shadow;
  final EdgeInsets padding;
  final BorderRadius borderRadius;
  final VoidCallback? onTap;
  final bool expand;
  const GeniusCard({
    required this.child,
    this.color = Colors.transparent,
    this.shadow = true,
    this.padding = const EdgeInsets.all(S.x5),
    this.borderRadius = const BorderRadius.all(Radius.circular(R.x5)),
    this.onTap,
    this.expand = false,
  });
  @override
  Widget build(BuildContext context) {
    Widget content = Padding(
      padding: const EdgeInsets.symmetric(horizontal: 4),
      child: Container(
          constraints: expand ? const BoxConstraints(minHeight: double.infinity) : null,
          width: double.infinity,
          padding: padding,
          decoration: BoxDecoration(
            color: color,
            borderRadius: borderRadius,
            boxShadow: shadow ? [SHADOW_CARD] : [],
          ),
          child: child),
    );
    if (onTap != null) {
      content = Padding(
        padding: const EdgeInsets.symmetric(horizontal: 4),
        child: Material(
          color: color,
          borderRadius: borderRadius,
          elevation: shadow ? 5.0 : 0.0,
          child: InkWell(
            borderRadius: borderRadius,
            onTap: onTap,
            child: Padding(
              padding: padding,
              child: child,
            ),
          ),
        ),
      );
    }
    return content;
  }
}
---
Path: /lib/widgets/core/genius_screen.dart

import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/mixins/widget.dart';
import 'package:twins/style/values.dart';
class GeniusScreen extends HookWidget with PageWidget<void> {
  GeniusScreen({required this.child, required this.header, this.isScrollable = true});
  final Widget header;
  final Widget child;
  final bool isScrollable;
  @override
  Widget build(BuildContext context) {
    final headerHeight = S.x(12);
    final safeAreaTop = MediaQuery.of(context).padding.top;
    final safeAreaBottom = MediaQuery.of(context).padding.bottom;
    Widget content = Container(
      padding: EdgeInsets.only(top: headerHeight + safeAreaTop) +
          EdgeInsets.only(bottom: safeAreaBottom),
      color: Colors.white,
      child: child,
    );
    if (isScrollable) {
      content = SingleChildScrollView(
        physics: const AlwaysScrollableScrollPhysics(),
        child: content,
      );
    }
    return Container(
      height: double.infinity,
      color: Colors.white,
      child: Stack(
        children: [
          content,
          SizedBox(
            height: headerHeight + safeAreaTop,
            child: ClipRRect(
              child: BackdropFilter(
                filter: ImageFilter.blur(sigmaX: 10, sigmaY: 10),
                child: Padding(
                  padding: EdgeInsets.only(top: safeAreaTop),
                  child: header,
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}
---
Path: /lib/widgets/core/notifications/animated_panel.dart

import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/models/notification_panel_model.dart';
import 'package:twins/services/notifications_panel_service.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
class AnimatedPanel extends HookConsumerWidget {
  final NotificationPanelData data;
  const AnimatedPanel({required this.data, Key? key}) : super(key: key);
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final controller = useAnimationController(duration: const Duration(milliseconds: 200));
    final offsetAnimation = Tween<Offset>(
      begin: const Offset(1, 0), 
      end: const Offset(0, 0), 
    ).animate(
      CurvedAnimation(
        parent: controller,
        curve: Curves.decelerate, 
      ),
    );
    useEffect(() {
      controller.addStatusListener((status) {
        if (status == AnimationStatus.dismissed) {
          ref.read(notificationsPanelServiceProvider.notifier).removeNotificationPanelData(data.id);
        }
      });
      controller.forward();
      Future.delayed(const Duration(seconds: 2), () {
        controller.reverse();
      });
      return null;
    }, []);
    return GestureDetector(
      onTap: () => controller.reverse(),
      child: SlideTransition(
        position: offsetAnimation,
        child: Container(
          margin: const EdgeInsets.only(bottom: 10),
          decoration: const BoxDecoration(
            color: Colors.blue,
            borderRadius:
                BorderRadius.only(bottomLeft: Radius.circular(10), topLeft: Radius.circular(10)),
          ),
          child: SizedBox(
            width: 200,
            child: Padding(
              padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 0) +
                  const EdgeInsets.only(left: 16, right: 8
                      ),
              child: Row(
                children: [
                  const Icon(Icons.check, color: Colors.white, size: 30),
                  const SizedBox(width: 10),
                  Flexible(
                    child: DefaultTextStyle(
                      style: const TextStyle(color: Colors.white),
                      child: data.child,
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }
}
---
Path: /lib/widgets/core/notifications/notifications_manager.dart

import 'package:flutter/material.dart';
import 'package:twins/services/notifications_panel_service.dart';
import 'package:twins/widgets/core/notifications/animated_panel.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
class NotificationsManager extends ConsumerWidget {
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final notifications = ref.watch(notificationsPanelServiceProvider);
    return SafeArea(
      child: SizedBox(
        width: double.infinity,
        child: Column(
          mainAxisSize: MainAxisSize.max,
          crossAxisAlignment: CrossAxisAlignment.end,
          children: [
            ...notifications.map((notification) {
              return AnimatedPanel(data: notification, key: ValueKey(notification.id));
            }).toList(),
          ],
        ),
      ),
    );
  }
}
---
Path: /lib/widgets/core/buttons/genius_squared_button.dart

import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/style/genius_button_style.dart';
import 'package:twins/style/values.dart';
class GeniusSquareButton extends HookWidget {
  const GeniusSquareButton({
    required this.onTap,
    required this.child,
    required this.style,
    this.showBadge = false,
    this.badgeContent,
    this.badgeColor = const Color(0xFF90F4BC),
    this.height = 60,
    this.width = 60,
    this.radius = const BorderRadius.all(Radius.circular(R.x4)),
  });
  final VoidCallback? onTap;
  final Widget child;
  final GeniusButtonStyle style;
  final BorderRadius radius;
  final bool showBadge; 
  final Widget? badgeContent; 
  final Color badgeColor;
  final double height;
  final double width;
  @override
  Widget build(BuildContext context) {
    return SizedBox(
      height: height,
      width: width,
      child: Stack(
        clipBehavior: Clip.none,
        children: [
          Container(
            decoration: BoxDecoration(
              border: style.border,
              borderRadius: radius,
              gradient: style.gradient,
            ),
            child: Material(
              color: Colors.transparent,
              child: InkWell(
                borderRadius: BorderRadius.circular(R.x3),
                onTap: onTap,
                child: Padding(
                  padding: const EdgeInsets.all(S.x2),
                  child: DefaultTextStyle(
                    style: TextStyle(color: style.textColor),
                    child: Center(child: child),
                  ),
                ),
              ),
            ),
          ),
          if (showBadge && badgeContent != null)
            Positioned(
              right: -5, 
              top: -7, 
              child: Container(
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(10),
                  color: badgeColor, 
                ),
                child: Center(
                  child: Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 6.0, vertical: 2),
                    child: badgeContent,
                  ),
                ),
              ),
            ),
        ],
      ),
    );
  }
}
---
Path: /lib/widgets/core/buttons/genius_close_button.dart

import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/style/genius_button_style.dart';
import 'package:twins/widgets/core/genius_rounded_square_button.dart';
class GeniusCloseButton extends HookWidget {
  const GeniusCloseButton({
    required this.onTap,
    required this.style,
    this.showBadge = false,
    this.badgeContent,
  });
  final VoidCallback? onTap;
  final GeniusButtonStyle style;
  final bool showBadge; 
  final Widget? badgeContent; 
  @override
  Widget build(BuildContext context) {
    return GeniusRoundedSquareButton(
      size: 70,
      onTap: onTap,
      style: GeniusButtonStyle.light,
      child: const Icon(
        Icons.close,
        color: Color(0xFFD9D9D9),
        size: 60,
      ),
    );
  }
}
---
Path: /lib/widgets/core/buttons/genius_back_button.dart

import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/style/genius_button_style.dart';
import 'package:twins/widgets/core/buttons/genius_squared_button.dart';
class GeniusBackButton extends HookWidget {
  const GeniusBackButton({
    required this.onTap,
    required this.style,
    this.showBadge = false,
    this.badgeContent,
  });
  final VoidCallback? onTap;
  final GeniusButtonStyle style;
  final bool showBadge; 
  final Widget? badgeContent; 
  @override
  Widget build(BuildContext context) {
    return GeniusSquareButton(
      radius: const BorderRadius.all(Radius.circular(14)),
      onTap: onTap,
      style: style,
      height: 50,
      width: 50,
      child: Container(
        margin: const EdgeInsets.only(left: 7),
        child: const Icon(
          Icons.arrow_back_ios,
          color: Colors.black,
          size: 20,
        ),
      ),
    );
  }
}
---
Path: /lib/widgets/rive/progress_rive.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:rive/rive.dart';
class ProgressRive extends HookWidget {
  final String asset;
  final String stateMachine;
  final String inputName;
  final double progress;
  final double multiplier;
  final Widget placeholder;
  const ProgressRive(
    this.asset, {
    Key? key,
    required this.stateMachine,
    required this.inputName,
    this.progress = 0,
    this.multiplier = 1,
    this.placeholder = const SizedBox(),
  }) : super(key: key);
  @override
  Widget build(BuildContext context) {
    final artboardState = useState<Artboard?>(null);
    final artBoard = artboardState.value;
    final controllerState = useState<StateMachineController?>(null);
    final progressInputState = useState<SMIInput<double>?>(null);
    final animationController = useAnimationController(duration: const Duration(milliseconds: 500));
    final previousProgress = useState<double>(progress);
    useEffect(() {
      if (artboardState.value == null) {
        rootBundle.load(asset).then((data) {
          final file = RiveFile.import(data);
          final artboard = file.mainArtboard;
          final controller = StateMachineController.fromArtboard(artboard, stateMachine);
          if (controller != null) {
            artboard.addController(controller);
            artboardState.value = artboard;
            controllerState.value = controller;
            progressInputState.value = controller.findInput(inputName);
            progressInputState.value!.value = progress * multiplier;
          }
        });
      }
      return null;
    }, [asset]);
    useEffect(() {
      if (progressInputState.value != null && progress != previousProgress.value) {
        final tween = Tween<double>(
          begin: previousProgress.value * multiplier,
          end: progress * multiplier,
        ).chain(CurveTween(curve: Curves.linear));
        void updateProgress() {
          progressInputState.value!.value = tween.evaluate(animationController);
        }
        animationController.addListener(updateProgress);
        animationController.forward(from: 0);
        previousProgress.value = progress;
        return () {
          animationController.removeListener(updateProgress);
        };
      }
      return null;
    }, [progress]);
    return artBoard == null ? placeholder : Rive(artboard: artBoard, fit: BoxFit.cover);
  }
}
class LerpProgress extends HookWidget {
  final double progress;
  const LerpProgress({Key? key, required this.progress}) : super(key: key);
  @override
  Widget build(BuildContext context) {
    final controller = useAnimationController(duration: const Duration(milliseconds: 1000));
    final curve = CurvedAnimation(parent: controller, curve: Curves.linear);
    final previousProgress = useState<double>(progress);
    final valueTween = Tween<double>(
      begin: previousProgress.value,
      end: progress,
    );
    useEffect(() {
      if (previousProgress.value != progress) {
        previousProgress.value = progress;
        controller.forward(from: 0);
      }
      return null;
    }, [progress]);
    return AnimatedBuilder(
      animation: curve,
      builder: (context, child) {
        double lerpValue = valueTween.evaluate(curve);
        return SizedBox(
            width: 50,
            height: 50,
            child: CircularProgressIndicator(backgroundColor: Colors.black, value: lerpValue));
      },
    );
  }
}
---
Path: /lib/widgets/rive/trigger_rive.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:rive/rive.dart';
class TriggerRive extends HookWidget {
  final ByteData data;
  final String stateMachine;
  final List<String> triggers;
  final Map<String, bool> triggerBools;
  final String? currentTrigger;
  final Map<String, bool>? currentBoolsTriggers;
  final Widget placeholder;
  final BoxFit fit;
  final Alignment? alignment;
  final void Function()? onLoaded;
  final Function(RiveEvent)? onEvent;
  const TriggerRive(
    this.data, {
    Key? key,
    required this.stateMachine,
    this.triggers = const [],
    this.triggerBools = const {},
    this.currentTrigger,
    this.currentBoolsTriggers,
    this.placeholder = const SizedBox(),
    this.fit = BoxFit.contain,
    this.alignment,
    this.onLoaded,
    this.onEvent,
  }) : super(key: key);
  @override
  Widget build(BuildContext context) {
    final artboardState = useState<Artboard?>(null);
    final artBoard = artboardState.value;
    final controllerState = useState<StateMachineController?>(null);
    final triggersState = useState<List<SMITrigger?>?>(null);
    final triggerBoolsState = useState<List<SMIBool?>?>(null);
    final ValueNotifier<RiveFile?> riveFileState = useState(null);
    useEffect(() {
      WidgetsBinding.instance.addPostFrameCallback((_) {
        riveFileState.value = RiveFile.import(data);
        final artboard = riveFileState.value!.mainArtboard;
        final controller = StateMachineController.fromArtboard(artboard, stateMachine);
        if (controller != null) {
          artboard.addController(controller);
          artboardState.value = artboard;
          controllerState.value = controller;
          if (onEvent != null) {
            controller.addEventListener(onEvent!);
          }
        }
      });
      return () {
        if (onEvent != null) {
          controllerState.value?.removeEventListener(onEvent!);
        }
      };
    }, [data]);
    useEffect(() {
      if (controllerState.value == null) {
        return null;
      }
      if (triggersState.value == null) {
        final triggersSMI =
            triggers.map((trigger) => controllerState.value!.findSMI<SMITrigger>(trigger)).toList();
        triggersState.value = triggersSMI;
      }
      return null;
    }, [triggers, controllerState.value]);
    useEffect(() {
      if (controllerState.value == null) {
        return null;
      }
      if (triggerBoolsState.value == null) {
        final triggersSMI = triggerBools.keys
            .map((trigger) => controllerState.value!.findSMI<SMIBool>(trigger))
            .toList();
        triggerBoolsState.value = triggersSMI;
      }
      return null;
    }, [triggerBools, controllerState.value]);
    useEffect(() {
      if (currentTrigger != null && triggersState.value != null) {
        final trigger =
            triggersState.value!.firstWhere((trigger) => trigger!.name == currentTrigger);
        if (trigger != null) {
          trigger.fire();
        }
      }
      return null;
    }, [currentTrigger]);
    useEffect(() {
      if (currentBoolsTriggers == null || triggerBoolsState.value == null) {
        return null;
      }
      for (final trigger in currentBoolsTriggers!.keys) {
        final triggerBool =
            triggerBoolsState.value!.firstWhere((triggerBool) => triggerBool!.name == trigger);
        if (triggerBool != null) {
          triggerBool.value = currentBoolsTriggers![trigger]!;
        }
      }
      return null;
    }, [currentBoolsTriggers]);
    return artBoard == null || riveFileState.value == null || controllerState.value == null
        ? placeholder
        : RiveAnimation.direct(
            onInit: (_) {
              if (onLoaded != null) onLoaded!();
            },
            riveFileState.value!,
            controllers: [controllerState.value!],
            fit: fit,
            alignment: alignment,
          );
  }
}
---
Path: /lib/widgets/rive/image_or_rive.dart

import 'dart:typed_data';
import 'package:flutter/material.dart';
import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/providers/asset_or_network_file_provider.dart';
import 'package:twins/widgets/rive/trigger_rive.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:rive/rive.dart';
class ImageOrRive extends HookConsumerWidget {
  final String asset;
  final String stateMachine;
  final List<String> triggers;
  final String? currentTrigger;
  final Map<String, bool> triggerBools;
  final Map<String, bool>? currentBoolsTriggers;
  final Widget placeholder;
  final BoxFit fit;
  final Alignment? alignment;
  final void Function()? onLoaded;
  final Function(RiveEvent)? onEvent;
  const ImageOrRive(
    this.asset, {
    Key? key,
    this.stateMachine = '',
    this.triggers = const [],
    this.currentTrigger = '',
    this.triggerBools = const {},
    this.currentBoolsTriggers,
    this.placeholder = const SizedBox(),
    this.fit = BoxFit.contain,
    this.alignment,
    this.onLoaded,
    this.onEvent,
  }) : super(key: key);
  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final isRive = asset.endsWith('.riv');
    final byteDataRequest = ref.watch(assetOrNetworkFileProvider(asset));
    final byteDataState = useState<ByteData?>(null);
    final byteData = byteDataState.value;
    final loadingState = useState(true);
    useEffect(() {
      WidgetsBinding.instance.addPostFrameCallback((_) {
        byteDataRequest.when(
          data: (value) {
            byteDataState.value = value;
            loadingState.value = false;
          },
          loading: () {
            loadingState.value = true;
          },
          error: (error, stackTrace) {
            loadingState.value = false;
          },
        );
      });
      return null;
    }, [byteDataRequest]);
    useEffect(() {
      if (!isRive) {
        onLoaded?.call();
      }
      return null;
    }, [loadingState.value]);
    useEffect(() {
      return null;
    }, [triggers, currentTrigger]);
    Widget content = useMemoized(() {
      return byteData != null
          ? isRive
              ? TriggerRive(
                  onEvent: onEvent,
                  byteData,
                  fit: fit,
                  alignment: alignment,
                  stateMachine: stateMachine,
                  currentTrigger: currentTrigger,
                  triggerBools: triggerBools,
                  currentBoolsTriggers: currentBoolsTriggers,
                  onLoaded: onLoaded,
                  triggers: triggers,
                )
              : Image.memory(
                  byteData.buffer.asUint8List(),
                  fit: fit,
                  alignment: alignment ?? Alignment.center,
                )
          : placeholder;
    }, [byteData, isRive, fit, stateMachine, currentTrigger, onLoaded, triggers, placeholder]);
    return content;
  }
}
---
Path: /lib/style/values.dart

import 'dart:ui';
import 'package:flutter/material.dart';
class S {
  S._();
  static const half = x1 / 2;
  static const x1 = 5.0;
  static const x2 = x1 * 2;
  static const x3 = x1 * 3;
  static const x4 = x1 * 4;
  static const x5 = x1 * 5;
  static const x6 = x1 * 6;
  static const x7 = x1 * 7;
  static double x(double multiplier) => x1 * multiplier;
}
class R {
  R._();
  static const x1 = 5.0;
  static const x2 = x1 * 2;
  static const x3 = x1 * 3;
  static const x4 = x1 * 4;
  static const x5 = x1 * 5;
  static double x(double multiplier) => x1 * multiplier;
}
class C {
  C._();
  static const GENIUS_PRIMARY = Color(0xFF3E95FF);
  static const GENIUS_PRIMARY_LIGHT = Color(0xFF6A9BFA);
  static const GENIUS_WHITE = Color(0xFFFFFFFF);
  static const GENIUS_BLACK = Color(0xFF000000);
  static const GENIUS_GREY_LIGHT = Color(0xFFF8FBFB);
  static const GENIUS_GREY = Color.fromARGB(255, 217, 222, 222);
  static const GENIUS_GREY_DARK = Color(0xFF6F6666);
  static const GENIUS_SKY = Color(0xFFCEECFE);
  static const GENIUS_ORANGE = Color(0xFFFF6905);
  static const GENIUS_YELLOW = Color(0xFFFEB66F);
  static const GENIUS_PURPLE = Color(0xFF7230FC);
  static const GENIUS_SUCCESS = Color(0xFF90F4BC);
  static const GENIUS_ERROR = Color(0xFFF9D68E);
  static const GENIUS_DISABLE = Color(0xFFDEDEDE);
  static const GENIUS_PRIMARY_GRADIENT = LinearGradient(
    colors: [
      GENIUS_PRIMARY,
      GENIUS_PRIMARY,
    ],
    begin: Alignment.topCenter,
    end: Alignment.bottomCenter,
  );
  static const GENIUS_PRIMARY_LIGHT_GRADIENT = LinearGradient(
    colors: [
      GENIUS_PRIMARY_LIGHT,
      GENIUS_PRIMARY_LIGHT,
    ],
    begin: Alignment.topCenter,
    end: Alignment.bottomCenter,
  );
  static const GENIUS_ACCENT_GRADIENT = LinearGradient(
    colors: [
      Color(0xFF17F212),
      Color(0xFF04C100),
    ],
    begin: Alignment.centerLeft,
    end: Alignment.centerRight,
  );
  static const GENIUS_ERROR_GRADIENT = LinearGradient(
    colors: [
      C.GENIUS_ERROR,
      C.GENIUS_ERROR,
    ],
    begin: Alignment.centerLeft,
    end: Alignment.centerRight,
  );
  static const GENIUS_DISABLE_GRADIENT = LinearGradient(
    colors: [
      C.GENIUS_DISABLE,
      C.GENIUS_DISABLE,
    ],
    begin: Alignment.centerLeft,
    end: Alignment.centerRight,
  );
  static const GENIUS_SUCCESS_GRADIENT = LinearGradient(
    colors: [
      C.GENIUS_SUCCESS,
      C.GENIUS_SUCCESS,
    ],
    begin: Alignment.centerLeft,
    end: Alignment.centerRight,
  );
  static const GENIUS_BLACK_GRADIENT = LinearGradient(
    colors: [
      GENIUS_BLACK,
      GENIUS_BLACK,
    ],
    begin: Alignment.centerLeft,
    end: Alignment.centerRight,
  );
  static const GENIUS_WHITE_GRADIENT = LinearGradient(
    colors: [
      GENIUS_WHITE,
      GENIUS_WHITE,
    ],
    begin: Alignment.centerLeft,
    end: Alignment.centerRight,
  );
  static const BACKGROUND_SHADOW = Color(0x660B0B0B);
}
extension LinearGradientExtension on LinearGradient {
  LinearGradient withOpacity({double opacityStart = 1, double? opacityEnd}) {
    List<Color> newColors = [...colors];
    newColors[0] = newColors[0].withOpacity(opacityStart);
    if (opacityEnd != null && newColors.length > 1) {
      final lastIndex = newColors.length - 1;
      newColors[lastIndex] = newColors[lastIndex].withOpacity(opacityEnd);
    }
    return LinearGradient(
      colors: newColors,
      begin: begin,
      end: end,
    );
  }
}
class F {
  F._();
  static final BACKGROUND_BLUR = ImageFilter.blur(sigmaX: 4.0, sigmaY: 4.0);
}
const SHADOW_CARD = BoxShadow(
  color: Colors.black26,
  offset: Offset(0, 4),
  blurRadius: 4,
);
---
Path: /lib/style/light_theme.dart

import 'package:flutter/material.dart';
import 'package:twins/style/typography.dart';
import 'package:twins/style/values.dart';
import 'package:google_fonts/google_fonts.dart';
final lightTheme = ThemeData(
  useMaterial3: true,
  brightness: Brightness.light,
  cardTheme: CardTheme(
    elevation: 0,
    surfaceTintColor: Colors.white,
    margin: EdgeInsets.zero,
    shape: RoundedRectangleBorder(
      side: const BorderSide(color: Color(0xFFE5E5E5), width: 1),
      borderRadius: BorderRadius.circular(16),
    ),
  ),
  chipTheme: ChipThemeData(
    backgroundColor: MaterialStateColor.resolveWith((states) => const Color(0xFFF6F5FB)),
    elevation: 0,
    side: const BorderSide(
      color: Color(0xFFE5E5E5),
      width: 0,
    ),
    shape: RoundedRectangleBorder(
      borderRadius: BorderRadius.circular(10),
      side: const BorderSide(
        color: Colors.transparent,
        width: 0,
      ),
    ),
  ),
  filledButtonTheme: FilledButtonThemeData(
    style: ButtonStyle(
      backgroundColor: MaterialStateProperty.all(C.GENIUS_PRIMARY),
      foregroundColor: MaterialStateProperty.all(Colors.white),
      elevation: MaterialStateProperty.all(0),
      padding: MaterialStateProperty.all(const EdgeInsets.symmetric(vertical: 13, horizontal: 15)),
      shape: MaterialStateProperty.all(
        RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(20),
        ),
      ),
      textStyle: MaterialStateProperty.all(
        GoogleFonts.poppins(
          fontSize: 16,
          fontWeight: FontWeight.w500,
        ),
      ),
    ),
  ),
  textTheme: applyJapaneseTypography(GoogleFonts.poppinsTextTheme()).copyWith(
    bodySmall: GoogleFonts.poppins(
      fontSize: 14,
      color: const Color(0xFFBAB3B3),
    ),
    bodyMedium: GoogleFonts.poppins(
      fontSize: 16,
      color: const Color(0xFF938686),
    ),
    titleLarge: GoogleFonts.poppins(
      fontSize: 25,
      fontWeight: FontWeight.w600,
      letterSpacing: -1,
    ),
    titleMedium: GoogleFonts.poppins(
      fontSize: 18,
      fontWeight: FontWeight.w600,
    ),
    titleSmall: GoogleFonts.poppins(
      fontSize: 18,
      fontWeight: FontWeight.w400,
      color: const Color(0xFF7C7575),
    ),
  ),
  colorScheme: const ColorScheme.light(primary: C.GENIUS_PRIMARY, background: C.GENIUS_WHITE),
  scrollbarTheme: ScrollbarThemeData(
    thumbColor: MaterialStateProperty.all(Colors.red),
    thickness: MaterialStateProperty.all(10.0),
    radius: const Radius.circular(20),
  ),
);
---
Path: /lib/style/typography.dart

import 'package:flutter/foundation.dart' show defaultTargetPlatform;
import 'package:flutter/material.dart';
const Locale LOCALE_JAPANESE = Locale('ja', 'JP');
final bool _IS_ANDROID = defaultTargetPlatform == TargetPlatform.android;
final TextTheme _whiteTextTheme =
    _IS_ANDROID ? Typography.whiteMountainView : Typography.whiteCupertino;
final TextTheme _blackTextTheme =
    _IS_ANDROID ? Typography.blackMountainView : Typography.blackCupertino;
final Typography TYPOGRAPHY = Typography(
  platform: defaultTargetPlatform,
  white: _textTheme(_whiteTextTheme),
  black: _textTheme(_blackTextTheme),
  englishLike: _textTheme(Typography.englishLike2014),
  dense: _textTheme(Typography.dense2014),
  tall: _textTheme(Typography.tall2014),
);
TextStyle? _textStyle(TextStyle? base) {
  return base?.copyWith(
    locale: LOCALE_JAPANESE,
    textBaseline: TextBaseline.ideographic,
  );
}
TextTheme _textTheme(TextTheme base) {
  return base.copyWith(
    displayLarge: _textStyle(base.displayLarge),
    displayMedium: _textStyle(base.displayMedium),
    displaySmall: _textStyle(base.displaySmall),
    headlineLarge: _textStyle(base.headlineLarge),
    headlineMedium: _textStyle(base.headlineMedium),
    headlineSmall: _textStyle(base.headlineSmall),
    titleLarge: _textStyle(base.titleLarge),
    titleMedium: _textStyle(base.titleMedium),
    titleSmall: _textStyle(base.titleSmall),
    bodyLarge: _textStyle(base.bodyLarge),
    bodyMedium: _textStyle(base.bodyMedium),
    bodySmall: _textStyle(base.bodySmall),
    labelLarge: _textStyle(base.labelLarge),
    labelMedium: _textStyle(base.labelMedium),
    labelSmall: _textStyle(base.labelSmall),
  );
}
TextTheme applyJapaneseTypography(TextTheme base) {
  return _textTheme(base);
}
---
Path: /lib/style/genius_button_style.dart

import 'package:flutter/material.dart';
import 'package:twins/style/values.dart';
enum GeniusButtonStyle {
  light,
  dark,
  darkLight,
  black,
  greyDark,
  greyLight,
  transparent,
  success,
  error,
  disable,
}
extension GeniusStyleTheme on GeniusButtonStyle {
  Color get color {
    switch (this) {
      case GeniusButtonStyle.light:
        return Colors.white;
      case GeniusButtonStyle.dark:
        return C.GENIUS_PRIMARY;
      case GeniusButtonStyle.black:
        return Colors.black;
      case GeniusButtonStyle.darkLight:
        return C.GENIUS_PRIMARY_LIGHT;
      case GeniusButtonStyle.greyDark:
        return C.GENIUS_GREY_DARK;
      case GeniusButtonStyle.greyLight:
        return C.GENIUS_GREY_LIGHT;
      case GeniusButtonStyle.success:
        return C.GENIUS_SUCCESS;
      case GeniusButtonStyle.error:
        return C.GENIUS_ERROR;
      case GeniusButtonStyle.disable:
        return C.GENIUS_DISABLE;
      case GeniusButtonStyle.transparent:
        return Colors.transparent;
    }
  }
  Color get textColor {
    switch (this) {
      case GeniusButtonStyle.light:
        return Colors.black;
      case GeniusButtonStyle.dark:
        return Colors.white;
      case GeniusButtonStyle.black:
        return Colors.white;
      case GeniusButtonStyle.darkLight:
        return C.GENIUS_WHITE;
      case GeniusButtonStyle.greyDark:
        return C.GENIUS_WHITE;
      case GeniusButtonStyle.greyLight:
        return C.GENIUS_GREY_DARK;
      case GeniusButtonStyle.success:
        return C.GENIUS_GREY_DARK;
      case GeniusButtonStyle.error:
        return C.GENIUS_GREY_DARK;
      case GeniusButtonStyle.disable:
        return C.GENIUS_WHITE;
      case GeniusButtonStyle.transparent:
        return C.GENIUS_GREY_LIGHT;
    }
  }
  Color get iconColor {
    switch (this) {
      case GeniusButtonStyle.light:
        return Colors.grey.shade500;
      case GeniusButtonStyle.dark:
        return Colors.white;
      case GeniusButtonStyle.black:
        return Colors.white;
      case GeniusButtonStyle.darkLight:
        return C.GENIUS_WHITE;
      case GeniusButtonStyle.greyDark:
        return C.GENIUS_WHITE;
      case GeniusButtonStyle.greyLight:
        return C.GENIUS_GREY_DARK;
      case GeniusButtonStyle.success:
        return C.GENIUS_WHITE;
      case GeniusButtonStyle.error:
        return C.GENIUS_WHITE;
      case GeniusButtonStyle.disable:
        return C.GENIUS_WHITE;
      case GeniusButtonStyle.transparent:
        return const Color.fromARGB(255, 178, 178, 178);
    }
  }
  Color get borderColor {
    switch (this) {
      case GeniusButtonStyle.light:
        return const Color(0xFFDDDBDB);
      case GeniusButtonStyle.dark:
        return const Color(0xFFDDDBDB);
      case GeniusButtonStyle.black:
        return const Color(0xFFDDDBDB);
      case GeniusButtonStyle.darkLight:
        return const Color(0xFFDDDBDB);
      case GeniusButtonStyle.greyDark:
        return const Color(0xFFDDDBDB);
      case GeniusButtonStyle.greyLight:
        return const Color(0xFFDDDBDB);
      case GeniusButtonStyle.success:
        return const Color(0xFFDDDBDB);
      case GeniusButtonStyle.error:
        return const Color(0xFFDDDBDB);
      case GeniusButtonStyle.disable:
        return const Color(0xFFDDDBDB);
      case GeniusButtonStyle.transparent:
        return Colors.transparent;
    }
  }
  BoxBorder get border {
    switch (this) {
      case GeniusButtonStyle.light:
        return Border.all(
          color: const Color(0xFFEAECF0),
          width: 1.2,
        );
      case GeniusButtonStyle.dark:
        return Border.all(
          color: C.GENIUS_PRIMARY,
          width: 1,
        );
      case GeniusButtonStyle.black:
        return Border.all(
          color: Colors.black,
          width: 1,
        );
      case GeniusButtonStyle.darkLight:
        return Border.all(
          color: C.GENIUS_PRIMARY_LIGHT,
          width: 1,
        );
      case GeniusButtonStyle.greyDark:
        return Border.all(
          color: C.GENIUS_GREY_DARK,
          width: 1,
        );
      case GeniusButtonStyle.greyLight:
        return Border.all(
          color: C.GENIUS_GREY_LIGHT,
          width: 1,
        );
      case GeniusButtonStyle.success:
        return Border.all(
          color: C.GENIUS_SUCCESS,
          width: 1,
        );
      case GeniusButtonStyle.error:
        return Border.all(
          color: C.GENIUS_ERROR,
          width: 1,
        );
      case GeniusButtonStyle.disable:
        return Border.all(
          color: C.GENIUS_DISABLE,
          width: 1,
        );
      case GeniusButtonStyle.transparent:
        return Border.all(
          color: Colors.transparent,
          width: 1,
        );
    }
  }
  LinearGradient get gradient {
    switch (this) {
      case GeniusButtonStyle.light:
        return const LinearGradient(
          colors: [
            Colors.white,
            Colors.white,
          ],
          begin: Alignment.topCenter,
          end: Alignment.bottomCenter,
        );
      case GeniusButtonStyle.dark:
        return C.GENIUS_PRIMARY_GRADIENT;
      case GeniusButtonStyle.darkLight:
        return C.GENIUS_PRIMARY_LIGHT_GRADIENT;
      case GeniusButtonStyle.black:
        return const LinearGradient(
          colors: [
            Colors.black,
            Colors.black,
          ],
          begin: Alignment.topCenter,
          end: Alignment.bottomCenter,
        );
      case GeniusButtonStyle.greyDark:
        return const LinearGradient(
          colors: [
            C.GENIUS_GREY_DARK,
            C.GENIUS_GREY_DARK,
          ],
          begin: Alignment.topCenter,
          end: Alignment.bottomCenter,
        );
      case GeniusButtonStyle.greyLight:
        return const LinearGradient(
          colors: [
            C.GENIUS_GREY_LIGHT,
            C.GENIUS_GREY_LIGHT,
          ],
          begin: Alignment.topCenter,
          end: Alignment.bottomCenter,
        );
      case GeniusButtonStyle.success:
        return C.GENIUS_SUCCESS_GRADIENT;
      case GeniusButtonStyle.error:
        return C.GENIUS_ERROR_GRADIENT;
      case GeniusButtonStyle.disable:
        return C.GENIUS_DISABLE_GRADIENT;
      case GeniusButtonStyle.transparent:
        return const LinearGradient(
          colors: [
            Colors.transparent,
            Colors.transparent,
          ],
          begin: Alignment.topCenter,
          end: Alignment.bottomCenter,
        );
    }
  }
}
---
Path: /lib/notifiers/themes_message_notifier.dart

---
Path: /lib/notifiers/setting_notifier.dart

import 'dart:convert';
import 'package:twins/models/setting_model.dart';
import 'package:twins/providers/genius_result_provider.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:shared_preferences/shared_preferences.dart';
part 'setting_notifier.g.dart';
@riverpod
class SettingNotifier extends _$SettingNotifier {
  static const String settingKey = 'settingKey';
  late SharedPreferences? _prefs;
  @override
  Setting build() {
    _prefs = ref.watch(prefsProvider).maybeMap(
        orElse: () => null,
        data: (value) {
          return value.value;
        });
    if (_prefs == null) {
      return Setting();
    }
    loadSetting();
    return state;
  }
  Future<void> loadSetting() async {
    String? settingDataString = _prefs?.getString(settingKey);
    if (settingDataString.isEmpty) {
      state = Setting();
      return;
    }
    try {
      final Map<String, Object?> json = jsonDecode(settingDataString);
      state = Setting.fromJson(json);
    } catch (e) {
      state = Setting();
    }
  }
  Future<void> setGlobalSoundEnabled(bool value) async {
    if (state.globalSoundEnabled == value) {
      return;
    }
    state = state.copyWith(globalSoundEnabled: value);
    _prefs?.setString(settingKey, jsonEncode(state.toJson()));
  }
  Future<void> setSFXEnabled(bool value) async {
    if (state.sfxEnabled == value) {
      return;
    }
    state = state.copyWith(sfxEnabled: value);
    _prefs?.setString(settingKey, jsonEncode(state.toJson()));
  }
  Future<void> setHapticEnabled(bool value) async {
    if (state.hapticEnabled == value) {
      return;
    }
    state = state.copyWith(hapticEnabled: value);
    _prefs?.setString(settingKey, jsonEncode(state.toJson()));
  }
}
---
Path: /lib/notifiers/modules_notifier.dart

import 'package:twins/features/profile/presentation/providers/profile_provider.dart';
import 'package:twins/providers/genius_api_provider.dart';
import 'package:twins/models/api/module_request.dart';
import 'package:twins/services/repositories/genius_repository.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
part 'modules_notifier.g.dart';
@riverpod
class ModulesNotifier extends _$ModulesNotifier {
  late GeniusRepository _geniusRepository;
  String? _userLevel;
  @override
  AsyncValue<List<GeniusModule>> build() {
    _geniusRepository = ref.watch(geniusRepositoryProvider);
    _userLevel = ref.watch(userProfileOrNullProvider)?.level;
    getModules();
    return const AsyncValue.loading();
  }
  Future<void> getModules({int? fakeDelaySeconds}) async {
    if (fakeDelaySeconds != null) {
      await Future.delayed(Duration(seconds: fakeDelaySeconds));
    }
    state = const AsyncValue.loading();
    try {
      state = AsyncValue.data(await _geniusRepository.fetchModules(_userLevel));
    } catch (e, stackTrace) {
      state = AsyncValue.error('Error', stackTrace);
    }
  }
}
---
Path: /lib/recognizers/callback_eager_gesture_recognizer.dart

import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
class CallbackEagerGestureRecognizer extends EagerGestureRecognizer {
  CallbackEagerGestureRecognizer({
    required this.callback,
  });
  final VoidCallback callback;
  @override
  void acceptGesture(int pointer) {
    super.acceptGesture(pointer);
    callback.call();
  }
  @override
  void rejectGesture(int pointer) {
    super.rejectGesture(pointer);
    callback.call();
  }
}
---
Path: /lib/hooks/use_api.dart

import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/services/api_service.dart';
import 'package:provider/provider.dart';
ApiService useApi() {
  return useContext().watch();
}
---
Path: /lib/hooks/use_logger.dart

import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:logger/logger.dart';
import 'package:provider/provider.dart';
Logger useLogger() {
  final context = useContext();
  return context.watch<Logger>();
}
---
Path: /lib/hooks/use_message_capability.dart

import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/services/message_capability_service.dart';
import 'package:provider/provider.dart';
MessageCapabilityService useMessageCapability() {
  return useContext().watch();
}
---
Path: /lib/hooks/use_package_info.dart

import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:package_info_plus/package_info_plus.dart';
PackageInfo? usePackageInfo() {
  final packageInfoRequest = useMemoized(() => PackageInfo.fromPlatform(), []);
  return useFuture(packageInfoRequest).data;
}
---
Path: /lib/hooks/use_iap.dart

import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/services/iap_service.dart';
import 'package:provider/provider.dart';
IapService useIap() {
  return useContext().watch();
}
---
Path: /lib/hooks/use_message_count_secure_storage.dart

import 'package:flutter_hooks/flutter_hooks.dart';
import 'package:twins/services/storage/message_count_secure_storage.dart';
import 'package:provider/provider.dart';
MessageCountSecureStorage useMessageCountSecureStorage() {
  return useContext().watch();
}
---
Path: /lib/utilities/analytics.dart

import 'dart:convert';
import 'package:amplitude_flutter/amplitude.dart';
import 'package:flutter/foundation.dart';
import 'package:logger/logger.dart';
import 'package:twins/utilities/logger.dart';
const _ANALYTICS_ENABLED = kReleaseMode;
const _AMPLITUDE_PROJECT_TOKEN = '4f898846ca8236e19228ee6ae9cec206';
class Analytics {
  static final _logger = Logger(
    printer: createSimplePrefixPrinter(
      PrettyPrinter(methodCount: 3),
      prefix: '[Analytics]',
    ),
  );
  static final amplitude = Amplitude.getInstance(instanceName: 'twins');
  Analytics._();
  static Future<void> initialize() async {
    await Future.wait([
      amplitude.init(_AMPLITUDE_PROJECT_TOKEN),
      amplitude.enableCoppaControl(),
      amplitude.trackingSessionEvents(_ANALYTICS_ENABLED),
      amplitude.setOptOut(false),
    ]);
  }
  static void track(String event, [Map<String, dynamic>? properties]) {
    _logger.i(
      'Tracking analytics event "$event" with the following properties:\n'
      '${properties != null ? jsonEncode(properties) : '(no properties)'}',
    );
    if (_ANALYTICS_ENABLED) {
      amplitude.logEvent(event, eventProperties: properties);
    }
  }
  static void trackAppOpen() {
    track('App Open');
  }
  static void trackMessage({
    required String lessonKey,
    required int length,
  }) {
    track('Message', {
      'Lesson Id': lessonKey,
      'Length': length,
    });
  }
  static void trackSpeechToText() {
    track('Speech to Text');
  }
  static void trackFreeTalkStart({
    required String simulationKey,
  }) {
    track('Free Talk Start', {
      'Simulation': simulationKey,
    });
  }
  static void trackFreeTalkEnd({
    required String simulationKey,
    required Duration duration,
    required int messageCount,
  }) {
    track('Free Talk End', {
      'Simulation': simulationKey,
      'Free Talk Duration': duration.inSeconds,
      'Messages': messageCount,
    });
  }
  static void trackSectionStart({
    required String sectionKey,
  }) {
    track('Section Start', {
      'Section Id': sectionKey,
    });
  }
  static void trackSectionEnd({
    required String sectionKey,
    required Duration duration,
    required bool isComplete,
  }) {
    track('Section End', {
      'Section Id': sectionKey,
      'Section Duration': duration.inSeconds,
      'Complete': isComplete,
    });
  }
  static void trackFreeTalkSummary({
    required String simulationKey,
    required Duration duration,
    required int? errors,
  }) {
    track('Free Talk Summary', {
      'Free Talk ID': simulationKey,
      'Duration': duration.inSeconds,
      'Errors': errors,
    });
  }
  static void trackPaywall(
      {required String reason,
      required bool subscribed,
      required bool restored,
      required Duration duration}) {
    track('Open Paywall', {
      'Reason': reason,
      'Subscribed': subscribed,
      'Restored': restored,
      'Duration': duration.inSeconds,
    });
  }
  static void trackCodeActivation({
    required String code,
  }) {
    track('Code Activation', {
      'Code': code,
    });
  }
}
---
Path: /lib/utilities/sentry.dart

import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:sentry_flutter/sentry_flutter.dart';
const _SENTRY_DSN =
    'https:
Future<void> runAppSafely(Widget app) async {
  if (!kReleaseMode) {
    runApp(ProviderScope(child: app));
    return;
  }
  await SentryFlutter.init(
    (options) {
      options.dsn = _SENTRY_DSN;
      options.tracesSampleRate = 1.0;
    },
    appRunner: () => runApp(ProviderScope(child: app)),
  );
}
---
Path: /lib/utilities/env.dart

import 'package:envied/envied.dart';
part 'env.g.dart';
@Envied(path: 'local.env')
abstract class Env {
  @EnviedField(varName: 'REVENUE_CAT_IOS_API_KEY', obfuscate: true)
  static final String revenueCatIosApiKey = _Env.revenueCatIosApiKey;
  @EnviedField(varName: 'REVENUE_CAT_ANDROID_API_KEY', obfuscate: true)
  static final String revenueCatAndroidApiKey = _Env.revenueCatAndroidApiKey;
  @EnviedField(varName: 'SUPABASE_URL')
  static const String supabaseUrl = _Env.supabaseUrl;
  @EnviedField(varName: 'SUPABASE_ANON_KEY')
  static const String supabaseAnonKey = _Env.supabaseAnonKey;
  @EnviedField(varName: 'API_URL', defaultValue: 'https:
  static const String apiUrl = _Env.apiUrl;
}
---
Path: /lib/utilities/snack_bar_helper.dart

import 'package:flutter/material.dart';
class SnackbarHelper {
  static void _showSnackBar(BuildContext context, String message, {Color? backgroundColor}) {
    final snackBar = SnackBar(
      duration: const Duration(seconds: 1),
      content: Center(
        child: GestureDetector(
          onTap: () {
            cancel(context);
          },
          child: Text(
            message,
            style: const TextStyle(color: Colors.white, fontSize: 18, fontWeight: FontWeight.w600),
          ),
        ),
      ),
      backgroundColor: backgroundColor,
    );
    ScaffoldMessenger.of(context).showSnackBar(snackBar);
  }
  static void showSuccess(BuildContext context, String message) {
    cancel(context);
    _showSnackBar(context, message, backgroundColor: Colors.green);
  }
  static void showError(BuildContext context, String message) {
    cancel(context);
    _showSnackBar(context, message, backgroundColor: Colors.red);
  }
  static void showWarning(BuildContext context, String message) {
    cancel(context);
    _showSnackBar(context, message, backgroundColor: Colors.orange.shade300);
  }
  static void cancel(BuildContext context) {
    ScaffoldMessenger.of(context).hideCurrentSnackBar();
  }
}
---
Path: /lib/utilities/custom_split.dart

import 'package:twins/models/api/lesson_request.dart';
enum WordElementType { STATIC, EMPTY, FILLED }
class WordElement {
  final TranslatedConcept concept;
  final WordElementType type;
  WordElement(this.concept, this.type);
}
List<String> customSplit(String text) {
  RegExp exp = RegExp(r'(\$w)');
  List<String> result = [];
  int lastIndex = 0;
  for (RegExpMatch match in exp.allMatches(text)) {
    if (match.start > lastIndex) {
      result.add(text.substring(lastIndex, match.start));
    }
    result.add(match[0]!);
    lastIndex = match.end;
  }
  if (lastIndex < text.length) {
    result.add(text.substring(lastIndex));
  }
  return result;
}
---
Path: /lib/utilities/shared_preferences_utils.dart

import 'package:shared_preferences/shared_preferences.dart';
class SharedPreferencesUtil {
  static SharedPreferences? _preferences;
  static Future<void> init() async {
    _preferences = await SharedPreferences.getInstance();
  }
  static bool getBool(String key, {bool defaultValue = false}) {
    return _preferences!.getBool(key) ?? defaultValue;
  }
  static Future<void> setBool(String key, bool value) async {
    await _preferences!.setBool(key, value);
  }
  static int getInt(String key, {int defaultValue = 0}) {
    return _preferences!.getInt(key) ?? defaultValue;
  }
  static Future<void> setInt(String key, int value) async {
    await _preferences!.setInt(key, value);
  }
  static String getString(String key, {String defaultValue = ''}) {
    return _preferences!.getString(key) ?? defaultValue;
  }
  static Future<void> setString(String key, String value) async {
    await _preferences!.setString(key, value);
  }
  static double getDouble(String key, {double defaultValue = 0.0}) {
    return _preferences!.getDouble(key) ?? defaultValue;
  }
  static Future<void> setDouble(String key, double value) async {
    await _preferences!.setDouble(key, value);
  }
  static List<String> getStringList(String key, {List<String> defaultValue = const []}) {
    return _preferences!.getStringList(key) ?? defaultValue;
  }
  static Future<void> setStringList(String key, List<String> value) async {
    await _preferences!.setStringList(key, value);
  }
  static Future<void> remove(String key) async {
    await _preferences!.remove(key);
  }
  static Future<void> clear() async {
    await _preferences!.clear();
  }
}
---
Path: /lib/utilities/key.dart

import 'package:flutter/material.dart';
final NAVIGATOR_KEY = GlobalKey<NavigatorState>();
---
Path: /lib/utilities/logger.dart

import 'package:logger/logger.dart';
LogPrinter createSimplePrefixPrinter(
  LogPrinter realPrinter, {
  required String prefix,
}) =>
    PrefixPrinter(
      realPrinter,
      debug: prefix,
      error: prefix,
      info: prefix,
      verbose: prefix,
      warning: prefix,
      wtf: prefix,
    );
---
Path: /lib/mixins/widget.dart

import 'package:flutter/material.dart';
import 'package:flutter/scheduler.dart';
import 'package:twins/utilities/key.dart';
mixin PageWidget<T> on Widget {
  Future<T?> show() async {
    return await Navigator.push<T>(
      NAVIGATOR_KEY.currentContext!,
      MaterialPageRoute(builder: (_) => this),
    );
  }
  void dismiss([T? result]) {
    Navigator.maybePop(NAVIGATOR_KEY.currentContext!, result);
  }
}
mixin DialogWidget<T> on Widget {
  Future<T?> show({double? heightFactor, Offset? anchorPoint}) async {
    Widget content = this;
    if (heightFactor != null) {
      content = FractionallySizedBox(heightFactor: heightFactor, child: content);
    }
    return await showDialog<T>(
      anchorPoint: anchorPoint,
      context: NAVIGATOR_KEY.currentContext!,
      barrierColor: Colors.black38,
      builder: (_) => Dialog(
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(20.0), 
        ),
        child: content,
      ),
    );
  }
  void dismiss([T? result]) {
    SchedulerBinding.instance.addPostFrameCallback((_) {
      Navigator.maybePop(NAVIGATOR_KEY.currentContext!, result);
    });
  }
}
mixin FractionedBottomSheetWidget<T> on Widget {
  Future<T?> show({double heightFactor = 0.5}) async {
    return await showModalBottomSheet<T>(
      context: NAVIGATOR_KEY.currentContext!,
      useSafeArea: true,
      isScrollControlled: true,
      builder: (context) {
        return FractionallySizedBox(
          heightFactor: heightFactor,
          child: Container(
            color: Colors.white,
            child: Padding(
              padding: EdgeInsets.only(bottom: MediaQuery.of(context).viewInsets.bottom),
              child: SingleChildScrollView(
                child: this,
              ),
            ),
          ),
        );
      },
    );
  }
  void dismiss([T? result]) {
    SchedulerBinding.instance.addPostFrameCallback((_) {
      Navigator.maybePop(NAVIGATOR_KEY.currentContext!, result);
    });
  }
}
mixin BottomSheetWidget<T> on Widget {
  Future<T?> show() async {
    return await showModalBottomSheet<T>(
      context: NAVIGATOR_KEY.currentContext!,
      isScrollControlled: true,
      builder: (context) {
        return this;
      },
    );
  }
  void dismiss([T? result]) {
    SchedulerBinding.instance.addPostFrameCallback((_) {
      Navigator.maybePop(NAVIGATOR_KEY.currentContext!, result);
    });
  }
}
---
Path: /lib/core/exceptions/app_exceptions.dart

import 'package:equatable/equatable.dart';
import 'package:twins/core/domain/entities/either.dart';
import 'package:twins/core/domain/entities/response.dart';
class AppException implements Exception {
  final String message;
  final int statusCode;
  final String identifier;
  const AppException({
    required this.message,
    required this.statusCode,
    required this.identifier,
  });
  @override
  String toString() {
    return 'statusCode=$statusCode\nmessage=$message\nidentifier=$identifier';
  }
}
class NotificationPermissionPermanentlyDeniedException extends Equatable implements AppException {
  const NotificationPermissionPermanentlyDeniedException();
  @override
  String get identifier => 'Notification permission permanently denied';
  @override
  String get message => 'Notification permission permanently denied';
  @override
  int get statusCode => 100;
  @override
  List<Object?> get props => [message, statusCode, identifier];
}
class CacheFailureException extends Equatable implements AppException {
  final String errorMessage;
  const CacheFailureException(this.errorMessage);
  @override
  String get identifier => 'Cache failure exception';
  @override
  String get message => 'Unable to save user: $errorMessage';
  @override
  int get statusCode => 400;
  @override
  List<Object?> get props => [message, statusCode, identifier];
}
class AuthException extends Equatable implements AppException {
  const AuthException();
  @override
  String get identifier => 'Auth failure exception';
  @override
  String get message => 'Unable to authenticate user';
  @override
  int get statusCode => 500;
  @override
  List<Object?> get props => [message, statusCode, identifier];
}
class EmailAlreadyInUseException extends AppException {
  const EmailAlreadyInUseException()
      : super(
          message: 'Email already in use',
          statusCode: 500,
          identifier: 'Email already in use',
        );
}
class UserNotFoundException extends AppException {
  const UserNotFoundException()
      : super(
          message: 'User not found',
          statusCode: 500,
          identifier: 'User not found',
        );
}
class InvalidCredentialException extends AppException {
  const InvalidCredentialException()
      : super(
          message: 'Invalid credential',
          statusCode: 500,
          identifier: 'Invalid credential',
        );
}
class TooManyRequestsException extends AppException {
  const TooManyRequestsException()
      : super(
          message: 'Too many requests',
          statusCode: 500,
          identifier: 'Too many requests',
        );
}
extension HttpExceptionExtension on AppException {
  Left<AppException, Response> get toLeft => Left<AppException, Response>(this);
}
---
Path: /lib/core/domain/entities/response.dart

import 'package:freezed_annotation/freezed_annotation.dart';
part 'response.freezed.dart';
part 'response.g.dart';
@freezed
class Response with _$Response {
  factory Response({
    required int statusCode,
    String? statusMessage,
    dynamic data,
  }) = _Response;
  factory Response.fromJson(Map<String, dynamic> json) => _$ResponseFromJson(json);
}
---
Path: /lib/core/domain/entities/either.dart

sealed class Either<L, R> {
  const Either();
  factory Either.left(L l) => Left(l);
  factory Either.right(R r) => Right(r);
  T fold<T>(T Function(L) left, T Function(R) right) => switch (this) {
        Left(:final value) => left(value),
        Right(:final value) => right(value),
      };
  bool isLeft() => switch (this) {
        Left() => true,
        Right() => false,
      };
  bool isRight() => !isLeft();
  R? get rightOrNull => switch (this) {
        Left() => null,
        Right(:final value) => value,
      };
  L? get leftOrNull => switch (this) {
        Left(:final value) => value,
        Right() => null,
      };
}
class Left<L, R> extends Either<L, R> {
  final L _l;
  const Left(this._l);
  L get value => _l;
}
class Right<L, R> extends Either<L, R> {
  final R _r;
  const Right(this._r);
  R get value => _r;
}
---
Path: /lib/core/usecases/usecase.dart

import 'package:twins/core/domain/entities/either.dart';
import 'package:twins/core/exceptions/app_exceptions.dart';
abstract class UseCase<Type, Params> {
  Future<Either<AppException, Type>> call(Params params);
}
---
Path: /lib/core/usecases/empty_params.dart

abstract class EmptyParams {
  const EmptyParams();
}
class NoParams extends EmptyParams {
  const NoParams();
}
---
Path: /lib/providers/genius_api_provider.dart

import 'package:twins/providers/dio_client_provider.dart';
import 'package:twins/services/api/genius_api.dart';
import 'package:twins/services/repositories/genius_repository.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
part 'genius_api_provider.g.dart';
@riverpod
GeniusApi geniusApi(GeniusApiRef ref) {
  return GeniusApi(ref.read(dioClientProvider));
}
@riverpod
GeniusRepository geniusRepository(GeniusRepositoryRef ref) {
  return GeniusRepository(ref.read(geniusApiProvider));
}
---
Path: /lib/providers/dio_client_provider.dart

import 'package:dio/dio.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:twins/components/app_asset.dart';
part 'dio_client_provider.g.dart';
@riverpod
Dio dioClient(DioClientRef ref) {
  final dio = Dio();
  final String apiUrl = AppConstants.apiUrl;
  dio.options.baseUrl = apiUrl;
  dio.options.headers = {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
    'learning-language': 'en',
    'user-language': 'ja',
  };
  dio.interceptors.addAll([
    InterceptorsWrapper(onRequest: (options, handler) async {
      final session = Supabase.instance.client.auth.currentSession;
      final token = session?.accessToken;
      if (token != null) {
        options.headers['Authorization'] = 'Bearer $token';
      } else {
        dio.options.headers.remove('Authorization');
      }
      return handler.next(options);
    })
  ]);
  return dio;
}
---
Path: /lib/providers/genius_result_provider.dart

import 'package:collection/collection.dart';
import 'package:twins/features/profile/presentation/providers/profile_provider.dart';
import 'package:twins/models/api/lesson_request.dart';
import 'package:twins/models/api/module_request.dart';
import 'package:twins/models/api/section_request.dart';
import 'package:twins/models/results/lesson_result.dart';
import 'package:twins/models/results/level_result.dart';
import 'package:twins/models/results/module_result.dart';
import 'package:twins/models/results/section_result.dart';
import 'package:twins/services/genius_result_service.dart';
import 'package:twins/services/repositories/genius_result_repository.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:shared_preferences/shared_preferences.dart';
part 'genius_result_provider.g.dart';
@riverpod
Future<SharedPreferences> prefs(PrefsRef ref) async {
  return SharedPreferences.getInstance();
}
@riverpod
GeniusResultRepository? geniusResultRepository(GeniusResultRepositoryRef ref) {
  final prefs = ref.watch(prefsProvider);
  return prefs.maybeMap(
      orElse: () => null,
      data: (value) {
        return GeniusResultRepository(value.value);
      });
}
@riverpod
LevelResult? levelResult(
  LevelResultRef ref, {
  required String level,
}) {
  final result = ref.watch(geniusResultServiceProvider);
  if (result == null) return null;
  return result.levels[level];
}
@riverpod
ModuleResult? moduleResult(
  ModuleResultRef ref, {
  required String level,
  required String module,
}) {
  final result = ref.watch(levelResultProvider(level: level));
  if (result == null) return null;
  return result.modules[module];
}
@riverpod
List<SectionResult> sectionResultsByKey(
  SectionResultsByKeyRef ref, {
  required String level,
  required String key,
}) {
  final result = ref.watch(levelResultProvider(level: level));
  final List<SectionResult> sections = [];
  if (result == null) return [];
  for (final moduleResult in result.modules.keys) {
    final module = result.modules[moduleResult];
    if (module == null) continue;
    for (final lessonResult in module.lessons.keys) {
      final lesson = module.lessons[lessonResult];
      if (lesson == null) continue;
      for (final sectionResult in lesson.sections.keys) {
        if (sectionResult != key) continue;
        final section = lesson.sections[sectionResult];
        if (section == null) continue;
        sections.add(section);
      }
    }
  }
  return sections;
}
@riverpod
double vocabularyScore(
  VocabularyScoreRef ref, {
  required String level,
}) {
  final sections =
      ref.watch(sectionResultsByKeyProvider(level: level, key: SectionType.VOCABULARY.name));
  if (sections.isEmpty) return 0.0;
  final sum = sections.map((e) => e.score).reduce((a, b) => a + b);
  return sum / sections.length;
}
@riverpod
double listeningScore(
  ListeningScoreRef ref, {
  required String level,
}) {
  final sections =
      ref.watch(sectionResultsByKeyProvider(level: level, key: SectionType.LISTENING.name));
  if (sections.isEmpty) return 0.0;
  final sum = sections.map((e) => e.score).reduce((a, b) => a + b);
  return sum / sections.length;
}
@riverpod
LessonResult? lessonResult(
  LessonResultRef ref, {
  required String level,
  required String module,
  required String lesson,
}) {
  final result = ref.watch(moduleResultProvider(level: level, module: module));
  if (result == null) return null;
  return result.lessons[lesson];
}
@riverpod
SectionResult? sectionResult(
  SectionResultRef ref, {
  required String level,
  required String module,
  required String lesson,
  required String section,
}) {
  final result = ref.watch(lessonResultProvider(level: level, module: module, lesson: lesson));
  if (result == null) return null;
  return result.sections[section];
}
@riverpod
String? currentLevel(
  CurrentLevelRef ref,
) {
  return ref.watch(userProfileOrNullProvider)?.level;
}
@riverpod
double lessonProgress(
  LessonProgressRef ref, {
  required String level,
  required String module,
  required String lesson,
  required LessonData? lessonData,
}) {
  if (lessonData == null) return 0.0;
  final result = ref.watch(lessonResultProvider(level: level, module: module, lesson: lesson));
  if (result == null) return 0;
  return result.sections.length / lessonData.sections.length;
}
@riverpod
double moduleProgress(
  ModuleProgressRef ref, {
  required String level,
  required String module,
  required GeniusModule? moduleData,
}) {
  if (moduleData == null) return 0.0;
  final result = ref.watch(moduleResultProvider(level: level, module: module));
  if (result == null) return 0.0;
  double sum = result.lessons.keys.map((key) {
    return ref.read(
      lessonProgressProvider(
        level: level,
        module: module,
        lesson: key,
        lessonData: moduleData.lessons.firstWhere((element) => element.key == key),
      ),
    );
  }).reduce((a, b) => a + b);
  return sum / moduleData.lessons.length;
}
@riverpod
double levelProgress(
  LevelProgressRef ref, {
  required String level,
  required List<GeniusModule> modules,
}) {
  final result = ref.watch(levelResultProvider(level: level));
  if (result == null) return 0;
  double sum = result.modules.keys.map((key) {
    GeniusModule? module = modules.firstWhereOrNull((element) => element.key == key);
    return ref.read(
      moduleProgressProvider(
        level: level,
        module: key,
        moduleData: module,
      ),
    );
  }).reduce((a, b) => a + b);
  return modules.isNotEmpty ? sum / modules.length : 0;
}
@riverpod
GeniusModule? moduleToWorkOn(
  ModuleToWorkOnRef ref, {
  required String level,
  required List<GeniusModule> modules,
}) {
  GeniusModule? targetModule;
  if (modules.isEmpty) return null;
  for (var module in modules) {
    final moduleProgress = ref.read(moduleProgressProvider(
      level: level,
      module: module.key,
      moduleData: module,
    ));
    if (moduleProgress < 1.0) {
      targetModule = module;
      break;
    }
  }
  return targetModule ?? modules.first;
}
---
Path: /lib/providers/setting_provider.dart

import 'package:twins/notifiers/setting_notifier.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
part 'setting_provider.g.dart';
@riverpod
bool sfxEnabled(SfxEnabledRef ref) {
  final sfxEnabled = ref.watch(settingNotifierProvider.select((value) => value.sfxEnabled));
  return sfxEnabled;
}
@riverpod
bool hapticEnabled(HapticEnabledRef ref) {
  final hapticEnabled = ref.watch(settingNotifierProvider.select((value) => value.hapticEnabled));
  return hapticEnabled;
}
---
Path: /lib/providers/speech_to_text_provider.dart

import 'package:twins/models/speech_to_text_model.dart';
import 'package:twins/services/speech_to_text_service.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
part 'speech_to_text_provider.g.dart';
@riverpod
bool speechToTextHasAccess(SpeechToTextHasAccessRef ref) {
  final hasAccess = ref.watch(speechToTextServiceProvider.select((value) => value.hasAccess));
  return hasAccess;
}
@riverpod
SpeechToTextStatus speechToTextStatus(SpeechToTextStatusRef ref) {
  final status = ref.watch(speechToTextServiceProvider.select((value) => value.status));
  return status;
}
@riverpod
bool speechToTextIsListening(SpeechToTextIsListeningRef ref) {
  final status = ref.watch(speechToTextStatusProvider);
  return status == SpeechToTextStatus.listening;
}
@riverpod
Stream<String> speechToTextListenStream(SpeechToTextListenStreamRef ref) {
  final speechToText = ref.watch(speechToTextServiceProvider.notifier);
  return speechToText.listen();
}
---
Path: /lib/providers/asset_or_network_file_provider.dart

import 'dart:convert';
import 'dart:io';
import 'package:crypto/crypto.dart';
import 'package:dio/dio.dart';
import 'package:twins/models/api/section_request.dart';
import 'package:path_provider/path_provider.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:flutter/services.dart';
import 'dio_client_provider.dart';
part 'asset_or_network_file_provider.g.dart';
Future<ByteData?> getAssetOrNetworkFile(Dio dio, String uri) async {
  final isRemote = uri.startsWith('http');
  String filePath = uri;
  if (!isRemote) {
    try {
      return await rootBundle.load(uri);
    } catch (e) {
      return null;
    }
  }
  final tempDir = await getTemporaryDirectory();
  filePath = '${tempDir.path}/${md5.convert(utf8.encode(uri)).toString()}';
  final file = File(filePath);
  if (await file.exists()) {
    try {
      return file.readAsBytesSync().buffer.asByteData();
    } catch (e) {
      return null;
    }
  } else {
    try {
      final res = await dio.get(
        uri,
        options: Options(responseType: ResponseType.bytes),
      );
      await file.writeAsBytes(res.data);
      return file.readAsBytesSync().buffer.asByteData();
    } catch (e) {
      return null;
    }
  }
}
@riverpod
Future<ByteData?> assetOrNetworkFile(AssetOrNetworkFileRef ref, String uri) async {
  final dio = ref.watch(dioClientProvider);
  return getAssetOrNetworkFile(dio, uri);
}
@riverpod
Future<List<ByteData?>> preloadSection(PreloadSectionRef ref, SectionData section) async {
  final dio = ref.watch(dioClientProvider);
  final uniqUris = section.neededFiles.toSet().toList();
  final byteDataList = await Future.wait(uniqUris.map((uri) async {
    return getAssetOrNetworkFile(dio, uri);
  }));
  return byteDataList;
}
---
Path: /lib/providers/feedback_helper_provider.dart

import 'package:flutter/services.dart';
import 'package:twins/providers/setting_provider.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:twins/services/audio_player_service.dart';
part 'feedback_helper_provider.g.dart';
@riverpod
class FeedbackHelper extends _$FeedbackHelper {
  late bool _hapticEnabled, _sfxEnabled;
  late AudioPlayerService _audioPlayerService;
  @override
  FeedbackHelper build() {
    _audioPlayerService = ref.watch(audioPlayerServiceProvider(AudioPlayerType.FEEDBACK).notifier);
    _hapticEnabled = ref.watch(hapticEnabledProvider.select((value) => value));
    _sfxEnabled = ref.watch(sfxEnabledProvider.select((value) => value));
    return state;
  }
  Future<void> Success({hapticEnabled = true, sfxEnabled = true}) async {
    if (_hapticEnabled && hapticEnabled) {
      HapticFeedback.lightImpact();
    }
    if (_sfxEnabled && sfxEnabled) {
      String assetPath = 'assets/audios/SuccessExercises.mp3';
      _audioPlayerService.play(assetPath);
    }
  }
  Future<void> Failure() async {
    if (_hapticEnabled) {
      HapticFeedback.lightImpact();
    }
    if (_sfxEnabled) {
      String assetPath = 'assets/audios/FailureExercises.mp3';
      _audioPlayerService.play(assetPath);
    }
  }
  Future<void> Finish() async {
    if (_hapticEnabled) {
      HapticFeedback.lightImpact();
    }
    if (_sfxEnabled) {
      String assetPath = 'assets/audios/EndofLessonSuccess.mp3';
      _audioPlayerService.play(assetPath);
    }
  }
}
---
Path: /lib/providers/shared_preferences_provider.dart

import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:shared_preferences/shared_preferences.dart';
part 'shared_preferences_provider.g.dart';
@riverpod
Future<SharedPreferences> sharedPreferences(SharedPreferencesRef ref) async {
  return await SharedPreferences.getInstance();
}
@riverpod
SharedPreferences? sharedPreferencesOrNull(SharedPreferencesOrNullRef ref) {
  return ref.watch(sharedPreferencesProvider).whenOrNull(data: (value) => value);
}
---
Path: /lib/providers/tts_provider.dart

import 'dart:io';
import 'package:path_provider/path_provider.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:twins/features/tts/domain/providers/tts_client_provider.dart';
import 'package:twins/services/audio_player_service.dart';
part 'tts_provider.g.dart';
@riverpod
class TtsNotifier extends _$TtsNotifier {
  late AudioPlayerService _audioPlayerService;
  @override
  AudioPlayerState build(AudioPlayerType type) {
    _audioPlayerService = ref.watch(audioPlayerServiceProvider(type).notifier);
    return ref.watch(audioPlayerServiceProvider(type));
  }
  String _buildFileName(String text, String characterId) {
    String hashedString = text + characterId;
    return '${hashedString.hashCode}.mp3'; 
  }
  Future<bool> audioExists(String text, String characterId) {
    String fileName = _buildFileName(text, characterId);
    return getTemporaryDirectory().then((tempDir) async {
      File file = File('${tempDir.path}/$fileName');
      return await file.exists();
    });
  }
  Future<void> playAudio(String text, String characterId) async {
    try {
      String fileName = _buildFileName(text, characterId);
      var tempDir = await getTemporaryDirectory();
      File file = File('${tempDir.path}/$fileName');
      if (!await file.exists()) {
        final getAudioFromTextUseCase = ref.read(getAudioFromTextUseCaseProvider);
        List<int>? bytes = await getAudioFromTextUseCase.call(text, characterId);
        await file.writeAsBytes(bytes);
      }
      final bytes = await file.readAsBytes();
      _audioPlayerService.playFile(data: bytes.buffer.asByteData(), fileName: fileName);
    } catch (e) {
      return;
    }
  }
  void stop() {
    _audioPlayerService.stop();
  }
}
---
Path: /lib/services/speech_to_text_service.dart

import 'dart:async';
import 'package:twins/models/speech_to_text_model.dart';
import 'package:logger/logger.dart';
import 'package:twins/utilities/analytics.dart';
import 'package:twins/utilities/logger.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:rxdart/subjects.dart';
import 'package:speech_to_text/speech_to_text.dart';
import 'package:collection/collection.dart';
part 'speech_to_text_service.g.dart';
@riverpod
class SpeechToTextService extends _$SpeechToTextService {
  @override
  SpeechToTextState build() {
    _initialize();
    return const SpeechToTextState(
      hasAccess: false,
      status: SpeechToTextStatus.stopped,
      error: null,
    );
  }
  final Logger _logger = Logger(
    printer: createSimplePrefixPrinter(
      PrettyPrinter(methodCount: 3),
      prefix: '[Speech-to-Text]',
    ),
  );
  final SpeechToText _speechToText = SpeechToText();
  var _availableLocales = <LocaleName>[];
  var _isInitialized = false;
  LocaleName? _locale;
  bool get _isReady => _isInitialized && _locale != null;
  void _initialize() async {
    try {
      _logger.i('Speech-to-text trying to initialize');
      final success = await _speechToText.initialize(
        onStatus: (status) {
          _logger.i('Speech-to-text status changed to $status.');
          SpeechToTextStatus currentStatus;
          if (status == SpeechToText.listeningStatus) {
            currentStatus = SpeechToTextStatus.listening;
          } else if (status == SpeechToText.notListeningStatus) {
            currentStatus = SpeechToTextStatus.stopped;
          } else {
            currentStatus = SpeechToTextStatus.failure;
          }
          state = state.copyWith(status: currentStatus);
        },
        onError: (error) {
          state = state.copyWith(status: SpeechToTextStatus.failure, error: error.errorMsg);
        },
      );
      if (success) {
        _logger.i('Speech-to-text initialized successfully.');
        _isInitialized = true;
        _availableLocales = await _speechToText.locales();
        setLanguage('en');
      } else {
        _logger.i('Speech-to-text failed to initialize.');
      }
    } catch (error) {
      _logger.e('Speech-to-text failed to initialize and produced an error.', error);
    }
  }
  bool setLanguage(String language) {
    if (_availableLocales.isEmpty) {
      state = state.copyWith(error: 'Speech-to-text locales have not loaded yet.');
      return false;
    }
    final locale =
        _availableLocales.firstWhereOrNull((locale) => locale.localeId.startsWith(language));
    if (locale != null) {
      _logger.i(
        'Now using speech-to-text locale ${locale.name} (${locale.localeId}), '
        'mapped from language "$language".',
      );
      _locale = locale;
      state = state.copyWith(hasAccess: true, error: null, status: SpeechToTextStatus.stopped);
    } else {
      _logger.w(
        'Failed to find a speech-to-text locale for language "$language". '
        'Available locales are: ${_availableLocales.map((locale) => "${locale.name} (${locale.localeId})").join(', ')}.',
      );
      state = state.copyWith(
          hasAccess: true,
          error: 'Failed to find a speech-to-text locale for language "$language". ');
      _locale = null;
    }
    return _locale != null;
  }
  Stream<String> listen() {
    if (!_isReady) {
      throw StateError('Speech-to-text is not ready yet.');
    }
    Analytics.trackSpeechToText();
    final subject = PublishSubject<String>();
    _speechToText.listen(
      localeId: _locale?.localeId,
      listenMode: ListenMode.search,
      cancelOnError: true,
      partialResults: true,
      onResult: (result) {
        _logger.i('Speech-to-text result: ${result.recognizedWords}');
        _logger.i('Speech-to-text isFinal: ${result.finalResult}');
        subject.add(result.recognizedWords);
        if (result.finalResult) {
          subject.close();
        }
      },
    );
    return subject.stream;
  }
  void stop() {
    _speechToText.stop();
  }
  void cancel() {
    _speechToText.cancel();
  }
}
---
Path: /lib/services/message_capability_service.dart

import 'package:flutter/foundation.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:twins/hooks/use_logger.dart';
import 'package:twins/models/user_capability.dart';
import 'package:twins/services/iap_service.dart';
import 'package:twins/services/storage/message_count_secure_storage.dart';
extension on DateTime {
  DateTime clearTimeAfterDuration(Duration duration) {
    if (duration >= const Duration(days: 1)) {
      return DateTime(year, month, day);
    } else if (duration >= const Duration(hours: 1)) {
      return DateTime(year, month, day, hour);
    } else if (duration >= const Duration(minutes: 1)) {
      return DateTime(year, month, day, hour, minute);
    } else if (duration >= const Duration(milliseconds: 1)) {
      return DateTime(year, month, day, hour, minute, second, millisecond);
    }
    return this;
  }
}
class MessageCapabilityService extends ChangeNotifier {
  static const int _messageLimit = 30;
  UserCapabilityState _state = const UserCapabilityState.initial();
  int _messageCount = 0;
  static const Duration _messageLimitDuration = Duration(days: 1);
  static const String _capabilityMessageDateKey = 'capability_message_date';
  static const String _activationCodeKey = 'activation_code';
  DateTime? _capabilityMessageDate;
  final IapService _iapService;
  final MessageCountSecureStorage _messageCountSecureStorage;
  final FlutterSecureStorage _secureStorage;
  MessageCapabilityService({
    required IapService iapService,
    required MessageCountSecureStorage messageCountSecureStorage,
    required FlutterSecureStorage secureStorage,
  })  : _iapService = iapService,
        _messageCountSecureStorage = messageCountSecureStorage,
        _secureStorage = secureStorage {
    _initialize();
  }
  UserCapabilityState get state => _state;
  final _logger = useLogger();
  Future<void> _initialize() async {
    await _loadCapabilityMessageDate();
    await _loadMessageCount();
    await _updateState();
  }
  bool checkResetMessageCount() {
    DateTime currentDate = DateTime.now().clearTimeAfterDuration(_messageLimitDuration);
    _logger.d('Current date: $currentDate');
    _logger.d(
        'Capability message date: ${_capabilityMessageDate!.clearTimeAfterDuration(_messageLimitDuration)}');
    final difference = currentDate
        .difference(_capabilityMessageDate!.clearTimeAfterDuration(_messageLimitDuration));
    if (difference >= _messageLimitDuration) {
      _logger.d('Need to reset message count and date');
      return true;
    }
    return false;
  }
  Future<void> _loadCapabilityMessageDate() async {
    final capabilityMessageDate = await _secureStorage.read(key: _capabilityMessageDateKey);
    if (capabilityMessageDate != null) {
      _capabilityMessageDate = DateTime.parse(capabilityMessageDate);
      return;
    }
    var date = DateTime.now().clearTimeAfterDuration(_messageLimitDuration);
    await _storeCapabilityMessageDate(date);
  }
  Future<void> _storeCapabilityMessageDate(DateTime date) async {
    final dateString = date.toIso8601String();
    await _secureStorage.write(key: _capabilityMessageDateKey, value: dateString);
    _capabilityMessageDate = date;
  }
  Future<void> _loadMessageCount() async {
    final count = await _messageCountSecureStorage.read();
    _messageCount = count ?? 0;
  }
  Future<void> incrementMessageCount() async {
    _messageCount++;
    _logger.d('Message count: $_messageCount');
    await _messageCountSecureStorage.increment();
    _updateState();
  }
  Future<void> _updateState() async {
    if (await _canSend()) {
      _state = const UserCapabilityState.can();
    } else {
      _state = const UserCapabilityState.limitReached();
    }
    notifyListeners();
  }
  Future<void> _resetMessageCount() async {
    var date = DateTime.now().clearTimeAfterDuration(_messageLimitDuration);
    _logger.d('New capability message date: $date');
    await _storeCapabilityMessageDate(date);
    _capabilityMessageDate = date;
    _messageCount = 0;
    await _messageCountSecureStorage.clear();
  }
  Future<bool> _isActivatedByCode() async {
    final code = await _secureStorage.read(key: _activationCodeKey);
    return code != null;
  }
  Future<bool> _canSend() async {
    if (_iapService.isPro) {
      return true;
    }
    if (await _isActivatedByCode()) {
      return true;
    }
    if (checkResetMessageCount()) {
      await _resetMessageCount();
    }
    return _messageCount < _messageLimit;
  }
  Future<bool> get canSendMessage async => await _canSend();
  Future<void> activateByCode(String code) async {
    await _secureStorage.write(key: _activationCodeKey, value: code);
  }
  Future<void> reset() async {
    await _resetMessageCount();
    await _updateState();
    await _secureStorage.delete(key: _activationCodeKey);
  }
}
---
Path: /lib/services/currency_service.dart

import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:twins/services/storage/currency_storage.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
part 'currency_service.g.dart';
@riverpod
class CurrencyService extends _$CurrencyService {
  final CurrencyStorage _storage = CurrencyStorage(const FlutterSecureStorage());
  @override
  int build() {
    getCurrency();
    return 0;
  }
  void getCurrency() async {
    state = await _storage.read() ?? 0;
  }
  void setCurrency(int currency) {
    _storage.save(currency);
    state = currency;
  }
  void addCurrency(int currency) {
    _storage.add(currency);
    state = state + currency;
  }
  void subCurrency(int currency) {
    _storage.sub(currency);
    state = state - currency;
  }
  bool canAfford(int cost) {
    return state >= cost;
  }
}
---
Path: /lib/services/notifications_panel_service.dart

import 'package:flutter/material.dart';
import 'package:twins/models/notification_panel_model.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
part 'notifications_panel_service.g.dart';
@riverpod
class NotificationsPanelService extends _$NotificationsPanelService {
  @override
  List<NotificationPanelData> build() {
    return [];
  }
  void addNotificationPanelData(NotificationPanelType notificationType, Widget child) {
    String generatedId = UniqueKey().toString();
    NotificationPanelData notificationPanelData = NotificationPanelData(
      id: generatedId,
      notificationType: notificationType,
      child: child,
    );
    state = [...state, notificationPanelData];
  }
  void removeNotificationPanelData(String id) {
    state = state.where((element) {
      return element.id != id;
    }).toList();
  }
}
---
Path: /lib/services/iap_service.dart

import 'dart:io' show Platform;
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'package:twins/utilities/logger.dart';
import 'package:logger/logger.dart';
import 'package:purchases_flutter/purchases_flutter.dart';
import 'package:twins/utilities/env.dart';
const _GENIUS_PRO_PRODUCT_ID = 'subscription_monthly_1';
class IapService extends ChangeNotifier {
  StoreProduct? _pro;
  StoreProduct? get pro => _pro;
  CustomerInfo? _info;
  CustomerInfo? get info => _info;
  bool get isPro => _info?.entitlements.active.containsKey('pro') ?? false;
  final _logger = Logger(
    printer: createSimplePrefixPrinter(
      PrettyPrinter(methodCount: 3),
      prefix: '[IAP]',
    ),
  );
  IapService() {
    _initialize();
  }
  void _initialize() async {
    await Purchases.setLogLevel((!kReleaseMode) ? LogLevel.debug : LogLevel.error);
    PurchasesConfiguration configuration;
    if (Platform.isAndroid) {
      configuration = PurchasesConfiguration(Env.revenueCatAndroidApiKey);
    } else if (Platform.isIOS) {
      configuration = PurchasesConfiguration(Env.revenueCatIosApiKey);
    } else {
      throw Exception('Unsupported platform');
    }
    await Purchases.configure(configuration);
    _info = await Purchases.getCustomerInfo();
    final products = await Purchases.getProducts(
      [_GENIUS_PRO_PRODUCT_ID],
      type: PurchaseType.subs,
    );
    if (products.isNotEmpty) {
      _pro = products.first;
    }
    notifyListeners();
  }
  Future<bool> purchasePro() async {
    try {
      _info = await Purchases.purchaseProduct(
        _GENIUS_PRO_PRODUCT_ID,
        type: PurchaseType.inapp,
      );
      notifyListeners();
      return true;
    } 
    on PlatformException catch (e) {
      if (PurchasesErrorHelper.getErrorCode(e) == PurchasesErrorCode.purchaseCancelledError) {
      } else {
        _logger.log(Level.error, "Error: ${PurchasesErrorHelper.getErrorCode(e)}: ${e.toString()}");
      }
    } catch (e) {
      _logger.log(Level.error, e.toString());
    }
    return false;
  }
  Future<bool> restorePro() async {
    try {
      _info = await Purchases.restorePurchases();
      notifyListeners();
      if (!isPro) {
        return false;
      }
      return true;
    } on PlatformException catch (e) {
      if (PurchasesErrorHelper.getErrorCode(e) == PurchasesErrorCode.purchaseCancelledError) {
        _logger.log(Level.error, 'Restore canceled: ${e.toString()}');
      } else {
        _logger.log(Level.error, "Error: ${PurchasesErrorHelper.getErrorCode(e)}: ${e.toString()}");
      }
    } catch (e) {
      _logger.log(Level.error, e.toString());
    }
    return false;
  }
}
---
Path: /lib/services/store_messages_service.dart

import 'package:twins/models/api/chat_request.dart';
import 'package:twins/utilities/shared_preferences_utils.dart';
import 'dart:convert';
class StorageMessagesService {
  static Map<String, List<ChatExchange>> cachedChatHistory = {};
  static const int maxMessages = 100;
  static Future<void> saveChatHistory({required String conversationKey}) async {
    List<ChatExchange> tmp = cachedChatHistory[conversationKey] ?? [];
    if (cachedChatHistory.length > maxMessages) {
      tmp = tmp.sublist(tmp.length - maxMessages);
    }
    final List<String> stringChatHistory =
        tmp.map((chatExchange) => jsonEncode(chatExchange.toJson())).toList();
    await SharedPreferencesUtil.setStringList('chat_history_$conversationKey', stringChatHistory);
  }
  static Future<List<ChatExchange>> getChatHistory({required String conversationKey}) async {
    final List<String> stringChatHistory =
        SharedPreferencesUtil.getStringList('chat_history_$conversationKey');
    cachedChatHistory[conversationKey] = stringChatHistory
        .map((stringChatExchange) => ChatExchange.fromJson(jsonDecode(stringChatExchange)))
        .toList();
    return cachedChatHistory[conversationKey] ?? [];
  }
  static Future<void> clearChatHistory({required String conversationKey}) async {
    await SharedPreferencesUtil.remove('chat_history_$conversationKey');
    cachedChatHistory[conversationKey] = [];
  }
  static Future<void> addMessage(ChatExchange message, {required String conversationKey}) async {
    await addMessages([message], conversationKey: conversationKey);
  }
  static Future<void> addMessages(List<ChatExchange> messages,
      {required String conversationKey}) async {
    final tmp = cachedChatHistory[conversationKey] ?? [];
    tmp.addAll(messages);
    cachedChatHistory[conversationKey] = tmp;
    await saveChatHistory(conversationKey: conversationKey);
  }
}
---
Path: /lib/services/audio_player_service.dart

import 'dart:io';
import 'package:audio_session/audio_session.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_sound/public/flutter_sound_player.dart';
import 'package:path_provider/path_provider.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:twins/models/setting_model.dart';
import 'package:twins/notifiers/setting_notifier.dart';
part 'audio_player_service.g.dart';
enum AudioPlayerState {
  initial,
  stopped,
  playing,
  failed,
}
enum AudioPlayerType {
  FEEDBACK,
  EXERCISE,
  INTERLOCUTOR,
  BACKGROUND_MUSIC,
}
@riverpod
class AudioPlayerService extends _$AudioPlayerService {
  final FlutterSoundPlayer _audioPlayer = FlutterSoundPlayer();
  late Setting _setting;
  @override
  AudioPlayerState build(AudioPlayerType type) {
    _init();
    ref.onDispose(() {
      Future.delayed(
        const Duration(seconds: 5),
        () {
          debugPrint("disposing audio");
          _audioPlayer.closePlayer();
        },
      );
    });
    _setting = ref.watch(settingNotifierProvider);
    return AudioPlayerState.stopped;
  }
  Future<bool> _init() async {
    final res = await _audioPlayer.openPlayer();
    if (res == null) {
      return false;
    }
    _configureAudioSession();
    return true;
  }
  Future _configureAudioSession() async {
    final session = await AudioSession.instance;
    await session.configure(const AudioSessionConfiguration());
  }
  void play(String path) async {
    final ByteData data = await rootBundle.load(path);
    playFile(data: data);
  }
  void playFile({
    required ByteData data,
    String? fileName,
  }) async {
    try {
      if (_setting.globalSoundEnabled == false) {
        return;
      }
      await _audioPlayer.stopPlayer();
      while (_audioPlayer.isPlaying) {
        await Future.delayed(const Duration(milliseconds: 50));
      }
      if (!_audioPlayer.isOpen()) {
        await _audioPlayer.openPlayer();
      }
      await _audioPlayer.startPlayer(
        fromDataBuffer: data.buffer.asUint8List(),
        whenFinished: () {
          state = AudioPlayerState.stopped;
        },
      );
      state = AudioPlayerState.playing;
    } catch (e) {
      debugPrint('Error playing audio: $e');
      if (fileName != null) {
        try {
          Directory tempDir = await getTemporaryDirectory();
          File fileToDelete = File('${tempDir.path}/$fileName');
          if (await fileToDelete.exists()) {
            await fileToDelete.delete();
            debugPrint('File deleted successfully: $fileName');
          } else {
            debugPrint('File not found: $fileName');
          }
        } catch (e) {
          debugPrint('Error deleting file: $e');
        }
      }
    }
  }
  void stop() async {
    await _audioPlayer.stopPlayer();
    state = AudioPlayerState.stopped;
  }
}
---
Path: /lib/services/like_genius_service.dart

import 'package:twins/providers/genius_result_provider.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:shared_preferences/shared_preferences.dart';
part 'like_genius_service.g.dart';
@riverpod
class LikeGeniusService extends _$LikeGeniusService {
  late SharedPreferences _prefs;
  late int _count;
  late bool _hasFilledSurvey;
  @override
  bool? build() {
    final SharedPreferences? tmpPrefs = ref.watch(prefsProvider).maybeMap(
        orElse: () => null,
        data: (value) {
          return value.value;
        });
    if (tmpPrefs == null) return null;
    _prefs = tmpPrefs;
    _count = _prefs.getInt('practice_count') ?? 0;
    _hasFilledSurvey = _prefs.getBool('has_filled_survey') ?? false;
    return getLikeGenius() && !_hasFilledSurvey;
  }
  bool getLikeGenius() {
    return _prefs.getBool('like_genius') ?? false;
  }
  void setLikeGenius(bool value) {
    _prefs.setBool('like_genius', value);
    state = value && !_hasFilledSurvey;
  }
  void finishedPractice() {
    _count++;
    _prefs.setInt('practice_count', _count);
    if (_count >= 6 && state == false) {
      setLikeGenius(true);
    }
  }
  void reset() {
    _prefs.remove('practice_count');
    _prefs.remove('like_genius');
    _prefs.remove('has_filled_survey');
    _hasFilledSurvey = false;
    _count = 0;
    state = false;
  }
  void saveFilled() {
    _hasFilledSurvey = true;
    _prefs.setBool('has_filled_survey', true);
    state = false;
  }
}
---
Path: /lib/services/api_service.dart

import 'package:dio/dio.dart';
import 'package:flutter/foundation.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:logger/logger.dart';
import 'package:twins/models/api/chat_request.dart';
import 'package:twins/models/api/lesson_request.dart';
import 'package:twins/providers/dio_client_provider.dart';
import 'package:twins/utilities/logger.dart';
class ApiService extends ChangeNotifier {
  ApiService();
  CancelToken getLessonsToken = CancelToken();
  List<LessonData>? cachedLessons;
  ChatRequestState _chatRequestState = const ChatRequestState.initial();
  ChatRequestState get chatRequestState => _chatRequestState;
  CancelToken getTranslationToken = CancelToken();
  final Logger _logger = Logger(
    printer: createSimplePrefixPrinter(
      PrettyPrinter(methodCount: 3),
      prefix: '[API]',
    ),
  );
  Future<void> postChat(ChatRequestData data) async {
    try {
      _chatRequestState = const ChatRequestState.loading();
      notifyListeners();
      final dio = ProviderContainer().read(dioClientProvider);
      final response = await dio.post('/chat', data: data);
      _logger.i(response.data);
      _chatRequestState = ChatRequestState.success(ChatResponse.fromJson(response.data));
      notifyListeners();
    } on DioException catch (e) {
      _logger.e(e);
      _chatRequestState = const ChatRequestState.failure("Error");
      notifyListeners();
    }
    _chatRequestState = const ChatRequestState.initial();
  }
}
---
Path: /lib/services/genius_result_service.dart

import 'package:twins/models/results/genius_result.dart';
import 'package:twins/models/results/section_result.dart';
import 'package:twins/providers/genius_result_provider.dart';
import 'package:twins/services/repositories/genius_result_repository.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
part 'genius_result_service.g.dart';
@riverpod
class GeniusResultService extends _$GeniusResultService {
  late GeniusResultRepository _repo;
  @override
  GeniusResult? build() {
    GeniusResultRepository? tmpRepo = ref.watch(geniusResultRepositoryProvider);
    if (tmpRepo == null) return null;
    _repo = tmpRepo;
    return _repo.getResults();
  }
  void setPracticeResult({
    String? level,
    String? module,
    String? lesson,
    String? practice,
    SectionResult? result,
  }) {
    state = _repo.setPracticeResult(
      level: level,
      module: module,
      lesson: lesson,
      practice: practice,
      result: result,
    );
  }
  SectionResult? getPracticeResult({
    String? level,
    String? module,
    String? lesson,
    String? practice,
  }) {
    return _repo.getPracticeResult(
      level: level,
      module: module,
      lesson: lesson,
      practice: practice,
    );
  }
  void reset() {
    state = _repo.reset();
    ref.invalidateSelf();
  }
}
---
Path: /lib/services/storage/storage_interface.dart

abstract class StorageInterface<T> {
  String get key;
  Future<T?> read();
  Future<void> save(T credentials);
  Future<void> clear();
}
---
Path: /lib/services/storage/message_count_secure_storage.dart

import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:twins/services/storage/storage_int.dart';
class MessageCountSecureStorage extends StorageInt {
  MessageCountSecureStorage(FlutterSecureStorage storage) : super(storage);
  @override
  String get key => 'message_count';
}
---
Path: /lib/services/storage/storage_int.dart

import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:twins/services/storage/storage_interface.dart';
abstract class StorageInt implements StorageInterface<int> {
  final FlutterSecureStorage _storage;
  StorageInt(this._storage);
  int? _cachedValue;
  int? _defaultValue;
  @override
  Future<void> save(int value) {
    _cachedValue = value;
    return _storage.write(key: key, value: value.toString());
  }
  @override
  Future<int?> read() async {
    if (_cachedValue != null) {
      return _cachedValue;
    }
    final valueString = await _storage.read(key: key);
    if (valueString == null) {
      return _defaultValue;
    }
    return _cachedValue = int.tryParse(valueString);
  }
  @override
  Future<void> clear() {
    _cachedValue = null;
    return _storage.delete(key: key);
  }
  Future<void> add(int added) async {
    if (_cachedValue != null) {
      return save(_cachedValue! + added);
    }
    final tmpValue = await read();
    if (tmpValue != null) {
      return save(tmpValue + added);
    } else if (_defaultValue != null) {
      return save(_defaultValue! + added);
    }
    return save(added);
  }
  Future<void> sub(int subbed) async {
    return add(-subbed);
  }
  Future<void> increment() async {
    return add(1);
  }
  Future<void> decrement() async {
    return sub(1);
  }
}
---
Path: /lib/services/storage/storage_bool.dart

import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:twins/services/storage/storage_interface.dart';
abstract class StorageBool implements StorageInterface<bool> {
  final FlutterSecureStorage _storage;
  StorageBool(this._storage);
  bool? _cachedValue;
  bool? _defaultValue;
  @override
  Future<void> save(bool value) {
    _cachedValue = value;
    return _storage.write(key: key, value: value.toString());
  }
  @override
  Future<bool?> read() async {
    if (_cachedValue != null) {
      return _cachedValue;
    }
    final valueString = await _storage.read(key: key);
    if (valueString == null) {
      return _defaultValue;
    }
    return _cachedValue = bool.tryParse(valueString);
  }
  @override
  Future<void> clear() {
    _cachedValue = null;
    return _storage.delete(key: key);
  }
}
---
Path: /lib/services/storage/currency_storage.dart

import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:twins/services/storage/storage_int.dart';
class CurrencyStorage extends StorageInt {
  CurrencyStorage(FlutterSecureStorage storage) : super(storage);
  @override
  String get key => 'currency';
}
---
Path: /lib/services/storage/storage_double.dart

import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:twins/services/storage/storage_interface.dart';
abstract class StorageDouble implements StorageInterface<double> {
  final FlutterSecureStorage _storage;
  StorageDouble(this._storage);
  double? _cachedValue;
  double? _defaultValue;
  @override
  Future<void> save(double value) {
    _cachedValue = value;
    return _storage.write(key: key, value: value.toString());
  }
  @override
  Future<double?> read() async {
    if (_cachedValue != null) {
      return _cachedValue;
    }
    final valueString = await _storage.read(key: key);
    if (valueString == null) {
      return _defaultValue;
    }
    return _cachedValue = double.tryParse(valueString);
  }
  @override
  Future<void> clear() {
    _cachedValue = null;
    return _storage.delete(key: key);
  }
  Future<void> add(double added) async {
    if (_cachedValue != null) {
      return save(_cachedValue! + added);
    }
    final tmpValue = await read();
    if (tmpValue != null) {
      return save(tmpValue + added);
    } else if (_defaultValue != null) {
      return save(_defaultValue! + added);
    }
    return save(added);
  }
  Future<void> sub(double subbed) async {
    return add(-subbed);
  }
  Future<void> increment() async {
    return add(1);
  }
  Future<void> decrement() async {
    return sub(1);
  }
}
---
Path: /lib/services/storage/filled_survey_storage.dart

import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:twins/services/storage/storage_bool.dart';
class FilledSurveyStorage extends StorageBool {
  FilledSurveyStorage(FlutterSecureStorage storage) : super(storage);
  @override
  String get key => 'filled_survey';
}
---
Path: /lib/services/repositories/genius_repository.dart

import 'package:dio/dio.dart';
import 'package:flutter/material.dart';
import 'package:twins/models/api/chat_request.dart';
import 'package:twins/models/api/module_request.dart';
import 'package:twins/services/api/genius_api.dart';
import 'package:logger/logger.dart';
class GeniusRepository {
  final GeniusApi _geniusApi;
  final _logger = Logger();
  GeniusRepository(this._geniusApi);
  Future<List<GeniusModule>> fetchModules(String? userLevel) async {
    if (userLevel == null) {
      return [];
    }
    try {
      final response = await _geniusApi.fetchModulesApiRequest(userLevel);
      List jsonList = response.data;
      _logger.d("Response: $jsonList");
      List<GeniusModule> modules = jsonList.map((item) => GeniusModule.fromJson(item)).toList();
      _logger.e("Modules: $modules");
      return modules;
    } on DioException catch (e) {
      final errorMessage = StringBuffer("Error: ${e.message}\n");
      _logger.e(errorMessage.toString());
      rethrow;
    }
  }
  Future<ChatResponse> postChat(List<ChatExchange> dialogue, String id) async {
    ChatRequestData data = ChatRequestData(characterInfoId: id, dialogue: dialogue);
    final res = await _geniusApi.postChat(data);
    return ChatResponse.fromJson(res.data);
  }
}
---
Path: /lib/services/repositories/genius_result_repository.dart

import 'dart:convert';
import 'package:twins/models/results/genius_result.dart';
import 'package:twins/models/results/lesson_result.dart';
import 'package:twins/models/results/level_result.dart';
import 'package:twins/models/results/module_result.dart';
import 'package:twins/models/results/section_result.dart';
import 'package:logger/logger.dart';
import 'package:shared_preferences/shared_preferences.dart';
class GeniusResultRepository {
  static const String resultsKey = "genius_results";
  final _logger = Logger();
  final SharedPreferences prefs;
  GeniusResult? _cachedResults;
  GeniusResultRepository(
    this.prefs,
  );
  GeniusResult getResults() {
    GeniusResult? result;
    if (_cachedResults != null) {
      _logger.i("Using cached results");
      return _cachedResults!;
    }
    final resultsString = prefs.getString(resultsKey);
    if (resultsString == null) {
      result = const GeniusResult(levels: {});
    } else {
      try {
        final Map<String, Object?> json = jsonDecode(resultsString);
        result = GeniusResult.fromJson(json);
        return result;
      } catch (e) {
        result = const GeniusResult(levels: {});
      }
    }
    _cachedResults = result;
    return result;
  }
  double? getLessonScore(LessonResult lesson) {
    if (lesson.sections.values.isEmpty) {
      return null;
    }
    return lesson.sections.values.map((value) => value.score).reduce((a, b) => a + b) /
        lesson.sections.values.length;
  }
  LessonResult updateLessonScore(LessonResult lesson) {
    if (lesson.sections.values.isEmpty) {
      return lesson;
    }
    return lesson.copyWith(
      score: getLessonScore(lesson),
    );
  }
  double? getModuleScore(ModuleResult module) {
    if (module.lessons.values.isEmpty) {
      return null;
    }
    return module.lessons.values
            .map((value) => getLessonScore(value))
            .reduce((a, b) => (a ?? 0) + (b ?? 0))! /
        module.lessons.values.length;
  }
  ModuleResult updateModuleScore(ModuleResult module) {
    if (module.lessons.values.isEmpty) {
      return module;
    }
    return module.copyWith(
      score: getModuleScore(module),
    );
  }
  double? getLevelScore(LevelResult level) {
    if (level.modules.values.isEmpty) {
      return null;
    }
    return level.modules.values
            .map((value) => getModuleScore(value))
            .reduce((a, b) => (a ?? 0) + (b ?? 0))! /
        level.modules.values.length;
  }
  LevelResult updateLevelScore(LevelResult level) {
    if (level.modules.values.isEmpty) {
      return level;
    }
    return level.copyWith(
      score: getLevelScore(level),
    );
  }
  double? getScore(GeniusResult result) {
    if (result.levels.values.isEmpty) {
      return null;
    }
    return result.levels.values
            .map((value) => getLevelScore(value))
            .reduce((a, b) => (a ?? 0) + (b ?? 0))! /
        result.levels.values.length;
  }
  GeniusResult setPracticeResult({
    String? level,
    String? module,
    String? lesson,
    String? practice,
    SectionResult? result,
  }) {
    if (level == null || module == null || lesson == null || practice == null || result == null) {
      return getResults();
    }
    GeniusResult currentResults = getResults();
    LessonResult lessonResult = currentResults.levels[level]?.modules[module]?.lessons[lesson] ??
        const LessonResult(
          sections: {},
          score: null,
        );
    lessonResult = lessonResult.copyWith(
      sections: {
        ...lessonResult.sections,
        practice: result,
      },
    );
    lessonResult = updateLessonScore(lessonResult);
    ModuleResult moduleResult = currentResults.levels[level]?.modules[module] ??
        const ModuleResult(
          lessons: {},
          score: null,
        );
    moduleResult = moduleResult.copyWith(
      lessons: {
        ...moduleResult.lessons,
        lesson: lessonResult,
      },
    );
    moduleResult = updateModuleScore(moduleResult);
    LevelResult levelResult = currentResults.levels[level] ??
        const LevelResult(
          modules: {},
          score: null,
        );
    levelResult = levelResult.copyWith(
      modules: {
        ...levelResult.modules,
        module: moduleResult,
      },
    );
    levelResult = updateLevelScore(levelResult);
    currentResults = currentResults.copyWith(
      levels: {
        ...currentResults.levels,
        level: levelResult,
      },
    );
    return save(currentResults);
  }
  GeniusResult save(GeniusResult result) {
    prefs.setString(resultsKey, jsonEncode(result.toJson()));
    _cachedResults = result;
    return result;
  }
  GeniusResult reset() {
    return save(const GeniusResult(levels: {}));
  }
  SectionResult? getPracticeResult({
    String? level,
    String? module,
    String? lesson,
    String? practice,
  }) {
    if (level == null || module == null || lesson == null || practice == null) {
      return null;
    }
    final GeniusResult currentResults = getResults();
    if (currentResults.levels[level] == null) {
      return null;
    }
    if (currentResults.levels[level]?.modules[module] == null) {
      return null;
    }
    if (currentResults.levels[level]?.modules[module]?.lessons[lesson] == null) {
      return null;
    }
    return currentResults.levels[level]?.modules[module]?.lessons[lesson]?.sections[practice];
  }
}
---
Path: /lib/services/api/genius_api.dart

import 'package:dio/dio.dart';
import 'package:twins/models/api/chat_request.dart';
const _modulesApiEndpoint = '/modules/';
class GeniusApi {
  final Dio _dio;
  GeniusApi(this._dio);
  Future<Response<dynamic>> fetchModulesApiRequest(String? userLevel) async {
    try {
      final options = userLevel != null ? Options(headers: {'user-level': userLevel}) : null;
      final res = await _dio.get(_modulesApiEndpoint, options: options);
      return res;
    } catch (e) {
      rethrow;
    }
  }
  Future<Response<dynamic>> postChat(ChatRequestData data) async {
    return await _dio.post('/chat', data: data);
  }
}
---

