Path: /prisma/clear.ts

import { PrismaClient } from "@prisma/client";
import { generateModules } from "./helpers/modules";
import { clearDatabase } from "./helpers/db";
import { generateTranslations } from "./helpers/translation";
const prisma = new PrismaClient();
async function main() {
  await clearDatabase(prisma);
}
main()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
---
Path: /prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}
enum Level {
  VERY_BEGINNER @map("VERY_BEGINNER")
  BEGINNER      @map("BEGINNER")
  INTERMEDIATE  @map("INTERMEDIATE")
  ADVANCED      @map("ADVANCED")
}
model LessonModule {
  id          String   @id @default(uuid())
  key         String   @default("")
  title       String   @default("")
  description String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  image       String?
  order       Int      @default(0)
  lessons     Lesson[] 
  isPro       Boolean  @default(false)
  level       Level    @default(VERY_BEGINNER)
}
model Lesson {
  id          String        @id @default(uuid())
  key         String        @unique @default("")
  title       String        @default("")
  description String        @default("")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  image       String?
  order       Int           @default(0)
  moduleId    String?
  module      LessonModule? @relation(fields: [moduleId], references: [id])
  sections    Section[] 
  @@index([moduleId])
}
enum ExerciseType {
  VOCABULARY_ACQUISITION
  VOCABULARY_PRACTICE
  WORD_REORDERING
  WORD_COMPLETION
  READING
  LISTENING
  SCRIPTED_CONVERSATION
  EXPLANATION
}
enum SectionType {
  VOCABULARY            @map("VOCABULARY")
  LISTENING             @map("LISTENING")
  SCRIPTED_CONVERSATION @map("SCRIPTED_CONVERSATION")
}
model Section {
  id         String      @id @default(uuid())
  type       SectionType @default(VOCABULARY)
  background String?
  character  String?
  order      Int         @default(0)
  lessonId   String      @map("lesson_id")
  lesson     Lesson      @relation(fields: [lessonId], references: [id])
  exercises  Exercise[]
  @@index([lessonId])
}
model Exercise {
  id        String       @id @default(uuid())
  type      ExerciseType
  order     Int          @default(0)
  sectionId String       @map("section_id")
  section   Section      @relation(fields: [sectionId], references: [id])
  fullScreen Boolean @default(false)
  vocabularyAcquisition VocabularyAcquisition?
  vocabularyPractice    VocabularyPractice?
  wordReordering        WordReordering?
  wordCompletion        WordCompletion?
  reading               Reading?
  listening             Listening?
  scriptedConversation  ScriptedConversation?
  explanation           Explanation?
  @@index([sectionId])
  @@index([id])
}
model VocabularyAcquisition {
  id         String   @id @default(uuid())
  exerciseId String   @unique @map("exercise_id")
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  conceptId  String   @map("concept_id")
  concept    Concept  @relation(fields: [conceptId], references: [id])
  @@index([conceptId])
}
model VocabularyPractice {
  id         String    @id @default(uuid())
  exerciseId String    @unique @map("exercise_id")
  exercise   Exercise  @relation(fields: [exerciseId], references: [id])
  choices    Concept[] @relation("VocabularyPracticeToChoices")
  conceptId  String    @map("concept_id")
  concept    Concept   @relation(fields: [conceptId], references: [id])
  @@index([conceptId])
}
model WordReordering {
  id           String    @id @default(uuid())
  exerciseId   String    @unique @map("exercise_id")
  exercise     Exercise  @relation(fields: [exerciseId], references: [id])
  sentence     String 
  goodSentence String 
  choices      Concept[]
}
model WordCompletion {
  id         String    @id @default(uuid())
  exerciseId String    @unique @map("exercise_id")
  exercise   Exercise  @relation(fields: [exerciseId], references: [id])
  sentence   String 
  choices    Concept[] @relation("WordCompletionToChoices")
  conceptId  String    @map("concept_id")
  concept    Concept   @relation(fields: [conceptId], references: [id])
  @@index([conceptId])
}
model Reading {
  id         String    @id @default(uuid())
  exerciseId String    @unique @map("exercise_id")
  exercise   Exercise  @relation(fields: [exerciseId], references: [id])
  text       String    @db.Text
  choices    Concept[] @relation("ReadingToChoices")
  conceptId  String    @map("concept_id")
  concept    Concept   @relation(fields: [conceptId], references: [id])
  @@index([conceptId])
}
model Listening {
  id           String              @id @default(uuid())
  exerciseId   String              @unique @map("exercise_id")
  exercise     Exercise            @relation(fields: [exerciseId], references: [id])
  audio        String
  image        String?
  displayWords Boolean             @default(true)
  choices      ChoiceOnListening[]
  conceptId    String              @map("concept_id")
  concept      Concept             @relation(fields: [conceptId], references: [id])
  @@index([conceptId])
}
model ChoiceOnListening {
  id          String    @id @default(uuid())
  order       Int       @default(0)
  listeningId String    @map("listening_id")
  listening   Listening @relation(fields: [listeningId], references: [id])
  conceptId   String    @map("concept_id")
  concept     Concept   @relation(fields: [conceptId], references: [id])
  @@index([conceptId])
  @@index([listeningId])
}
model ScriptedConversation {
  id           String         @id @default(uuid())
  exerciseId   String         @unique @map("exercise_id")
  exercise     Exercise       @relation(fields: [exerciseId], references: [id])
  conversation ChatExchange[]
}
enum ChatExchangeType {
  ASSISTANT @map("ASSISTANT")
  USER      @map("USER")
  INPUT     @map("INPUT")
}
model ChatExchange {
  id                     String               @id @default(uuid())
  scriptedConversationId String               @map("scripted_conversation_id")
  scriptedConversation   ScriptedConversation @relation(fields: [scriptedConversationId], references: [id])
  type    ChatExchangeType @default(ASSISTANT)
  order   Int              @default(0)
  emotion String?
  conceptId String  @map("concept_id")
  concept   Concept @relation(fields: [conceptId], references: [id]) 
  choices Concept[] @relation("ChatExchangeToChoices") 
  onGoodAnswerId String?       @unique
  onGoodAnswer   ChatExchange? @relation("ChatExchangeToGoodAnswer", fields: [onGoodAnswerId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  goodAnswerOf   ChatExchange? @relation("ChatExchangeToGoodAnswer")
  onBadAnswerId String?       @unique
  onBadAnswer   ChatExchange? @relation("ChatExchangeToBadAnswer", fields: [onBadAnswerId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  badAnswerOf   ChatExchange? @relation("ChatExchangeToBadAnswer")
  @@index([conceptId])
  @@index([scriptedConversationId])
}
model Explanation {
  id         String                 @id @default(uuid())
  exerciseId String                 @unique @map("exercise_id")
  exercise   Exercise               @relation(fields: [exerciseId], references: [id])
  texts      ConceptOnExplanation[]
}
model ConceptOnExplanation {
  id            String      @id @default(uuid())
  order         Int         @default(0)
  explanationId String      @map("explanation_id")
  explanation   Explanation @relation(fields: [explanationId], references: [id])
  conceptId     String      @map("concept_id")
  concept       Concept     @relation(fields: [conceptId], references: [id])
  @@index([conceptId])
  @@index([explanationId])
}
enum ConceptType {
  VOCABULARY @map("VOCABULARY")
  GRAMMAR    @map("GRAMMAR")
  EXPRESSION @map("EXPRESSION")
}
model Concept {
  id                        String                  @id @default(uuid())
  content                   String                  @default("")
  type                      ConceptType             @default(VOCABULARY)
  image                     String?
  vocabularyAcquisition     VocabularyAcquisition[]
  vocabularyPracticeChoices VocabularyPractice[]    @relation("VocabularyPracticeToChoices")
  vocabularyPracticeConcept VocabularyPractice[]
  wordReordering            WordReordering[]
  wordCompletionConcept     WordCompletion[]
  wordCompletionToChoice    WordCompletion[]        @relation("WordCompletionToChoices")
  readingConcept            Reading[]
  readingToChoice           Reading[]               @relation("ReadingToChoices")
  listeningConcept          Listening[]
  listeningToChoice         ChoiceOnListening[]
  chatExchangeConcept       ChatExchange[]
  chatExchangeToChoice      ChatExchange[]          @relation("ChatExchangeToChoices")
  explanationConcept        ConceptOnExplanation[]
}
model Character {
  id      String  @id @default(uuid())
  key     String
  prompt  String  @db.Text
  gender  Gender  @default(NEUTRAL)
  voiceId String? @default("")
  name    String  @default("")
  image   String? @default("")
}
model Translation {
  id       String @id @default(uuid())
  language String @default("en")
  key      String
  value    String @db.Text
  @@unique([key, language], name: "key_language")
}
enum Gender {
  FEMALE  @map("FEMALE")
  MALE    @map("MALE")
  NEUTRAL @map("NEUTRAL")
}
---
Path: /prisma/seed.ts

import { PrismaClient } from "@prisma/client";
import { generateModules } from "./helpers/modules";
import { clearDatabase } from "./helpers/db";
import { generateTranslations } from "./helpers/translation";
const prisma = new PrismaClient();
async function main() {
  await clearDatabase(prisma);
  await generateTranslations(prisma);
  await generateModules(prisma);
}
main()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
---
Path: /prisma/themes.ts

import { ConceptType, Gender, Level, PrismaClient } from "@prisma/client";
export type ThemeData = {
  key: string;
  title: string;
  prompt: string;
  image: string | null;
  level: Level;
  isPro: boolean;
  characterInfoFirstSentence: string;
};
export async function insertThemes(
  prisma: PrismaClient,
  sceneId: string,
  characterId: string
) {
  const skySimulationData = {
    cameraPosX: 0,
    cameraPosY: 1.492,
    cameraPosZ: 1.68,
    cameraRotX: 12.017,
    cameraRotY: 180,
    cameraRotZ: 0,
    cameraLookAtX: 0,
    cameraLookAtY: 1.197437,
    cameraLookAtZ: 0.004492494,
    scene: {
      connect: {
        id: sceneId,
      },
    },
  };
  const charaterInfoData = {
    posX: 0,
    posY: 0,
    posZ: 0,
    rotX: 0,
    rotY: 0,
    rotZ: 0,
    scale: 1,
    character: {
      connect: {
        id: characterId,
      },
    },
  };
  const level1CharacterInfoPrompt =
    " Play a cheerful, cool English conversation partner for Eiken 5(CEFR A1). Your role is to always ask questions and keep the discussion alive. Share personal experiences, express emotions. Limit responses to <12 words.";
  const level2CharacterInfoPrompt =
    " Play a cheerful, cool English conversation partner for Eiken 4 (CEFR A2). Your role is to always ask questions and keep the discussion alive. Share personal experiences, express emotions. Limit responses to <15 words.";
  const level3CharacterInfoPrompt =
    " Play a cheerful, cool English conversation partner for Eiken 2/3 (CEFR B1). Your role is to always ask questions and keep the discussion alive. Share personal experiences, express emotions. Limit responses to <20 words.";
  const themeDatas: ThemeData[] = [
    {
      key: "personal_introduction",
      title: "Personal Introduction",
      prompt: "Stick with a discussion about yourself.",
      image: "1. Yourself.png",
      level: Level.BEGINNER,
      isPro: false,
      characterInfoFirstSentence: `Hello there! Let's start with you. Can you tell me a bit about yourself?"`,
    },
    {
      key: "family_members",
      title: "Family Members",
      prompt: "Stick with a discussion about your family members.",
      image: "2. family.png",
      level: Level.BEGINNER,
      isPro: false,
      characterInfoFirstSentence:
        "Hi! Let's chat about family. Can you tell me about yours?",
    },
    {
      key: "pets",
      title: "Pets",
      prompt: "Stick with any pets you have.",
      image: "3. Pets.png",
      level: Level.BEGINNER,
      isPro: false,
      characterInfoFirstSentence:
        "Hey! Are you a pet owner? Do you have any pets at home?",
    },
    {
      key: "hobbies",
      title: "Hobbies",
      prompt: "Stick with your hobbies.",
      image: "4. Hobbies.png",
      level: Level.BEGINNER,
      isPro: false,
      characterInfoFirstSentence:
        "Hello! Let's chat about hobbies. What do you enjoy doing in your free time?",
    },
    {
      key: "sports",
      title: "Sports",
      prompt: "Stick with your favorite sports.",
      image: "5. Sports.png",
      level: Level.BEGINNER,
      isPro: false,
      characterInfoFirstSentence:
        "Hey! Are you into sports? Which is your favorite one and why?",
    },
    {
      key: "favorite_games",
      title: "Favorite Games",
      prompt: "Stick with your favorite games.",
      image: "6. Favorite games.png",
      level: Level.BEGINNER,
      isPro: false,
      characterInfoFirstSentence:
        "Hi! Let's dive into the world of games. What's your favorite game and why do you love it?",
    },
    {
      key: "vacation_experiences",
      title: "Vacation Experiences",
      prompt: "Stick with your favorite vacation experience.",
      image: "7. Vacation.png",
      level: Level.BEGINNER,
      isPro: false,
      characterInfoFirstSentence:
        "Hello! Do you enjoy traveling? Can you tell me about your favorite vacation?",
    },
    {
      key: "daily_routine",
      title: "Daily Routine",
      prompt: "Stick with a discussion about your daily routine.",
      image: "8. Daily routine.png",
      level: Level.BEGINNER,
      isPro: false,
      characterInfoFirstSentence:
        "Hey! What does a typical day look like for you?",
    },
    {
      key: "food_preferences",
      title: "Food Preferences",
      prompt:
        "Stick with a discussion about favorite and least favorite foods.",
      image: "9. Food.png",
      level: Level.BEGINNER,
      isPro: false,
      characterInfoFirstSentence:
        "Hey there! I'm curious, what's your all-time favorite meal? Or is there something you really don't like eating?",
    },
    {
      key: "clothes_and_fashion",
      title: "Clothes and Fashion",
      prompt: "Stick with your favorite clothes and fashion style.",
      image: "10. Fashion.png",
      level: Level.BEGINNER,
      isPro: false,
      characterInfoFirstSentence:
        "Hi! Let's get fashionable today. Tell me, what's your favorite outfit? How would you describe your personal style?",
    },
    {
      key: "weather_and_seasons",
      title: "Weather and Seasons",
      prompt: "Stick with discussion on different weathers and seasons.",
      image: "11. Seasons.png",
      level: Level.BEGINNER,
      isPro: false,
      characterInfoFirstSentence:
        "Hello! Isn't the weather interesting? What's your favorite season and why do you love it?",
    },
    {
      key: "local_town",
      title: "Local Town",
      prompt: "Stick with your local town or city.",
      image: "12. Local town.png",
      level: Level.BEGINNER,
      isPro: false,
      characterInfoFirstSentence:
        "Howdy! I'd love to learn more about where you live. Can you describe your town or city to me?",
    },
    {
      key: "parks_and_recreation",
      title: "Parks and Recreation",
      prompt: "Stick with experiences at parks and recreational activities.",
      image: "13. parks.png",
      level: Level.BEGINNER,
      isPro: false,
      characterInfoFirstSentence:
        "Hi there! Let's go on a virtual adventure. Can you tell me about a fun time you've had at a park or doing an outdoor activity?",
    },
    {
      key: "wildlife",
      title: "Wildlife",
      prompt: "Stick with animals and wildlife.",
      image: "14. Wildlife.png",
      level: Level.BEGINNER,
      isPro: false,
      characterInfoFirstSentence:
        "Hello! Are you an animal lover? Do you have a favorite animal? Tell me about it!",
    },
    {
      key: "music_and_instruments",
      title: "Music and Instruments",
      prompt: "Stick with your favorite music and if you play any instruments.",
      image: "15. Favorite music.png",
      level: Level.BEGINNER,
      isPro: false,
      characterInfoFirstSentence:
        "Hey! Let's hit some high notes. What kind of music gets your feet tapping? Do you play any instruments?",
    },
    {
      key: "books_and_reading",
      title: "Books and Reading",
      prompt: "Stick with favorite books and reading habits.",
      image: "16. Favorite book.png",
      level: Level.BEGINNER,
      isPro: false,
      characterInfoFirstSentence:
        "Hi! Let's dive into the world of books. Is there a book you simply couldn't put down?",
    },
    {
      key: "movies_and_tv_shows",
      title: "Movies and TV Shows",
      prompt: "Stick with favorite movies and TV shows.",
      image: "17. Movies.png",
      level: Level.BEGINNER,
      isPro: false,
      characterInfoFirstSentence:
        "Hello! Let's take a walk down the Hollywood Boulevard. Can you tell me about a movie or TV show you recently watched and enjoyed?",
    },
    {
      key: "school_subjects",
      title: "School Subjects",
      prompt: "Stick with favorite and least favorite school subjects.",
      image: "18. School subjects.png",
      level: Level.BEGINNER,
      isPro: false,
      characterInfoFirstSentence:
        "Hello there! Let's step into a classroom. What's your favorite subject at school and why? Is there one you find challenging?",
    },
    {
      key: "school_friends",
      title: "School Friends",
      prompt: "Stick with your best friends at school.",
      image: "19. School friends.png",
      level: Level.BEGINNER,
      isPro: false,
      characterInfoFirstSentence:
        "Hey! Who are your best buddies at school? Can you share a fun experience you've had with them?",
    },
    {
      key: "teachers",
      title: "Teachers",
      prompt: "Stick with your favorite teacher and why you like them.",
      image: "20. Favorite teacher.png",
      level: Level.BEGINNER,
      isPro: false,
      characterInfoFirstSentence:
        "Hi! Let's appreciate our teachers today. Do you have a favorite teacher? What makes them special?",
    },
    {
      key: "past_holidays",
      title: "Past Holidays",
      prompt: "Stick with a past holiday experience.",
      image: "21. Past Holiday.png",
      level: Level.INTERMEDIATE,
      isPro: false,
      characterInfoFirstSentence:
        "Hello! Do you have a memorable holiday from the past you could share?",
    },
    {
      key: "favorite_book",
      title: "Favorite Book",
      prompt: "Stick with your favorite book and why you love it.",
      image: "22. Favorite book.png",
      level: Level.INTERMEDIATE,
      isPro: false,
      characterInfoFirstSentence:
        "Hey there! Ever come across a book that just blew your mind? Which one and why?",
    },
    {
      key: "dream_destination",
      title: "Dream Destination",
      prompt: "Stick with a place you would love to visit in the future.",
      image: "23. Dream destination.png",
      level: Level.INTERMEDIATE,
      isPro: false,
      characterInfoFirstSentence:
        "Hello! If you could visit any place in the world, where would you go and why?",
    },
    {
      key: "cooking_experience",
      title: "Cooking Experience",
      prompt: "Stick with your experience with cooking.",
      image: "24. Cooking experience.png",
      level: Level.INTERMEDIATE,
      isPro: false,
      characterInfoFirstSentence:
        "Hi there! Ever tried your hand at cooking? How did it go?",
    },
    {
      key: "cultural_festivals",
      title: "Cultural Festivals",
      prompt: "Stick with a cultural festival you have attended.",
      image: "25. Cultural festival.png",
      level: Level.INTERMEDIATE,
      isPro: false,
      characterInfoFirstSentence:
        "Hey! Have you ever been to a cultural festival? Could you share your experience?",
    },
    {
      key: "part-time_jobs",
      title: "Part-time Jobs",
      prompt: "Stick with experiences from any part-time jobs you have had.",
      image: "26. Part time jobs.png",
      level: Level.INTERMEDIATE,
      isPro: false,
      characterInfoFirstSentence:
        "Hello! Have you ever had a part-time job? What was it like?",
    },
    {
      key: "environmental_issues",
      title: "Environmental Issues",
      prompt: "Stick with environmental issues that concern you.",
      image: "27. Environmental issues.png",
      level: Level.INTERMEDIATE,
      isPro: false,
      characterInfoFirstSentence:
        "Hello! Are there any environmental issues that you feel strongly about?",
    },
    {
      key: "science_and_technology",
      title: "Science and Technology",
      prompt: "Stick with recent scientific or technological developments.",
      image: "28. Science and technology.png",
      level: Level.INTERMEDIATE,
      isPro: false,
      characterInfoFirstSentence:
        "Hi! Have you heard about any interesting scientific or technological developments lately?",
    },
    {
      key: "history_and_monuments",
      title: "History and Monuments",
      prompt:
        "Stick with an historical monument you've visited or studied about.",
      image: "29. History and monuments.png",
      level: Level.INTERMEDIATE,
      isPro: false,
      characterInfoFirstSentence:
        "Hello! Is there a historical monument that you find fascinating?",
    },
    {
      key: "sports_events",
      title: "Sports Events",
      prompt: "Stick with a sports event you've watched or participated in.",
      image: "30. Sports.png",
      level: Level.INTERMEDIATE,
      isPro: false,
      characterInfoFirstSentence:
        "Hey! Have you ever participated in or watched a sports event that really excited you?",
    },
    {
      key: "school_projects",
      title: "School Projects",
      prompt: "Stick with a project you've done at school.",
      image: "31. School projects.png",
      level: Level.INTERMEDIATE,
      isPro: false,
      characterInfoFirstSentence:
        "Hi there! Can you tell me about a project you've done at school?",
    },
    {
      key: "health_and_fitness",
      title: "Health and Fitness",
      prompt: "Stick with your views on health and fitness.",
      image: "32. Health and fitness.png",
      level: Level.INTERMEDIATE,
      isPro: false,
      characterInfoFirstSentence:
        "Hello! What are your thoughts on health and fitness?",
    },
    {
      key: "local_cuisine",
      title: "Local Cuisine",
      prompt: "Stick with the local cuisine in your town or city.",
      image: "33. Local cuisine.png",
      level: Level.INTERMEDIATE,
      isPro: false,
      characterInfoFirstSentence:
        "Hey! I'd love to hear about the local cuisine where you live. Any favorites?",
    },
    {
      key: "foreign_languages",
      title: "Foreign Languages",
      prompt: "Stick with your experience with learning foreign languages.",
      image: "34. Foreign languages.png",
      level: Level.INTERMEDIATE,
      isPro: false,
      characterInfoFirstSentence:
        "Hello! Have you ever tried learning a foreign language?",
    },
    {
      key: "art_and_creativity",
      title: "Art and Creativity",
      prompt: "Stick with your experience with any form of art or creativity.",
      image: "35. Art.png",
      level: Level.INTERMEDIATE,
      isPro: false,
      characterInfoFirstSentence:
        "Hi! Have you ever dabbled in art or some form of creative expression?",
    },
    {
      key: "music_concerts",
      title: "Music Concerts",
      prompt: "Stick with a music concert you've attended.",
      image: "36. Music and concerts.png",
      level: Level.INTERMEDIATE,
      isPro: false,
      characterInfoFirstSentence:
        "Hey there! Have you ever been to a live music concert?",
    },
    {
      key: "public_transportation",
      title: "Public Transportation",
      prompt: "Stick with your experiences with public transportation.",
      image: "37. Public transportation.png",
      level: Level.INTERMEDIATE,
      isPro: false,
      characterInfoFirstSentence:
        "Hello! Can you tell me about your experiences with public transportation?",
    },
    {
      key: "social_media",
      title: "Social Media",
      prompt: "Stick with your opinion on social media.",
      image: "38. Social Media.png",
      level: Level.INTERMEDIATE,
      isPro: false,
      characterInfoFirstSentence:
        "Hi! What's your take on social media? Any platforms you prefer?",
    },
    {
      key: "shopping_habits",
      title: "Shopping Habits",
      prompt: "Stick with your shopping habits.",
      image: "39. Shopping habits .png",
      level: Level.INTERMEDIATE,
      isPro: false,
      characterInfoFirstSentence:
        "Hey! Can you share a bit about your shopping habits?",
    },
    {
      key: "future_goals",
      title: "Future Goals",
      prompt: "Stick with your goals for the future.",
      image: "40. Future goals.png",
      level: Level.INTERMEDIATE,
      isPro: false,
      characterInfoFirstSentence:
        "Hi there! What are some of your future goals?",
    },
    {
      key: "global_issues",
      title: "Global Issues",
      prompt: "Stick with a global issue that you find important.",
      image: "41. Global issues.png",
      level: Level.ADVANCED,
      isPro: false,
      characterInfoFirstSentence:
        "Hi there! Are there any global issues that you feel particularly strongly about?",
    },
    {
      key: "higher_education",
      title: "Higher Education",
      prompt: "Stick with higher education and its value.",
      image: "42. Higher education.png",
      level: Level.ADVANCED,
      isPro: false,
      characterInfoFirstSentence:
        "Hello! Let's discuss higher education today. What are your thoughts on its value?",
    },
    {
      key: "leadership",
      title: "Leadership",
      prompt: "Stick with your thoughts on leadership and its qualities.",
      image: "43. Leadership.png",
      level: Level.ADVANCED,
      isPro: false,
      characterInfoFirstSentence:
        "Hey! What do you think makes a good leader? Do you see yourself as one?",
    },
    {
      key: "career_choices",
      title: "Career Choices",
      prompt: "Stick with different career choices and their pros and cons.",
      image: "44. Career choices.png",
      level: Level.ADVANCED,
      isPro: false,
      characterInfoFirstSentence:
        "Hi! Have you ever pondered over different career paths? What are their pros and cons according to you?",
    },
    {
      key: "travel_experiences",
      title: "Travel Experiences",
      prompt: "Stick with an interesting travel experience.",
      image: "45. Travel experiences.png",
      level: Level.ADVANCED,
      isPro: false,
      characterInfoFirstSentence:
        "Hello! Have you ever had a travel experience that left a strong impression on you?",
    },
    {
      key: "literature",
      title: "Literature",
      prompt: "Stick with a piece of literature that impacted you.",
      image: "46. Litterature.png",
      level: Level.ADVANCED,
      isPro: false,
      characterInfoFirstSentence:
        "Hey there! Is there a book or a poem that has deeply moved you?",
    },
    {
      key: "volunteer_work",
      title: "Volunteer Work",
      prompt: "Stick with volunteer work you've done or aspire to do.",
      image: "47. Volunteer work.png",
      level: Level.ADVANCED,
      isPro: false,
      characterInfoFirstSentence:
        "Hello! Have you done any volunteer work or would you consider doing some in the future?",
    },
    {
      key: "personal_achievements",
      title: "Personal Achievements",
      prompt: "Stick with an achievement you are proud of.",
      image: "48. Personal achievement.png",
      level: Level.ADVANCED,
      isPro: false,
      characterInfoFirstSentence:
        "Hi! Do you have any achievements that you're especially proud of?",
    },
    {
      key: "world_history",
      title: "World History",
      prompt:
        "Stick with an event or era in world history that fascinates you.",
      image: "49. World history.png",
      level: Level.ADVANCED,
      isPro: false,
      characterInfoFirstSentence:
        "Hey! Is there an era or event in world history that really intrigues you?",
    },
    {
      key: "ideal_job",
      title: "Ideal job",
      prompt: "Stick with your ideal job",
      image: "50. Ideal job.png",
      level: Level.ADVANCED,
      isPro: false,
      characterInfoFirstSentence:
        "Hello! if you could pick one, what would be your ideal job?",
    },
    {
      key: "entrepreneurship",
      title: "Entrepreneurship",
      prompt: "Stick with entrepreneurship and its impact.",
      image: "51. Entrepreneurship.png",
      level: Level.ADVANCED,
      isPro: false,
      characterInfoFirstSentence:
        "Hey! What are your thoughts on entrepreneurship? Do you see yourself starting a venture someday?",
    },
    {
      key: "healthcare",
      title: "Healthcare",
      prompt: "Stick with your views on healthcare systems.",
      image: "52. Healthcare.png",
      level: Level.ADVANCED,
      isPro: false,
      characterInfoFirstSentence:
        "Hi there! How do you feel about the healthcare system in your country or elsewhere?",
    },
    {
      key: "international_cuisine",
      title: "International Cuisine",
      prompt:
        "Stick with international cuisines you've tried or would like to try.",
      image: "53. International cuisine.png",
      level: Level.ADVANCED,
      isPro: false,
      characterInfoFirstSentence:
        "Hello! Have you tried any international cuisines that you particularly liked or would love to try?",
    },
    {
      key: "learning_styles",
      title: "Learning Styles",
      prompt: "Stick with different learning styles and which one suits you.",
      image: "54. Learning styles.png",
      level: Level.ADVANCED,
      isPro: false,
      characterInfoFirstSentence:
        "Hey! We all have different ways of learning. What's your preferred learning style?",
    },
    {
      key: "space_exploration",
      title: "Space Exploration",
      prompt: "Stick with thoughts on space exploration.",
      image: "55. Space exploration.png",
      level: Level.ADVANCED,
      isPro: false,
      characterInfoFirstSentence:
        "Hi! What are your thoughts on space exploration? Exciting, isn't it?",
    },
    {
      key: "climate_change",
      title: "Climate Change",
      prompt: "Stick with your views on climate change and its impacts.",
      image: "56. Climate change.png",
      level: Level.ADVANCED,
      isPro: false,
      characterInfoFirstSentence:
        "Hello! Climate change is a hot topic these days. What's your take on it?",
    },
    {
      key: "digital_age",
      title: "Digital Age",
      prompt: "Stick with the role and impact of technology in our lives.",
      image: "57. Digital age.png",
      level: Level.ADVANCED,
      isPro: false,
      characterInfoFirstSentence:
        "Hey! We live in a digital age. What do you think is the impact of technology on our lives?",
    },
    {
      key: "sustainable_living",
      title: "Sustainable Living",
      prompt: "Stick with sustainable living practices.",
      image: "58. Sustainable living.png",
      level: Level.ADVANCED,
      isPro: false,
      characterInfoFirstSentence:
        "Hello! Let's talk about sustainable living. Do you follow any practices or have ideas to share?",
    },
    {
      key: "world_languages",
      title: "World Languages",
      prompt:
        "Stick with experiences or interests in learning different languages.",
      image: "59. World languages.png",
      level: Level.ADVANCED,
      isPro: false,
      characterInfoFirstSentence:
        "Hi! Have you ever tried learning a new language? What was the experience like?",
    },
    {
      key: "future_predictions",
      title: "Future Predictions",
      prompt: "Stick with predictions about the future in any context.",
      image: "60. Future Predictions.png",
      level: Level.ADVANCED,
      isPro: false,
      characterInfoFirstSentence:
        "Hey! Let's gaze into the future. Any predictions you would like to make?",
    },
  ];
  const freeTalkSimulationData = {
    image: null,
    ...skySimulationData,
    characterInfos: {
      create: [
        {
          ...charaterInfoData,
        },
      ],
    },
  };
  const themes = [];
  for (let i = 0; i < themeDatas.length; i++) {
    const themeData = themeDatas[i];
    console.log(
      `Creating theme ${themeData.title} (${i}/${themeDatas.length})`
    );
    const prompt =
      themeData.level == Level.BEGINNER
        ? level1CharacterInfoPrompt
        : Level.INTERMEDIATE
        ? level2CharacterInfoPrompt
        : level3CharacterInfoPrompt;
  }
  return [];
}
---
Path: /prisma/data/lessonData.ts

import {
  Section,
  Concept,
  Exercise,
  VocabularyAcquisition,
  ExerciseType,
  Lesson,
  SectionType,
  WordReordering,
  WordCompletion,
  Reading,
  Listening,
  ScriptedConversation,
  ChatExchange,
  ChatExchangeType,
  Explanation,
} from "@prisma/client";
export type ConceptInsert = Omit<Concept, "id" | "type">;
export type VocabularyAcquisitionInsert = Omit<
  VocabularyAcquisition,
  |"id" | "conceptId" | "concept" | "exerciseId"
  > & {
    concept: ConceptInsert;
  };
  export type VocabularyPracticeInsert = Omit<
  VocabularyAcquisition,
  |"id" | "conceptId" | "concept" | "choices" | "exerciseId"
  > & {
    concept: ConceptInsert;
    choices: ConceptInsert[];
  };
  export type WordReorderingInsert = Omit<
  WordReordering,
  |"id" | "choices" | "exerciseId"
  > & {
    sentence: String;
    goodSentence: String;
    choices: ConceptInsert[];
  };
  export type WordCompletionInsert = Omit<
  WordCompletion,
  |"id" | "exerciseId" | "conceptId"
  > & {
    sentence: String;
    concept: ConceptInsert;
    choices: ConceptInsert[];
  };
  export type ReadingInsert = Omit<
  Reading,
  |"id" | "exerciseId" | "conceptId"
  > & {
    text: String;
    concept: ConceptInsert;
    choices: ConceptInsert[];
  };
  export type ListeningInsert = Omit<
  Listening,
  |"id" | "exerciseId" | "conceptId"
  > & {
    audio: String;
    concept: ConceptInsert;
    choices: ConceptInsert[];
  };
  export type ChatExchangeInsert = Omit<
  ChatExchange,
  | "id"
  | "scriptedConversationId"
  | "scriptedConversation"
  | "conceptId"
  | "order"
  | "onGoodAnswerId"
  | "goodAnswerOf"
  | "onBadAnswerId"
  | "badAnswerOf"
  > & {
    concept: ConceptInsert;
    choices: ConceptInsert[];
    onGoodAnswer: ChatExchangeInsert | null;
    onBadAnswer: ChatExchangeInsert | null;
  };
  export type ScriptedConversationInsert = Omit<
  ScriptedConversation,
  |"id" | "exerciseId"
  > & {
    conversation: ChatExchangeInsert[];
  };
  export type ExplanationInsert = Omit<
  Explanation, | "id" | "exerciseId"> & {
    texts: ConceptInsert[];
  }
export type ExerciseInsert = Omit<
  Exercise,
  | "id"
  | "order"
  | "sectionId"
  | "section"
  | "fullScreen"
  > & {
    fullScreen?: boolean;
  } & ({
    type: "VOCABULARY_ACQUISITION";
  vocabularyAcquisition: VocabularyAcquisitionInsert;
  } | {
    type: "VOCABULARY_PRACTICE";
    vocabularyPractice: VocabularyPracticeInsert;
  } | {
    type: "WORD_REORDERING";
    wordReordering: WordReorderingInsert;
  } | {
    type: "WORD_COMPLETION";
    wordCompletion: WordCompletionInsert;
  } | {
    type: "READING";
    reading: ReadingInsert;
  } | {
    type: "LISTENING";
    listening: ListeningInsert;
  } | {
    type: "SCRIPTED_CONVERSATION";
    scriptedConversation: ScriptedConversationInsert;
  } | {
    type: "EXPLANATION";
    explanation: ExplanationInsert;
  }
  );
export type SectionInsert = Omit<
  Section,
  | "id"
  | "order"
  | "lessonId"
  | "exercises"
> & {
  exercises: ExerciseInsert[];
};
export type LessonInsert = Omit<
  Lesson,
  "id" | "createdAt" | "updatedAt" | "moduleId" | "order"
> & {
  sections: SectionInsert[];
};
---
Path: /prisma/data/moduleData.ts

import { LessonModule, Level } from "@prisma/client";
import {
  LessonInsert,
} from "./lessonData";
import { MODULE_1_DATA } from "./modules/module1/module1";
import { MODULE_2_DATA } from "./modules/module2/module2";
export type LessonModuleInsert = Omit<
  LessonModule,
  "id" | "createdAt" | "updatedAt" | "order"
> & {
  lessons: LessonInsert[];
};
export const MODULES_DATA: LessonModuleInsert[] = [
  MODULE_1_DATA,
  MODULE_2_DATA
];
---
Path: /prisma/data/translationData.ts

export type TranslationModel = {
  key: string;
  language: string;
  value: string;
};
export const translationsData: TranslationModel[] = [
  {
    key: "a shop",
    language: "ja",
    value: "店",
  },
  {
    key: "a tower",
    language: "ja",
    value: "タワー",
  },
  {
    key: "fun/to have fun",
    language: "ja",
    value: "楽しい / 楽しむ",
  },
  {
    key: "Take a break",
    language: "ja",
    value: "休憩を取る",
  },
  {
    key: "a temple",
    language: "ja",
    value: "寺",
  },
  {
    key: "clothes",
    language: "ja",
    value: "洋服",
  },
  {
    key: "a camera",
    language: "ja",
    value: "カメラ",
  },
  {
    key: "a map",
    language: "ja",
    value: "地図",
  },
  {
    key: "Bird",
    language: "ja",
    value: "鳥",
  },
  {
    key: "to visit",
    language: "ja",
    value: "訪ねる",
  },
  {
    key: "a tower",
    language: "ja",
    value: "タワー",
  },
  {
    key: "a train station",
    language: "ja",
    value: "駅",
  },
  {
    key: "a sign",
    language: "ja",
    value: "標識",
  },
  {
    key: "a hotel",
    language: "ja",
    value: "ホテル",
  },
  {
    key: "a taxi",
    language: "ja",
    value: "タクシー",
  },
  {
    key: "famous",
    language: "ja",
    value: "有名な",
  },
  {
    key: "to smile",
    language: "ja",
    value: "微笑む",
  },
  {
    key: "to jump",
    language: "ja",
    value: "跳ぶ",
  },
  {
    key: "a restaurant",
    language: "ja",
    value: "レストラン",
  },
  {
    key: "a meal",
    language: "ja",
    value: "食事",
  },
  {
    key: "a salmon",
    language: "ja",
    value: "サーモン",
  },
  {
    key: "a t-shirt",
    language: "ja",
    value: "Tシャツ",
  },
  {
    key: "a shoe/shoes",
    language: "ja",
    value: "靴",
  },
  {
    key: "expensive",
    language: "ja",
    value: "高い (値段が)",
  },
  {
    key: "a festival",
    language: "ja",
    value: "祭り",
  },
  {
    key: "food",
    language: "ja",
    value: "食べ物",
  },
  {
    key: "a light/lights",
    language: "ja",
    value: "電灯",
  },
  {
    key: "a game",
    language: "ja",
    value: "ゲーム",
  },
  {
    key: "outside",
    language: "ja",
    value: "外",
  },
  {
    key: "tonight",
    language: "ja",
    value: "今夜",
  },
  {
    key: "a singer",
    language: "ja",
    value: "歌手",
  },
  {
    key: "slow",
    language: "ja",
    value: "遅い",
  },
  {
    key: "fast",
    language: "ja",
    value: "早い",
  },
  {
    key: "beautiful",
    language: "ja",
    value: "美しい",
  },
  {
    key: "old",
    language: "ja",
    value: "古い",
  },
  {
    key: "to send",
    language: "ja",
    value: "送る",
  },
];
---
Path: /prisma/data/modules/module1/module1.ts

import { LessonModule, Level } from "@prisma/client";
import { LessonModuleInsert } from '../../moduleData';
import { LESSON_1_DATA } from "./lessons/lesson1";
import { LESSON_2_DATA } from "./lessons/lesson2";
import { LESSON_3_DATA } from "./lessons/lesson3";
import { LESSON_4_DATA } from "./lessons/lesson4";
import { LESSON_5_DATA } from "./lessons/lesson5";
import { LESSON_6_DATA } from "./lessons/lesson6";
export const MODULE_1_DATA: LessonModuleInsert = {
    key: "module_1",
    title: "Module 1",
    description: "Daily life",
    image: null,
    isPro: false,
    level: Level.BEGINNER,
    lessons: [LESSON_1_DATA, LESSON_2_DATA, LESSON_3_DATA, LESSON_4_DATA, LESSON_5_DATA, LESSON_6_DATA],
};
---
Path: /prisma/data/modules/module1/lessons/lesson1.ts

import { ChatExchangeType, ExerciseType, SectionType } from "@prisma/client";
import { LessonInsert } from "../../../lessonData";
export const LESSON_1_DATA: LessonInsert = {
  key: "lesson_1",
  title: "Lesson 1",
  description: "Planning the Big Trip",
  image: null,
  sections: [
    {
      type: SectionType.VOCABULARY,
      background: null,
      character: null,
      exercises: [
        {
          type: ExerciseType.EXPLANATION,
          fullScreen: true,
          explanation: {
            texts: [
              {
                content: "It's time to plan our first trip!",
                image: null,
              },
              {
                content: "Here are the new words for you: a tower, a shop, a temple, have fun.",
                image: null,
              },
              {
                content: "Let's go!",
                image: null,
              },
            ],
          },
        },
        {
          type: ExerciseType.VOCABULARY_ACQUISITION,
          vocabularyAcquisition: {
            concept: {
              content: "a shop",
              image: "/public/images/lessons/shop.jpg",
            },
          },
        },
        {
          type: ExerciseType.VOCABULARY_ACQUISITION,
          vocabularyAcquisition: {
            concept: {
              content: "a tower",
              image: "/public/images/lessons/tower.jpg",
            },
          },
        },
        {
          type: ExerciseType.VOCABULARY_ACQUISITION,
          vocabularyAcquisition: {
            concept: {
              content: "fun/to have fun",
              image: "/public/rive/have_fun.riv",
            },
          },
        },
        {
          type: ExerciseType.VOCABULARY_ACQUISITION,
          vocabularyAcquisition: {
            concept: {
              content: "a temple",
              image: "/public/images/lessons/temple.jpg",
            },
          },
        },
        {
          type: ExerciseType.VOCABULARY_ACQUISITION,
          vocabularyAcquisition: {
            concept: {
              content: "Bird",
              image: "/public/rive/bird.riv",
            },
          },
        },
        {
          type: ExerciseType.VOCABULARY_ACQUISITION,
          vocabularyAcquisition: {
            concept: {
              content: "Take a break",
              image: "/public/rive/take-a-break.riv",
            },
          },
        },
        {
          type: ExerciseType.VOCABULARY_PRACTICE,
          vocabularyPractice: {
            concept: {
              content: "a shop",
              image: "/public/images/lessons/shop.jpg",
            },
            choices: [
              {
                content: "a tower",
                image: null,
              },{
                content: "a taxi",
                image: null,
              },{
                content: "a bank",
                image: null,
              }
            ]
          },
        },
        {
          type: ExerciseType.VOCABULARY_PRACTICE,
          vocabularyPractice: {
            concept: {
              content: "a tower",
              image: "/public/images/lessons/tower.jpg",
            },
            choices: [
              {
                content: "a tree",
                image: null,
              },{
                content: "a car",
                image: null,
              },{
                content: "a book",
                image: null,
              }
            ]
          },
        },
        {
          type: ExerciseType.VOCABULARY_PRACTICE,
          vocabularyPractice: {
            concept: {
              content: "fun/to have fun",
              image: "/public/rive/have_fun.riv",
            },
            choices: [
              {
                content: "read/to read",
                image: null,
              },{
                content: "cook/to cook",
                image: null,
              },{
                content: "sleep/to sleep",
                image: null,
              }
            ]
          },
        },
        {
          type: ExerciseType.VOCABULARY_PRACTICE,
          vocabularyPractice: {
            concept: {
              content: "a temple",
              image: "/public/images/lessons/temple.jpg",
            },
            choices: [
              {
                content: "a beach",
                image: null,
              },
              {
                content: "a forest",
                image: null,
              },
              {
                content: "a house",
                image: null,
              }
            ]
          },
        },
        {
          type: ExerciseType.WORD_REORDERING,
          wordReordering: {
            sentence: "$w $w $w $w for fun.",
            goodSentence: "We go to Tokyo for fun.",
            choices: [
              {
                content: "We",
                image: null,
              },{
                content: "go",
                image: null,
              },{
                content: "to",
                image: null,
              },{
                content: "Tokyo",
                image: null,
              }
            ]
          }
        },
        {
          type: ExerciseType.WORD_REORDERING,
          wordReordering: {
            sentence: "We $w $w $w $w.",
            goodSentence: "We always visit the temples.",
            choices: [
              {
                content: "always",
                image: null,
              },{
                content: "visit",
                image: null,
              },{
                content: "the",
                image: null,
              },{
                content: "temples",
                image: null,
              }
            ]
          }
        },
        {
          type: ExerciseType.WORD_REORDERING,
          wordReordering: {
            sentence: "I $w $w $w $w from my house.",
            goodSentence: "I see the Tokyo Tower from my house.",
            choices: [
              {
                content: "see",
                image: null,
              },{
                content: "the",
                image: null,
              },{
                content: "Tokyo",
                image: null,
              },{
                content: "Tower",
                image: null,
              }
            ]
          }
        },
        {
          type: ExerciseType.WORD_COMPLETION,
          wordCompletion: {
            sentence: "A: We are so excited for our trip to $w!\nB: Me too, I love the city!",
            concept: {
              content: "Tokyo",
              image: null,
            },
            choices: [
              {
                content: "schools",
                image: null,
              },{
                content: "park",
                image: null,
              },{
                content: "movie",
                image: null,
              },
            ]
          }
        },
        {
          type: ExerciseType.WORD_COMPLETION,
          wordCompletion: {
            sentence: "We want to $w many interesting places.",
            concept: {
              content: "see",
              image: null,
            },
            choices: [
              {
                content: "open",
                image: null,
              },{
                content: "eat",
                image: null,
              },{
                content: "make",
                image: null,
              },
            ]
          }
        },
        {
          type: ExerciseType.WORD_COMPLETION,
          wordCompletion: {
            sentence: "A: I always have $w with my family. \nB: Your parents are the best!",
            concept: {
              content: "fun",
              image: null,
            },
            choices: [
              {
                content: "happy",
                image: null,
              },{
                content: "temple",
                image: null,
              },{
                content: "shop",
                image: null,
              },
            ]
          }
        },
        {
          type: ExerciseType.WORD_COMPLETION,
          wordCompletion: {
            sentence: "Brother: What do you do in Tokyo? \nSister: I $w and visit the tower.",
            concept: {
              content: "want to see the temples",
              image: null,
            },
            choices: [
              {
                content: "have a shop",
                image: null,
              },{
                content: "like this temple",
                image: null,
              },{
                content: "agree with you",
                image: null,
              },
            ]
          }
        },
      ],
    },
    {
      type: SectionType.LISTENING,
      background: null,
      character: null,
      exercises: [
        {
          type: ExerciseType.LISTENING,
          listening: {
            audio: "/public/audio/static/17.mp3",
            image: "/public/images/lessons/17.jpg",
            displayWords: false,
            concept: {
              content: "We are going to the Temple.",
              image: null,
            },
            choices: [
              {
                content: "We are going to the Temple.",
                image: null,
              },
              {
                content: "That's a shop.",
                image: null,
              },{
                content: "I agree.",
                image: null,
              },
            ]
          }
        },
        {
          type: ExerciseType.LISTENING,
          listening: {
            audio: "/public/audio/static/18.mp3",
            image: "/public/images/lessons/18.jpg",
            displayWords: false,
            concept: {
              content: "Yes, I think it's beautiful.",
              image: null,
            },
            choices: [
              {
                content: "Yes, I eat sushi every day.",
                image: null,
              },
              {
                content: "Yes, I think it's beautiful.",
                image: null,
              },{
                content: "It's a beautiful temple.",
                image: null,
              },
            ]
          }
        },
        {
          type: ExerciseType.LISTENING,
          listening: {
            audio: "/public/audio/static/19.mp3",
            image: null,
            displayWords: true,
            concept: {
              content: "The temples.",
              image: null,
            },
            choices: [
              {
                content: "The temples.",
                image: null,
              },
              {
                content: "The restaurants.",
                image: null,
              },
              {
                content: "The shops.",
                image: null,
              },
              {
                content: "The station.",
                image: null,
              },
            ]
          }
        },
        {
          type: ExerciseType.LISTENING,
          listening: {
            audio: "/public/audio/static/20.mp3",
            image: null,
            displayWords: true,
            concept: {
              content: "To Tokyo.",
              image: null,
            },
            choices: [
              {
                content: "To Tokyo.",
                image: null,
              },
              {
                content: "To Paris.",
                image: null,
              },
              {
                content: "To Sydney.",
                image: null,
              },
              {
                content: "To Osaka.",
                image: null,
              },
            ]
          }
        },
      ]
    },
    {
      type: SectionType.SCRIPTED_CONVERSATION,
      background: '/public/images/backgrounds/country_side.riv',
      character: 'self',
      exercises: [
        {
          type: ExerciseType.SCRIPTED_CONVERSATION,
          scriptedConversation: {
            conversation: [
              {
                type: ChatExchangeType.ASSISTANT,
                emotion: "happy",
                concept: {
                  content: "We are going to Tokyo!",
                  image: null,
                },
                choices: [],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.INPUT,
                emotion: null,
                concept: {
                  content: "Yes, let's have fun!",
                  image: null,
                },
                choices: [
                  {
                    content: "Yes I like it too!",
                    image: null,
                  },
                  {
                    content: "I don't agree.",
                    image: null,
                  },
                ],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.ASSISTANT,
                emotion: "happy",
                concept: {
                  content: "What are we going to do there?",
                  image: null,
                },
                choices: [],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.INPUT,
                emotion: null,
                concept: {
                  content: "We can visit many places.",
                  image: null,
                },
                choices: [
                  {
                    content: "We can do it!",
                    image: null,
                  },
                  {
                    content: "Yes let's go.",
                    image: null,
                  },
                ],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.ASSISTANT,
                emotion: "happy",
                concept: {
                  content: "I want to see temples, shops, and the Tokyo tower.",
                  image: null,
                },
                choices: [],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.INPUT,
                emotion: null,
                concept: {
                  content: "Great, let's go!",
                  image: null,
                },
                choices: [
                  {
                    content: "I don't see it.",
                    image: null,
                  },
                  {
                    content: "That's right.",
                    image: null,
                  },
                ],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.ASSISTANT,
                emotion: "happy",
                concept: {
                  content: "Yes, it's more fun together.",
                  image: null,
                },
                choices: [],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.INPUT,
                emotion: null,
                concept: {
                  content: "Yes, I agree! ",
                  image: null,
                },
                choices: [
                  {
                    content: "Do you want to try?",
                    image: null,
                  },
                  {
                    content: "I want to visit it.",
                    image: null,
                  },
                ],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
            ]
          },
        },
      ]
    },
  ],
};
---
Path: /prisma/data/modules/module1/lessons/lesson2.ts

import { ChatExchangeType, ExerciseType, SectionType } from "@prisma/client";
import { LessonInsert } from "../../../lessonData";
export const LESSON_2_DATA: LessonInsert = {
  key: "lesson_2",
  title: "Lesson 2",
  description: "What to Pack?",
  image: null,
  sections: [
    {
      type: SectionType.VOCABULARY,
      background: null,
      character: null,
      exercises: [
        {
          type: ExerciseType.EXPLANATION,
          fullScreen: true,
          explanation: {
            texts: [
              {
                content: "We are going to pack, are you ready?",
                image: null,
              },
              {
                content: "Here are the new words for you: to pack, clothes, a camera, a map, to take a photo, to help.",
                image: null,
              },
              {
                content: "Let's go!",
                image: null,
              },
            ],
          },
        },
        {
          type: ExerciseType.VOCABULARY_ACQUISITION,
          vocabularyAcquisition: {
            concept: {
              content: "clothes",
              image: "/public/images/lessons/clothes.jpg",
            },
          },
        },
        {
          type: ExerciseType.VOCABULARY_ACQUISITION,
          vocabularyAcquisition: {
            concept: {
              content: "a camera",
              image: "/public/rive/camera.riv",
            },
          },
        },
        {
          type: ExerciseType.VOCABULARY_ACQUISITION,
          vocabularyAcquisition: {
            concept: {
              content: "a map",
              image: "/public/images/lessons/map.jpg",
            },
          },
        },
        {
          type: ExerciseType.VOCABULARY_PRACTICE,
          vocabularyPractice: {
            concept: {
              content: "clothes",
              image: "/public/images/lessons/clothes.jpg",
            },
            choices: [
              {
                content: "a lamp",
                image: null,
              },{
                content: "a cat",
                image: null,
              },{
                content: "an apple",
                image: null,
              }
            ]
          },
        },
        {
          type: ExerciseType.VOCABULARY_PRACTICE,
          vocabularyPractice: {
            concept: {
              content: "a camera",
              image: "/public/rive/camera.riv",
            },
            choices: [
              {
                content: "a chair",
                image: null,
              },{
                content: "a tree",
                image: null,
              },{
                content: "a book",
                image: null,
              }
            ]
          },
        },
        {
          type: ExerciseType.VOCABULARY_PRACTICE,
          vocabularyPractice: {
            concept: {
              content: "a map",
              image: "/public/images/lessons/map.jpg",
            },
            choices: [
              {
                content: "a dog",
                image: null,
              },{
                content: "a house",
                image: null,
              },{
                content: "a flower",
                image: null,
              }
            ]
          },
        },
        {
          type: ExerciseType.WORD_REORDERING,
          wordReordering: {
            sentence: "I $w $w $w $w for my trips.",
            goodSentence: "I always pack my camera for my trips.",
            choices: [
              {
                content: "always",
                image: null,
              },{
                content: "pack",
                image: null,
              },{
                content: "my",
                image: null,
              },{
                content: "camera",
                image: null,
              }
            ]
          }
        },
        {
          type: ExerciseType.WORD_REORDERING,
          wordReordering: {
            sentence: "This $w $w $w $w.",
            goodSentence: "This camera takes beautiful pictures.",
            choices: [
              {
                content: "camera",
                image: null,
              },{
                content: "takes",
                image: null,
              },{
                content: "beautiful",
                image: null,
              },{
                content: "pictures",
                image: null,
              }
            ]
          }
        },
        {
          type: ExerciseType.WORD_REORDERING,
          wordReordering: {
            sentence: "I $w $w $w $w on time.",
            goodSentence: "I never pack my clothes on time.",
            choices: [
              {
                content: "never",
                image: null,
              },{
                content: "pack",
                image: null,
              },{
                content: "my",
                image: null,
              },{
                content: "clothes",
                image: null,
              }
            ]
          }
        },
        {
          type: ExerciseType.WORD_COMPLETION,
          wordCompletion: {
            sentence: "Do you $w a camera?",
            concept: {
              content: "remember",
              image: null,
            },
            choices: [
              {
                content: "need",
                image: null,
              },{
                content: "eat",
                image: null,
              },{
                content: "run",
                image: null,
              },
            ]
          }
        },
        {
          type: ExerciseType.WORD_COMPLETION,
          wordCompletion: {
            sentence: "A: $w do you need a camera?\nB: Because I want to take pictures.",
            concept: {
              content: "why",
              image: null,
            },
            choices: [
              {
                content: "what",
                image: null,
              },{
                content: "who",
                image: null,
              },{
                content: "where",
                image: null,
              },
            ]
          }
        },
        {
          type: ExerciseType.WORD_COMPLETION,
          wordCompletion: {
            sentence: "A: I need $w to pack.\nB: Don't worry. I can help you.",
            concept: {
              content: "help",
              image: null,
            },
            choices: [
              {
                content: "helped",
                image: null,
              },{
                content: "helping",
                image: null,
              },{
                content: "to help",
                image: null,
              },
            ]
          }
        },
        {
          type: ExerciseType.WORD_COMPLETION,
          wordCompletion: {
            sentence: "Boy: I think we are lost. \nGirl: We $w.",
            concept: {
              content: "need a map",
              image: null,
            },
            choices: [
              {
                content: "buy clothes",
                image: null,
              },{
                content: "wear new shoes",
                image: null,
              },{
                content: "take a camera",
                image: null,
              },
            ]
          }
        },
        {
          type: ExerciseType.WORD_COMPLETION,
          wordCompletion: {
            sentence: "Son: Why do you need a camera?\nMom: I like to take pictures $w?",
            concept: {
              content: "of many places",
              image: null,
            },
            choices: [
              {
                content: "buy clothes",
                image: null,
              },{
                content: "wear new shoes",
                image: null,
              },{
                content: "take a camera",
                image: null,
              },
            ]
          }
        },
      ],
    },
    {
      type: SectionType.LISTENING,
      background: null,
      character: null,
      exercises: [
        {
          type: ExerciseType.LISTENING,
          listening: {
            audio: "/public/audio/static/37.mp3",
            image: "/public/images/lessons/37.jpg",
            displayWords: false,
            concept: {
              content: "My clothes and a map.",
              image: null,
            },
            choices: [
              {
                content: "My clothes and a map.",
                image: null,
              },
              {
                content: "No thank you.",
                image: null,
              },{
                content: "Yes you are.",
                image: null,
              },
            ]
          }
        },
        {
          type: ExerciseType.LISTENING,
          listening: {
            audio: "/public/audio/static/38.mp3",
            image: "/public/images/lessons/38.jpg",
            displayWords: false,
            concept: {
              content: "To go to Tokyo.",
              image: null,
            },
            choices: [
              {
                content: "To go to Tokyo.",
                image: null,
              },
              {
                content: "To pack my clothes.",
                image: null,
              },{
                content: "To take a picture.",
                image: null,
              },
            ]
          }
        },
        {
          type: ExerciseType.LISTENING,
          listening: {
            audio: "/public/audio/static/39.mp3",
            image: null,
            displayWords: true,
            concept: {
              content: "A camera.",
              image: null,
            },
            choices: [
              {
                content: "A map.",
                image: null,
              },
              {
                content: "A camera.",
                image: null,
              },
              {
                content: "A cat.",
                image: null,
              },
              {
                content: "A pen.",
                image: null,
              },
            ]
          }
        },
        {
          type: ExerciseType.LISTENING,
          listening: {
            audio: "/public/audio/static/40.mp3",
            image: null,
            displayWords: true,
            concept: {
              content: "To pack.",
              image: null,
            },
            choices: [
              {
                content: "To visit.",
                image: null,
              },
              {
                content: "To take a picture.",
                image: null,
              },
              {
                content: "To pack.",
                image: null,
              },
              {
                content: "To travel.",
                image: null,
              },
            ]
          }
        },
      ]
    },
    {
      type: SectionType.SCRIPTED_CONVERSATION,
      background: '/public/images/backgrounds/room.riv',
      character: 'self',
      exercises: [
        {
          type: ExerciseType.SCRIPTED_CONVERSATION,
          scriptedConversation: {
            conversation: [
              {
                type: ChatExchangeType.ASSISTANT,
                emotion: "happy",
                concept: {
                  content: "I need to pack clothes, my camera, and a map.",
                  image: null,
                },
                choices: [],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.INPUT,
                emotion: null,
                concept: {
                  content: "That's a good idea!",
                  image: null,
                },
                choices: [
                  {
                    content: "I never buy cameras.",
                    image: null,
                  },
                  {
                    content: "The train is late.",
                    image: null,
                  },
                ],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.ASSISTANT,
                emotion: "happy",
                concept: {
                  content: "I really want to bring the camera!",
                  image: null,
                },
                choices: [],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.INPUT,
                emotion: null,
                concept: {
                  content: "Yes, to take lots of pictures!",
                  image: null,
                },
                choices: [
                  {
                    content: "To take the train.",
                    image: null,
                  },
                  {
                    content: "To visit shops.",
                    image: null,
                  },
                ],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.ASSISTANT,
                emotion: "happy",
                concept: {
                  content: "Tokyo is beautiful. I want to see every place.",
                  image: null,
                },
                choices: [],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.INPUT,
                emotion: null,
                concept: {
                  content: "I really want to go! ",
                  image: null,
                },
                choices: [
                  {
                    content: "I really like this map!",
                    image: null,
                  },
                  {
                    content: "I don't know her name.",
                    image: null,
                  },
                ],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.ASSISTANT,
                emotion: "happy",
                concept: {
                  content: "Do you want me to help you pack?",
                  image: null,
                },
                choices: [],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.INPUT,
                emotion: null,
                concept: {
                  content: "Yes, please. Thank you!",
                  image: null,
                },
                choices: [
                  {
                    content: "Yes, they can do it.",
                    image: null,
                  },
                  {
                    content: "Yes, I see it.",
                    image: null,
                  },
                ],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
            ]
          },
        },
      ]
    },
  ],
};
---
Path: /prisma/data/modules/module1/lessons/lesson3.ts

import { ChatExchangeType, ExerciseType, SectionType } from "@prisma/client";
import { LessonInsert } from "../../../lessonData";
export const LESSON_3_DATA: LessonInsert = {
  key: "lesson_3",
  title: "Lesson 3",
  description: "At the Train Station.",
  image: null,
  sections: [
    {
      type: SectionType.VOCABULARY,
      background: null,
      character: null,
      exercises: [
        {
          type: ExerciseType.EXPLANATION,
          fullScreen: true,
          explanation: {
            texts: [
              {
                content: "We are at the train station, ready to travel with me?",
                image: null,
              },
              {
                content: "Here are the new words for you: to pack, a train station, a sign, a hotel, a taxi",
                image: null,
              },
              {
                content: "Let's go!",
                image: null,
              },
            ],
          },
        },
        {
          type: ExerciseType.VOCABULARY_ACQUISITION,
          vocabularyAcquisition: {
            concept: {
              content: "a train station",
              image: "/public/images/lessons/train_station.jpg",
            },
          },
        },
        {
          type: ExerciseType.VOCABULARY_ACQUISITION,
          vocabularyAcquisition: {
            concept: {
              content: "a sign",
              image: "/public/images/lessons/sign.jpg",
            },
          },
        },
        {
          type: ExerciseType.VOCABULARY_ACQUISITION,
          vocabularyAcquisition: {
            concept: {
              content: "a hotel",
              image: "/public/images/lessons/hotel.jpg",
            },
          },
        },
        {
          type: ExerciseType.VOCABULARY_ACQUISITION,
          vocabularyAcquisition: {
            concept: {
              content: "a taxi",
              image: "/public/images/lessons/taxi.jpg",
            },
          },
        },
        {
          type: ExerciseType.VOCABULARY_PRACTICE,
          vocabularyPractice: {
            concept: {
              content: "a sign",
              image: "/public/images/lessons/sign.jpg",
            },
            choices: [
              {
                content: "a tree",
                image: null,
              },{
                content: "a bicycle",
                image: null,
              },{
                content: "a computer",
                image: null,
              }
            ]
          },
        },
        {
          type: ExerciseType.VOCABULARY_PRACTICE,
          vocabularyPractice: {
            concept: {
              content: "a train station",
              image: "/public/images/lessons/train_station.jpg",
            },
            choices: [
              {
                content: "a school",
                image: null,
              },{
                content: "a park",
                image: null,
              },{
                content: "a supermarket",
                image: null,
              }
            ]
          },
        },
        {
          type: ExerciseType.VOCABULARY_PRACTICE,
          vocabularyPractice: {
            concept: {
              content: "a hotel",
              image: "/public/images/lessons/hotel.jpg",
            },
            choices: [
              {
                content: "a restaurant",
                image: null,
              },{
                content: "a library",
                image: null,
              },{
                content: "a gym",
                image: null,
              }
            ]
          },
        },
        {
          type: ExerciseType.VOCABULARY_PRACTICE,
          vocabularyPractice: {
            concept: {
              content: "a taxi",
              image: "/public/images/lessons/taxi.jpg",
            },
            choices: [
              {
                content: "a bus",
                image: null,
              },{
                content: "a scooter",
                image: null,
              },{
                content: "a boat",
                image: null,
              }
            ]
          },
        },
        {
          type: ExerciseType.WORD_REORDERING,
          wordReordering: {
            sentence: "This $w $w $w $w.",
            goodSentence: "This station is so big.",
            choices: [
              {
                content: "station",
                image: null,
              },{
                content: "is",
                image: null,
              },{
                content: "so",
                image: null,
              },{
                content: "big",
                image: null,
              }
            ]
          }
        },
        {
          type: ExerciseType.WORD_REORDERING,
          wordReordering: {
            sentence: "Let's $w $w $w $w by taxi.",
            goodSentence: "Let's go to our hotel by taxi.",
            choices: [
              {
                content: "go",
                image: null,
              },{
                content: "to",
                image: null,
              },{
                content: "our",
                image: null,
              },{
                content: "hotel",
                image: null,
              }
            ]
          }
        },
        {
          type: ExerciseType.WORD_REORDERING,
          wordReordering: {
            sentence: "I see $w $w $w $w the station.",
            goodSentence: "I see the taxi in front of the station.",
            choices: [
              {
                content: "the",
                image: null,
              },{
                content: "taxi",
                image: null,
              },{
                content: "in",
                image: null,
              },{
                content: "front of",
                image: null,
              }
            ]
          }
        },
        {
          type: ExerciseType.WORD_COMPLETION,
          wordCompletion: {
            sentence: "There are so many $w in this train station.",
            concept: {
              content: "people",
              image: null,
            },
            choices: [
              {
                content: "green",
                image: null,
              },{
                content: "apples",
                image: null,
              },{
                content: "animals",
                image: null,
              },
            ]
          }
        },
        {
          type: ExerciseType.WORD_COMPLETION,
          wordCompletion: {
            sentence: "I don't have money for the $w.",
            concept: {
              content: "taxi",
              image: null,
            },
            choices: [
              {
                content: "sign",
                image: null,
              },{
                content: "people",
                image: null,
              },{
                content: "big",
                image: null,
              },
            ]
          }
        },
        {
          type: ExerciseType.WORD_COMPLETION,
          wordCompletion: {
            sentence: "I don't know $w my hotel is.",
            concept: {
              content: "where",
              image: null,
            },
            choices: [
              {
                content: "who",
                image: null,
              },{
                content: "because",
                image: null,
              },{
                content: "when",
                image: null,
              },
            ]
          }
        },
        {
          type: ExerciseType.WORD_COMPLETION,
          wordCompletion: {
            sentence: "Boy: This hotel is beautiful.\nGirl: Yes, $w.",
            concept: {
              content: "it's also very big",
              image: null,
            },
            choices: [
              {
                content: "it's faster",
                image: null,
              },{
                content: "the taxi is fast",
                image: null,
              },{
                content: "I see the sign",
                image: null,
              },
            ]
          }
        },
        {
          type: ExerciseType.WORD_COMPLETION,
          wordCompletion: {
            sentence: "Boy: The hotel is behind the station.\nGirl: That's far. $w.",
            concept: {
              content: "Let's find a taxi",
              image: null,
            },
            choices: [
              {
                content: "This station is so big",
                image: null,
              },{
                content: "I don't know you",
                image: null,
              },{
                content: "Yes, it's faster.",
                image: null,
              },
            ]
          }
        },
      ],
    },
    {
      type: SectionType.LISTENING,
      background: null,
      character: null,
      exercises: [
        {
          type: ExerciseType.LISTENING,
          listening: {
            audio: "/public/audio/static/59.mp3",
            image: "/public/images/lessons/59.jpg",
            displayWords: false,
            concept: {
              content: "Yes, it's beautiful.",
              image: null,
            },
            choices: [
              {
                content: "Yes, I have it.",
                image: null,
              },
              {
                content: "Yes, it's beautiful.",
                image: null,
              },{
                content: "Yes, we can.",
                image: null,
              },
            ]
          }
        },
        {
          type: ExerciseType.LISTENING,
          listening: {
            audio: "/public/audio/static/60.mp3",
            image: "/public/images/lessons/60.jpg",
            displayWords: false,
            concept: {
              content: "Yes I want.",
              image: null,
            },
            choices: [
              {
                content: "Yes I want.",
                image: null,
              },
              {
                content: "Yes, it's a map.",
                image: null,
              },{
                content: "Yes, it's a temple.",
                image: null,
              },
            ]
          }
        },          
        {
          type: ExerciseType.LISTENING,
          listening: {
            audio: "/public/audio/static/61.mp3",
            image: null,
            displayWords: true,
            concept: {
              content: "Behind the station.",
              image: null,
            },
            choices: [
              {
                content: "Behind the station.",
                image: null,
              },
              {
                content: "In front of the station.",
                image: null,
              },
              {
                content: "In the city.",
                image: null,
              },
              {
                content: "Near the temple.",
                image: null,
              },
            ]
          }
        },          
        {
          type: ExerciseType.LISTENING,
          listening: {
            audio: "/public/audio/static/62.mp3",
            image: null,
            displayWords: true,
            concept: {
              content: "By taxi.",
              image: null,
            },
            choices: [
              {
                content: "By taxi.",
                image: null,
              },
              {
                content: "By car.",
                image: null,
              },
              {
                content: "By bus.",
                image: null,
              },
              {
                content: "By train.",
                image: null,
              },
            ]
          }
        },          
      ]
    },
    {
      type: SectionType.SCRIPTED_CONVERSATION,
      background: '/public/images/backgrounds/station.riv',
      character: 'self',
      exercises: [
        {
          type: ExerciseType.SCRIPTED_CONVERSATION,
          scriptedConversation: {
            conversation: [
              {
                type: ChatExchangeType.ASSISTANT,
                emotion: "happy",
                concept: {
                  content: "This station is so big.",
                  image: null,
                },
                choices: [],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.INPUT,
                emotion: null,
                concept: {
                  content: "Yes, there are so many people!",
                  image: null,
                },
                choices: [
                  {
                    content: "What a nice person!",
                    image: null,
                  },
                  {
                    content: "No, I don't have my camera.",
                    image: null,
                  },
                ],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.ASSISTANT,
                emotion: "happy",
                concept: {
                  content: "Let's go to our hotel by taxi.",
                  image: null,
                },
                choices: [],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.INPUT,
                emotion: null,
                concept: {
                  content: "Yes, it's faster.",
                  image: null,
                },
                choices: [
                  {
                    content: "Yes, it's slower.",
                    image: null,
                  },
                  {
                    content: "Yes, it's bigger.",
                    image: null,
                  },
                ],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.ASSISTANT,
                emotion: "happy",
                concept: {
                  content: "Where can we find a taxi?",
                  image: null,
                },
                choices: [],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.INPUT,
                emotion: null,
                concept: {
                  content: "In the street behind the station.",
                  image: null,
                },
                choices: [
                  {
                    content: "On the train.",
                    image: null,
                  },
                  {
                    content: "In your suitcase.",
                    image: null,
                  },
                ],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.ASSISTANT,
                emotion: "happy",
                concept: {
                  content: "You are right, I see the sign.",
                  image: null,
                },
                choices: [],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.INPUT,
                emotion: null,
                concept: {
                  content: "Okay, let's go.",
                  image: null,
                },
                choices: [
                  {
                    content: "Okay, I have it.",
                    image: null,
                  },
                  {
                    content: "Great, I don't want to go.",
                    image: null,
                  },
                ],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
            ]
          },
        },
      ]
    },
  ],
};
---
Path: /prisma/data/modules/module1/lessons/lesson4.ts

import { ChatExchangeType, ExerciseType, SectionType } from "@prisma/client";
import { LessonInsert } from "../../../lessonData";
export const LESSON_4_DATA: LessonInsert = {
  key: "lesson_4",
  title: "Lesson 4",
  description: "Welcome to Shibuya.",
  image: null,
  sections: [
    {
      type: SectionType.VOCABULARY,
      background: null,
      character: null,
      exercises: [
        {
          type: ExerciseType.EXPLANATION,
          fullScreen: true,
          explanation: {
            texts: [
              {
                content: "We finally arrived at Shibuya!",
                image: null,
              },
              {
                content: "Here are the new words for you: famous, to smile, to jump.",
                image: null,
              },
              {
                content: "Let's go!",
                image: null,
              },
            ],
          },
        },
        {
          type: ExerciseType.VOCABULARY_ACQUISITION,
          vocabularyAcquisition: {
            concept: {
              content: "famous",
              image: "/public/images/lessons/famous.jpg",
            },
          },
        },
        {
          type: ExerciseType.VOCABULARY_ACQUISITION,
          vocabularyAcquisition: {
            concept: {
              content: "to smile",
              image: "/public/images/lessons/to_smile.riv",
            },
          },
        },
        {
          type: ExerciseType.VOCABULARY_ACQUISITION,
          vocabularyAcquisition: {
            concept: {
              content: "to jump",
              image: "/public/images/lessons/to_jump.riv",
            },
          },
        },
        {
          type: ExerciseType.VOCABULARY_PRACTICE,
          vocabularyPractice: {
            concept: {
              content: "famous",
              image: "/public/images/lessons/famous.jpg",
            },
            choices: [
              {
                content: "happy",
                image: null,
              },{
                content: "cold",
                image: null,
              },{
                content: "quick",
                image: null,
              }
            ]
          },
        },
        {
          type: ExerciseType.VOCABULARY_PRACTICE,
          vocabularyPractice: {
            concept: {
              content: "to smile",
              image: "/public/images/lessons/to_smile.riv",
            },
            choices: [
              {
                content: "to run",
                image: null,
              },{
                content: "to sit",
                image: null,
              },{
                content: "to write",
                image: null,
              }
            ]
          },
        },
        {
          type: ExerciseType.VOCABULARY_PRACTICE,
          vocabularyPractice: {
            concept: {
              content: "to jump",
              image: "/public/images/lessons/to_jump.riv",
            },
            choices: [
              {
                content: "to eat",
                image: null,
              },{
                content: "to sleep",
                image: null,
              },{
                content: "to listen",
                image: null,
              }
            ]
          },
        },
        {
          type: ExerciseType.WORD_REORDERING,
          wordReordering: {
            sentence: "Shibuya $w $w $w $w place.",
            goodSentence: "Shibuya is a very famous place.",
            choices: [
              {
                content: "is",
                image: null,
              },{
                content: "a",
                image: null,
              },{
                content: "very",
                image: null,
              },{
                content: "famous",
                image: null,
              }
            ]
          }
        },
        {
          type: ExerciseType.WORD_REORDERING,
          wordReordering: {
            sentence: "Do we $w $w $w $w?",
            goodSentence: "Do we take a photo here?",
            choices: [
              {
                content: "take",
                image: null,
              },{
                content: "a",
                image: null,
              },{
                content: "photo",
                image: null,
              },{
                content: "here",
                image: null,
              }
            ]
          }
        },
        {
          type: ExerciseType.WORD_REORDERING,
          wordReordering: {
            sentence: "You $w $w $w $w.",
            goodSentence: "You have a nice smile.",
            choices: [
              {
                content: "have",
                image: null,
              },{
                content: "a",
                image: null,
              },{
                content: "nice",
                image: null,
              },{
                content: "smile",
                image: null,
              }
            ]
          }
        },
        {
          type: ExerciseType.WORD_COMPLETION,
          wordCompletion: {
            sentence: "Shibuya is a $w place.",
            concept: {
              content: "famous",
              image: null,
            },
            choices: [
              {
                content: "photo",
                image: null,
              },{
                content: "French",
                image: null,
              },{
                content: "taxi",
                image: null,
              },
            ]
          }
        },
        {
          type: ExerciseType.WORD_COMPLETION,
          wordCompletion: {
            sentence: "I don't have money for the $w.",
            concept: {
              content: "taxi",
              image: null,
            },
            choices: [
              {
                content: "sign",
                image: null,
              },{
                content: "people",
                image: null,
              },{
                content: "big",
                image: null,
              },
            ]
          }
        },
        {
          type: ExerciseType.WORD_COMPLETION,
          wordCompletion: {
            sentence: "A: What do you want to do for the photo?\nB: Let's $w it's fun!",
            concept: {
              content: "jump",
              image: null,
            },
            choices: [
              {
                content: "swim",
                image: null,
              },{
                content: "buy",
                image: null,
              },{
                content: "take",
                image: null,
              },
            ]
          }
        },
        {
          type: ExerciseType.WORD_COMPLETION,
          wordCompletion: {
            sentence: "Boy: This hotel is beautiful.\nGirl: Yes, $w.",
            concept: {
              content: "it's also very big",
              image: null,
            },
            choices: [
              {
                content: "it's faster",
                image: null,
              },{
                content: "the taxi is fast",
                image: null,
              },{
                content: "I see the sign",
                image: null,
              },
            ]
          }
        },
        {
          type: ExerciseType.WORD_COMPLETION,
          wordCompletion: {
            sentence: "I like your $w in this photo.",
            concept: {
              content: "smile",
              image: null,
            },
            choices: [
              {
                content: "hotel",
                image: null,
              },{
                content: "great",
                image: null,
              },{
                content: "how",
                image: null,
              },
            ]
          }
        },
        {
          type: ExerciseType.WORD_COMPLETION,
          wordCompletion: {
            sentence: "Boy: What do you want to do in Shibuya?\nMom: I want to $w.",
            concept: {
              content: "take a lot of photos.",
              image: null,
            },
            choices: [
              {
                content: "clean my room",
                image: null,
              },{
                content: "pack",
                image: null,
              },{
                content: "sleep in my bed",
                image: null,
              },
            ]
          }
        },
        {
          type: ExerciseType.WORD_COMPLETION,
          wordCompletion: {
            sentence: "Boy: Look at the camera.\nGirl: Ok. $w",
            concept: {
              content: "Can I smile now?",
              image: null,
            },
            choices: [
              {
                content: "Do you want some bread?",
                image: null,
              },{
                content: "Do you want to eat sushi?",
                image: null,
              },{
                content: "Let's take a taxi.",
                image: null,
              },
            ]
          }
        },
      ],
    },
    {
      type: SectionType.LISTENING,
      background: null,
      character: null,
      exercises: [
        {
          type: ExerciseType.LISTENING,
          listening: {
            audio: "/public/audio/static/79.mp3",
            image: "/public/images/lessons/79.jpg",
            displayWords: false,
            concept: {
              content: "Yes, this place is famous!",
              image: null,
            },
            choices: [
              {
                content: "Yes, let's pack.",
                image: null,
              },
              {
                content: "Yes, this place is famous!",
                image: null,
              },{
                content: "I want to take a taxi.",
                image: null,
              },
            ]
          }
        },
        {
          type: ExerciseType.LISTENING,
          listening: {
            audio: "/public/audio/static/80.mp3",
            image: "/public/images/lessons/80.jpg",
            displayWords: false,
            concept: {
              content: "Yes, I love your smile!",
              image: null,
            },
            choices: [
              {
                content: "No, I don't like sushi.",
                image: null,
              },
              {
                content: "Yes, I love your smile!",
                image: null,
              },{
                content: "Yes, we can take a taxi.",
                image: null,
              },
            ]
          }
        },          
        {
          type: ExerciseType.LISTENING,
          listening: {
            audio: "/public/audio/static/81.mp3",
            image: null,
            displayWords: true,
            concept: {
              content: "In Shibuya.",
              image: null,
            },
            choices: [
              {
                content: "In a park",
                image: null,
              },
              {
                content: "In Shibuya.",
                image: null,
              },
              {
                content: "In a city.",
                image: null,
              },
              {
                content: "In Harajuku.",
                image: null,
              },
            ]
          }
        },          
        {
          type: ExerciseType.LISTENING,
          listening: {
            audio: "/public/audio/static/82.mp3",
            image: null,
            displayWords: true,
            concept: {
              content: "To jump.",
              image: null,
            },
            choices: [
              {
                content: "To jump.",
                image: null,
              },
              {
                content: "To sleep.",
                image: null,
              },
              {
                content: "To smile.",
                image: null,
              },
              {
                content: "To run.",
                image: null,
              },
            ]
          }
        },          
      ]
    },
    {
      type: SectionType.SCRIPTED_CONVERSATION,
      background: '/public/images/backgrounds/shibuya.riv',
      character: 'self',
      exercises: [
        {
          type: ExerciseType.SCRIPTED_CONVERSATION,
          scriptedConversation: {
            conversation: [
              {
                type: ChatExchangeType.ASSISTANT,
                emotion: "happy",
                concept: {
                  content: "Shibuya is a very famous place.",
                  image: null,
                },
                choices: [],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.INPUT,
                emotion: null,
                concept: {
                  content: "Let's take a photo!",
                  image: null,
                },
                choices: [
                  {
                    content: "Let's take a train.",
                    image: null,
                  },
                  {
                    content: "Let's take a map.",
                    image: null,
                  },
                ],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.ASSISTANT,
                emotion: "happy",
                concept: {
                  content: "Ok, we can jump it's fun!",
                  image: null,
                },
                choices: [],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.INPUT,
                emotion: null,
                concept: {
                  content: "No, it's too much.",
                  image: null,
                },
                choices: [
                  {
                    content: "No, it's too slow.",
                    image: null,
                  },
                  {
                    content: "He is very nice.",
                    image: null,
                  },
                ],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.ASSISTANT,
                emotion: "happy",
                concept: {
                  content: "You are right. Let's just smile.",
                  image: null,
                },
                choices: [],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.INPUT,
                emotion: null,
                concept: {
                  content: "I am ready!",
                  image: null,
                },
                choices: [
                  {
                    content: "I want to go.",
                    image: null,
                  },
                  {
                    content: "He is not famous.",
                    image: null,
                  },
                ],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.ASSISTANT,
                emotion: "happy",
                concept: {
                  content: "Great! Look at the camera.",
                  image: null,
                },
                choices: [],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.INPUT,
                emotion: null,
                concept: {
                  content: "I hope it's a nice photo! ",
                  image: null,
                },
                choices: [
                  {
                    content: "It's a good map.",
                    image: null,
                  },
                  {
                    content: "I hope they have food.",
                    image: null,
                  },
                ],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
            ]
          },
        },
      ]
    },
  ],
};
---
Path: /prisma/data/modules/module1/lessons/lesson5.ts

import { ChatExchangeType, ExerciseType, SectionType } from "@prisma/client";
import { LessonInsert } from "../../../lessonData";
export const LESSON_5_DATA: LessonInsert = {
  key: "lesson_5",
  title: "Lesson 5",
  description: "First Meal.",
  image: null,
  sections: [
    {
      type: SectionType.VOCABULARY,
      background: null,
      character: null,
      exercises: [
        {
          type: ExerciseType.EXPLANATION,
          fullScreen: true,
          explanation: {
            texts: [
              {
                content: "It's time to get a good meal!",
                image: null,
              },
              {
                content: "Here are the new words for you: a restaurant, a meal, a salmon",
                image: null,
              },
              {
                content: "Let's go!",
                image: null,
              },
            ],
          },
        },
        {
          type: ExerciseType.VOCABULARY_ACQUISITION,
          vocabularyAcquisition: {
            concept: {
              content: "a restaurant",
              image: "/public/images/lessons/restaurant.jpg",
            },
          },
        },
        {
          type: ExerciseType.VOCABULARY_ACQUISITION,
          vocabularyAcquisition: {
            concept: {
              content: "a meal",
              image: "/public/images/lessons/meal.jpg",
            },
          },
        },
        {
          type: ExerciseType.VOCABULARY_ACQUISITION,
          vocabularyAcquisition: {
            concept: {
              content: "a salmon",
              image: "/public/images/lessons/salmon.jpg",
            },
          },
        },
        {
          type: ExerciseType.VOCABULARY_PRACTICE,
          vocabularyPractice: {
            concept: {
              content: "a restaurant",
              image: "/public/images/lessons/restaurant.jpg",
            },
            choices: [
              {
                content: "a bookstore",
                image: null,
              },{
                content: "a hospital",
                image: null,
              },{
                content: "a cinema",
                image: null,
              }
            ]
          },
        },
        {
          type: ExerciseType.VOCABULARY_PRACTICE,
          vocabularyPractice: {
            concept: {
              content: "a meal",
              image: "/public/images/lessons/meal.jpg",
            },
            choices: [
              {
                content: "a flower",
                image: null,
              },{
                content: "a computer",
                image: null,
              },{
                content: "a bicycle",
                image: null,
              }
            ]
          },
        },
        {
          type: ExerciseType.VOCABULARY_PRACTICE,
          vocabularyPractice: {
            concept: {
              content: "a salmon",
              image: "/public/images/lessons/salmon.jpg",
            },
            choices: [
              {
                content: "a chicken",
                image: null,
              },{
                content: "a pineapple",
                image: null,
              },{
                content: "a carrot",
                image: null,
              }
            ]
          },
        },
        {
          type: ExerciseType.WORD_REORDERING,
          wordReordering: {
            sentence: "You $w $w $w $w.",
            goodSentence: "You have a nice smile.",
            choices: [
              {
                content: "have",
                image: null,
              },{
                content: "a",
                image: null,
              },{
                content: "nice",
                image: null,
              },{
                content: "smile",
                image: null,
              }
            ]
          }
        },
        {
          type: ExerciseType.WORD_REORDERING,
          wordReordering: {
            sentence: "It's $w $w $w $w meal.",
            goodSentence: "It's going to be a good meal.",
            choices: [
              {
                content: "going to",
                image: null,
              },{
                content: "be",
                image: null,
              },{
                content: "a",
                image: null,
              },{
                content: "good",
                image: null,
              }
            ]
          }
        },
        {
          type: ExerciseType.WORD_COMPLETION,
          wordCompletion: {
            sentence: "I $w to eat sushi in a restaurant.",
            concept: {
              content: "want",
              image: null,
            },
            choices: [
              {
                content: "can",
                image: null,
              },{
                content: "take",
                image: null,
              },{
                content: "sleep",
                image: null,
              },
            ]
          }
        },
        {
          type: ExerciseType.WORD_COMPLETION,
          wordCompletion: {
            sentence: "A: My $w is salmon sushi. It's delicious.\nB: I love that too!",
            concept: {
              content: "favorite",
              image: null,
            },
            choices: [
              {
                content: "big",
                image: null,
              },{
                content: "beautiful",
                image: null,
              },{
                content: "slow",
                image: null,
              },
            ]
          }
        },
        {
          type: ExerciseType.WORD_COMPLETION,
          wordCompletion: {
            sentence: "A: Do you want $w eat together?",
            concept: {
              content: "to",
              image: null,
            },
            choices: [
              {
                content: "at",
                image: null,
              },{
                content: "up",
                image: null,
              },{
                content: "on",
                image: null,
              },
            ]
          }
        },
        {
          type: ExerciseType.WORD_COMPLETION,
          wordCompletion: {
            sentence: "Brother: I want to try sushi in a restaurant.\nSister: What $w",
            concept: {
              content: "kind of sushi?",
              image: null,
            },
            choices: [
              {
                content: "is your name?",
                image: null,
              },{
                content: "time is it?",
                image: null,
              },{
                content: "game is it?",
                image: null,
              },
            ]
          }
        },
        {
          type: ExerciseType.WORD_COMPLETION,
          wordCompletion: {
            sentence: "Sister: The food looks great\nBrother: Yes, $w",
            concept: {
              content: "It's going to be a good meal.",
              image: null,
            },
            choices: [
              {
                content: "he is very fast.",
                image: null,
              },{
                content: "it's too late.",
                image: null,
              },{
                content: "I don't eat sushi.",
                image: null,
              },
            ]
          }
        },
      ],
    },
    {
      type: SectionType.LISTENING,
      background: null,
      character: null,
      exercises: [
        {
          type: ExerciseType.LISTENING,
          listening: {
            audio: "/public/audio/static/99.mp3",
            image: "/public/images/lessons/99.jpg",
            displayWords: false,
            concept: {
              content: "Yes, I love it!",
              image: null,
            },
            choices: [
              {
                content: "Yes, I love it!",
                image: null,
              },
              {
                content: "Yes, I want to take a picture.",
                image: null,
              },{
                content: "Yes, let's buy new clothes.",
                image: null,
              },
            ]
          }
        },
        {
          type: ExerciseType.LISTENING,
          listening: {
            audio: "/public/audio/static/100.mp3",
            image: "/public/images/lessons/100.jpg",
            displayWords: false,
            concept: {
              content: "Me too!",
              image: null,
            },
            choices: [
              {
                content: "Me too!",
                image: null,
              },
              {
                content: "Let's go to the station.",
                image: null,
              },{
                content: "What kind of sushi?",
                image: null,
              },
            ]
          }
        },          
        {
          type: ExerciseType.LISTENING,
          listening: {
            audio: "/public/audio/static/101.mp3",
            image: null,
            displayWords: true,
            concept: {
              content: "Sushi",
              image: null,
            },
            choices: [
              {
                content: "A sandwich.",
                image: null,
              },
              {
                content: "A salad.",
                image: null,
              },
              {
                content: "Sushi",
                image: null,
              },
              {
                content: "A burger.",
                image: null,
              },
            ]
          }
        },          
        {
          type: ExerciseType.LISTENING,
          listening: {
            audio: "/public/audio/static/102.mp3",
            image: null,
            displayWords: true,
            concept: {
              content: "Salmon.",
              image: null,
            },
            choices: [
              {
                content: "Tuna.",
                image: null,
              },
              {
                content: "Salmon.",
                image: null,
              },
              {
                content: "Salad.",
                image: null,
              },
              {
                content: "Shrimp.",
                image: null,
              },
            ]
          }
        },          
      ]
    },
    {
      type: SectionType.SCRIPTED_CONVERSATION,
      background: '/public/images/backgrounds/restaurant.riv',
      character: 'self',
      exercises: [
        {
          type: ExerciseType.SCRIPTED_CONVERSATION,
          scriptedConversation: {
            conversation: [
              {
                type: ChatExchangeType.ASSISTANT,
                emotion: "happy",
                concept: {
                  content: "I want to eat sushi in this restaurant.",
                  image: null,
                },
                choices: [],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.INPUT,
                emotion: null,
                concept: {
                  content: "What kind of sushi?",
                  image: null,
                },
                choices: [
                  {
                    content: "What kind of clothes?",
                    image: null,
                  },
                  {
                    content: "Do you like this picture?",
                    image: null,
                  },
                ],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.ASSISTANT,
                emotion: "happy",
                concept: {
                  content: "My favorite is salmon sushi.",
                  image: null,
                },
                choices: [],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.INPUT,
                emotion: null,
                concept: {
                  content: "I love that too!",
                  image: null,
                },
                choices: [
                  {
                    content: "He is very famous.",
                    image: null,
                  },
                  {
                    content: "I don't like this restaurant.",
                    image: null,
                  },
                ],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.ASSISTANT,
                emotion: "happy",
                concept: {
                  content: "And the restaurant looks great.",
                  image: null,
                },
                choices: [],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.INPUT,
                emotion: null,
                concept: {
                  content: "Yes, it's a very beautiful restaurant.",
                  image: null,
                },
                choices: [
                  {
                    content: "Yes, it's a beautiful salmon.",
                    image: null,
                  },
                  {
                    content: "I want to take a taxi.",
                    image: null,
                  },
                ],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.ASSISTANT,
                emotion: "happy",
                concept: {
                  content: "Let's go eat?",
                  image: null,
                },
                choices: [],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.INPUT,
                emotion: null,
                concept: {
                  content: "Yes, it's going to be a good meal.",
                  image: null,
                },
                choices: [
                  {
                    content: "Yes, it's going to be a terrible meal.",
                    image: null,
                  },
                  {
                    content: "I am not very happy.",
                    image: null,
                  },
                ],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
            ]
          },
        },
      ]
    },
  ],
};
---
Path: /prisma/data/modules/module1/lessons/lesson6.ts

import { ChatExchangeType, ExerciseType, SectionType } from "@prisma/client";
import { LessonInsert } from "../../../lessonData";
export const LESSON_6_DATA: LessonInsert = {
  key: "lesson_6",
  title: "Lesson 6",
  description: "Shopping in Harajuku",
  image: null,
  sections: [
    {
      type: SectionType.VOCABULARY,
      background: null,
      character: null,
      exercises: [
        {
          type: ExerciseType.EXPLANATION,
          fullScreen: true,
          explanation: {
            texts: [
              {
                content: "Do you like fashion?",
                image: null,
              },
              {
                content: "Here are the new words for you: a t-shirt, a shoe/shoes, expensive",
                image: null,
              },
              {
                content: "Let's go!",
                image: null,
              },
            ],
          },
        },
        {
          type: ExerciseType.VOCABULARY_ACQUISITION,
          vocabularyAcquisition: {
            concept: {
              content: "a t-shirt",
              image: "/public/images/lessons/t-shirt.jpg",
            },
          },
        },
        {
          type: ExerciseType.VOCABULARY_ACQUISITION,
          vocabularyAcquisition: {
            concept: {
              content: "a shoe/shoes",
              image: "/public/images/lessons/shoes.riv",
            },
          },
        },
        {
          type: ExerciseType.VOCABULARY_ACQUISITION,
          vocabularyAcquisition: {
            concept: {
              content: "expensive",
              image: "/public/images/lessons/expensive.jpg",
            },
          },
        },
        {
          type: ExerciseType.VOCABULARY_PRACTICE,
          vocabularyPractice: {
            concept: {
              content: "a t-shirt",
              image: "/public/images/lessons/t-shirt.jpg",
            },
            choices: [
              {
                content: "a jacket",
                image: null,
              },{
                content: "a hat",
                image: null,
              },{
                content: "a scarf",
                image: null,
              }
            ]
          },
        },
        {
          type: ExerciseType.VOCABULARY_PRACTICE,
          vocabularyPractice: {
            concept: {
              content: "a shoe/shoes",
              image: "/public/images/lessons/shoes.riv",
            },
            choices: [
              {
                content: "a glove",
                image: null,
              },{
                content: "a belt",
                image: null,
              },{
                content: "a sock",
                image: null,
              }
            ]
          },
        },
        {
          type: ExerciseType.VOCABULARY_PRACTICE,
          vocabularyPractice: {
            concept: {
              content: "expensive",
              image: "/public/images/lessons/expensive.jpg",
            },
            choices: [
              {
                content: "cheap",
                image: null,
              },{
                content: "polite",
                image: null,
              },{
                content: "dirty",
                image: null,
              }
            ]
          },
        },
        {
          type: ExerciseType.WORD_REORDERING,
          wordReordering: {
            sentence: "$w $w $w $w shopping.",
            goodSentence: "Let's go to Harajuku for shopping.",
            choices: [
              {
                content: "Let's go",
                image: null,
              },{
                content: "to",
                image: null,
              },{
                content: "Harajuku",
                image: null,
              },{
                content: "for",
                image: null,
              }
            ]
          }
        },
        {
          type: ExerciseType.WORD_REORDERING,
          wordReordering: {
            sentence: "They $w $w $w $w.",
            goodSentence: "They have nice clothes here.",
            choices: [
              {
                content: "have",
                image: null,
              },{
                content: "nice",
                image: null,
              },{
                content: "clothes",
                image: null,
              },{
                content: "here",
                image: null,
              }
            ]
          }
        },
        {
          type: ExerciseType.WORD_REORDERING,
          wordReordering: {
            sentence: "I $w $w $w $w.",
            goodSentence: "I need to buy a t-shirt.",
            choices: [
              {
                content: "need to",
                image: null,
              },{
                content: "buy",
                image: null,
              },{
                content: "a",
                image: null,
              },{
                content: "t-shirt",
                image: null,
              }
            ]
          }
        },
        {
          type: ExerciseType.WORD_COMPLETION,
          wordCompletion: {
            sentence: "A: Let's go to Harajuku. There are many $w.\nB: What can we find there?",
            concept: {
              content: "shops",
              image: null,
            },
            choices: [
              {
                content: "shopping",
                image: null,
              },{
                content: "water",
                image: null,
              },{
                content: "salmon",
                image: null,
              },
            ]
          }
        },
        {
          type: ExerciseType.WORD_COMPLETION,
          wordCompletion: {
            sentence: "A: I need to $w a t-shirt, but not an expensive one.",
            concept: {
              content: "buy",
              image: null,
            },
            choices: [
              {
                content: "run",
                image: null,
              },{
                content: "buying",
                image: null,
              },{
                content: "bought",
                image: null,
              },
            ]
          }
        },
        {
          type: ExerciseType.WORD_COMPLETION,
          wordCompletion: {
            sentence: "A: I like this shop.\nB: Me $w.",
            concept: {
              content: "too",
              image: null,
            },
            choices: [
              {
                content: "them",
                image: null,
              },{
                content: "us",
                image: null,
              },{
                content: "we",
                image: null,
              },
            ]
          }
        },
        {
          type: ExerciseType.WORD_COMPLETION,
          wordCompletion: {
            sentence: "Friend 1: Welcome to Harajuku.\nFriend 2: Look. $w",
            concept: {
              content: "There are so many shops!",
              image: null,
            },
            choices: [
              {
                content: "Let's go after lunch.",
                image: null,
              },{
                content: "It's on the table.",
                image: null,
              },{
                content: "I'm sorry.",
                image: null,
              },
            ]
          }
        },
        {
          type: ExerciseType.WORD_COMPLETION,
          wordCompletion: {
            sentence: "Friend 2: Do you want to buy this t-shirt?\nFriend 1: Yes. $w",
            concept: {
              content: "But it's too expensive.",
              image: null,
            },
            choices: [
              {
                content: "But it's five o'clock.",
                image: null,
              },{
                content: "But I like this tree.",
                image: null,
              },{
                content: "I can take a taxi.",
                image: null,
              },
            ]
          }
        },
      ],
    },
    {
      type: SectionType.LISTENING,
      background: null,
      character: null,
      exercises: [
        {
          type: ExerciseType.LISTENING,
          listening: {
            audio: "/public/audio/static/119.mp3",
            image: "/public/images/lessons/119.jpg",
            displayWords: false,
            concept: {
              content: "What shop do you want to go to?",
              image: null,
            },
            choices: [
              {
                content: "What shop do you want to go to?",
                image: null,
              },
              {
                content: "That's a nice camera!",
                image: null,
              },{
                content: "I don't like this picture.",
                image: null,
              },
            ]
          }
        },
        {
          type: ExerciseType.LISTENING,
          listening: {
            audio: "/public/audio/static/120.mp3",
            image: "/public/images/lessons/120.jpg",
            displayWords: false,
            concept: {
              content: "I want to buy some!",
              image: null,
            },
            choices: [
              {
                content: "I want to buy some!",
                image: null,
              },
              {
                content: "I want this drink.",
                image: null,
              },{
                content: "I don't have it.",
                image: null,
              },
            ]
          }
        },          
        {
          type: ExerciseType.LISTENING,
          listening: {
            audio: "/public/audio/static/121.mp3",
            image: null,
            displayWords: true,
            concept: {
              content: "They are expensive.",
              image: null,
            },
            choices: [
              {
                content: "They are expensive.",
                image: null,
              },
              {
                content: "They are cheap.",
                image: null,
              },
              {
                content: "They are famous.",
                image: null,
              },
              {
                content: "They are big.",
                image: null,
              },
            ]
          }
        },          
        {
          type: ExerciseType.LISTENING,
          listening: {
            audio: "/public/audio/static/122.mp3",
            image: null,
            displayWords: true,
            concept: {
              content: "A new t-shirt.",
              image: null,
            },
            choices: [
              {
                content: "New shoes.",
                image: null,
              },
              {
                content: "A camera.",
                image: null,
              },
              {
                content: "A new t-shirt.",
                image: null,
              },
              {
                content: "A map.",
                image: null,
              },
            ]
          }
        },          
      ]
    },
    {
      type: SectionType.SCRIPTED_CONVERSATION,
      background: '/public/images/backgrounds/harajuku.riv',
      character: 'self',
      exercises: [
        {
          type: ExerciseType.SCRIPTED_CONVERSATION,
          scriptedConversation: {
            conversation: [
              {
                type: ChatExchangeType.ASSISTANT,
                emotion: "happy",
                concept: {
                  content: "Welcome to Harajuku. There are many shops.",
                  image: null,
                },
                choices: [],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.INPUT,
                emotion: null,
                concept: {
                  content: "What shops can we find here?",
                  image: null,
                },
                choices: [
                  {
                    content: "When does the restaurant open?",
                    image: null,
                  },
                  {
                    content: "Where is the taxi?",
                    image: null,
                  },
                ],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.ASSISTANT,
                emotion: "happy",
                concept: {
                  content: "Look, they have nice clothes here.",
                  image: null,
                },
                choices: [],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.INPUT,
                emotion: null,
                concept: {
                  content: "Great, let's go in the shop.",
                  image: null,
                },
                choices: [
                  {
                    content: "How much is the camera?",
                    image: null,
                  },
                  {
                    content: "Great, let's go to the station.",
                    image: null,
                  },
                ],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.ASSISTANT,
                emotion: "happy",
                concept: {
                  content: "I need to buy a t-shirt.",
                  image: null,
                },
                choices: [],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.INPUT,
                emotion: null,
                concept: {
                  content: "Me too, I also need shoes.",
                  image: null,
                },
                choices: [
                  {
                    content: "Me too, I really like salmon.",
                    image: null,
                  },
                  {
                    content: "What is your name?",
                    image: null,
                  },
                ],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.ASSISTANT,
                emotion: "happy",
                concept: {
                  content: "I hope we find some.",
                  image: null,
                },
                choices: [],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.INPUT,
                emotion: null,
                concept: {
                  content: "And not too expensive!",
                  image: null,
                },
                choices: [
                  {
                    content: "That's a good meal!",
                    image: null,
                  },
                  {
                    content: "I don't like the color of these shoes.",
                    image: null,
                  },
                ],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
            ]
          },
        },
      ]
    },
  ],
};
---
Path: /prisma/data/modules/module2/module2.ts

import { LessonModule, Level } from "@prisma/client";
import { LessonModuleInsert } from '../../moduleData';
import { LESSON_7_DATA } from "./lessons/lesson7";
export const MODULE_2_DATA: LessonModuleInsert = {
    key: "module_2",
    title: "Module 2",
    description: "Daily life",
    image: null,
    isPro: false,
    level: Level.BEGINNER,
    lessons: [LESSON_7_DATA],
};
---
Path: /prisma/data/modules/module2/lessons/lesson7.ts

import { ChatExchangeType, ExerciseType, SectionType } from "@prisma/client";
import { LessonInsert } from "../../../lessonData";
export const LESSON_7_DATA: LessonInsert = {
  key: "lesson_7",
  title: "Lesson 7",
  description: "Kanda Festival.",
  image: null,
  sections: [
    {
      type: SectionType.VOCABULARY,
      background: null,
      character: null,
      exercises: [
        {
          type: ExerciseType.EXPLANATION,
          fullScreen: true,
          explanation: {
            texts: [
              {
                content: "It's time to enjoy Spring at the Kanda festival.",
                image: null,
              },
              {
                content: "Here are the new words for you: a festival, food, a light/lights",
                image: null,
              },
              {
                content: "Let's go!",
                image: null,
              },
            ],
          },
        },
        {
          type: ExerciseType.VOCABULARY_ACQUISITION,
          vocabularyAcquisition: {
            concept: {
              content: "a festival",
              image: "/public/images/lessons/festival.jpg",
            },
          },
        },
        {
          type: ExerciseType.VOCABULARY_ACQUISITION,
          vocabularyAcquisition: {
            concept: {
              content: "food",
              image: "/public/images/lessons/food.riv",
            },
          },
        },
        {
          type: ExerciseType.VOCABULARY_ACQUISITION,
          vocabularyAcquisition: {
            concept: {
              content: "a light/lights",
              image: "/public/images/lessons/lights.riv",
            },
          },
        },
        {
          type: ExerciseType.VOCABULARY_PRACTICE,
          vocabularyPractice: {
            concept: {
              content: "a festival",
              image: "/public/images/lessons/festival.jpg",
            },
            choices: [
              {
                content: "a concert",
                image: null,
              },{
                content: "a meeting",
                image: null,
              },{
                content: "a workshop",
                image: null,
              }
            ]
          },
        },
        {
          type: ExerciseType.VOCABULARY_PRACTICE,
          vocabularyPractice: {
            concept: {
              content: "food",
              image: "/public/images/lessons/food.riv",
            },
            choices: [
              {
                content: "a drink",
                image: null,
              },{
                content: "a chair",
                image: null,
              },{
                content: "a painting",
                image: null,
              }
            ]
          },
        },
        {
          type: ExerciseType.VOCABULARY_PRACTICE,
          vocabularyPractice: {
            concept: {
              content: "a light/lights",
              image: "/public/images/lessons/lights.riv",
            },
            choices: [
              {
                content: "music",
                image: null,
              },{
                content: "water",
                image: null,
              },{
                content: "a book",
                image: null,
              }
            ]
          },
        },
        {
          type: ExerciseType.WORD_REORDERING,
          wordReordering: {
            sentence: "Everyone $w $w $w $w.",
            goodSentence: "Everyone dresses up for the festival.",
            choices: [
              {
                content: "dresses",
                image: null,
              },{
                content: "up",
                image: null,
              },{
                content: "for the",
                image: null,
              },{
                content: "festival",
                image: null,
              }
            ]
          }
        },
        {
          type: ExerciseType.WORD_REORDERING,
          wordReordering: {
            sentence: "There $w $w $w $w.",
            goodSentence: "There is food and many games.",
            choices: [
              {
                content: "is",
                image: null,
              },{
                content: "food",
                image: null,
              },{
                content: "and",
                image: null,
              },{
                content: "many games",
                image: null,
              }
            ]
          }
        },
        {
          type: ExerciseType.WORD_REORDERING,
          wordReordering: {
            sentence: "At $w $w $w $w.",
            goodSentence: "At night the lights are pretty.",
            choices: [
              {
                content: "night",
                image: null,
              },{
                content: "the lights",
                image: null,
              },{
                content: "are",
                image: null,
              },{
                content: "pretty",
                image: null,
              }
            ]
          }
        },
        {
          type: ExerciseType.WORD_COMPLETION,
          wordCompletion: {
            sentence: "I want to see $w Yukatas!",
            concept: {
              content: "their",
              image: null,
            },
            choices: [
              {
                content: "them",
                image: null,
              },{
                content: "its",
                image: null,
              },{
                content: "they",
                image: null,
              },
            ]
          }
        },
        {
          type: ExerciseType.WORD_COMPLETION,
          wordCompletion: {
            sentence: "There are so many $w to do!",
            concept: {
              content: "things",
              image: null,
            },
            choices: [
              {
                content: "beautiful",
                image: null,
              },{
                content: "see",
                image: null,
              },{
                content: "lights",
                image: null,
              },
            ]
          }
        },
        {
          type: ExerciseType.WORD_COMPLETION,
          wordCompletion: {
            sentence: "Yes, let's $w together!",
            concept: {
              content: "dance",
              image: null,
            },
            choices: [
              {
                content: "dancing",
                image: null,
              },{
                content: "dancer",
                image: null,
              },{
                content: "trying",
                image: null,
              },
            ]
          }
        },
        {
          type: ExerciseType.WORD_COMPLETION,
          wordCompletion: {
            sentence: "Girl: Everyone dresses up for the festival.\nBoy: $w",
            concept: {
              content: "I want see their Yukatas!",
              image: null,
            },
            choices: [
              {
                content: "I love this song.",
                image: null,
              },{
                content: "I prefer sushi.",
                image: null,
              },{
                content: "You're OK.",
                image: null,
              },
            ]
          }
        },
        {
          type: ExerciseType.WORD_COMPLETION,
          wordCompletion: {
            sentence: "Boy: We can dance with the music.\nGirl: $w",
            concept: {
              content: "Yes, let's dance together!",
              image: null,
            },
            choices: [
              {
                content: "Is that your bag?",
                image: null,
              },{
                content: "Do you work here?",
                image: null,
              },{
                content: "It has five colors.",
                image: null,
              },
            ]
          }
        },
      ],
    },
    {
      type: SectionType.LISTENING,
      background: null,
      character: null,
      exercises: [
        {
          type: ExerciseType.LISTENING,
          listening: {
            audio: "/public/audio/static/139.mp3",
            image: "/public/images/lessons/139.jpg",
            displayWords: false,
            concept: {
              content: "Yours looks great too!",
              image: null,
            },
            choices: [
              {
                content: "Yours looks great too!",
                image: null,
              },
              {
                content: "I don't want to play this game.",
                image: null,
              },{
                content: "I am in front of the station.",
                image: null,
              },
            ]
          }
        },
        {
          type: ExerciseType.LISTENING,
          listening: {
            audio: "/public/audio/static/140.mp3",
            image: "/public/images/lessons/140.jpg",
            displayWords: false,
            concept: {
              content: "There are so many things to try!",
              image: null,
            },
            choices: [
              {
                content: "There are so many things to try!",
                image: null,
              },
              {
                content: "Yes, I am.",
                image: null,
              },{
                content: "Yes I can dance.",
                image: null,
              },
            ]
          }
        },          
        {
          type: ExerciseType.LISTENING,
          listening: {
            audio: "/public/audio/static/141.mp3",
            image: null,
            displayWords: true,
            concept: {
              content: "To dance.",
              image: null,
            },
            choices: [
              {
                content: "To eat an apple.",
                image: null,
              },
              {
                content: "To dance.",
                image: null,
              },
              {
                content: "To dress up.",
                image: null,
              },
              {
                content: "To jump.",
                image: null,
              },
            ]
          }
        },          
        {
          type: ExerciseType.LISTENING,
          listening: {
            audio: "/public/audio/static/142.mp3",
            image: null,
            displayWords: true,
            concept: {
              content: "The lights.",
              image: null,
            },
            choices: [
              {
                content: "The houses.",
                image: null,
              },
              {
                content: "The river.",
                image: null,
              },
              {
                content: "The temples.",
                image: null,
              },
              {
                content: "The lights.",
                image: null,
              },
            ]
          }
        },          
      ]
    },
    {
      type: SectionType.SCRIPTED_CONVERSATION,
      background: '/public/images/backgrounds/kanda.riv',
      character: 'self',
      exercises: [
        {
          type: ExerciseType.SCRIPTED_CONVERSATION,
          scriptedConversation: {
            conversation: [
              {
                type: ChatExchangeType.ASSISTANT,
                emotion: "happy",
                concept: {
                  content: "Everyone dresses up for the festival.",
                  image: null,
                },
                choices: [],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.INPUT,
                emotion: null,
                concept: {
                  content: "I want to see their Yukatas!",
                  image: null,
                },
                choices: [
                  {
                    content: "Oh, you like my food?",
                    image: null,
                  },
                  {
                    content: "You dance better than me.",
                    image: null,
                  },
                ],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.ASSISTANT,
                emotion: "happy",
                concept: {
                  content: "There is also food, games, and we can play.",
                  image: null,
                },
                choices: [],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.INPUT,
                emotion: null,
                concept: {
                  content: "So many things to do!",
                  image: null,
                },
                choices: [
                  {
                    content: "I can try it.",
                    image: null,
                  },
                  {
                    content: "These shoes are expensive.",
                    image: null,
                  },
                ],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.ASSISTANT,
                emotion: "happy",
                concept: {
                  content: "We can try to dance with the music.",
                  image: null,
                },
                choices: [],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.INPUT,
                emotion: null,
                concept: {
                  content: "Yes, let's dance together!",
                  image: null,
                },
                choices: [
                  {
                    content: "What kind of food is it?",
                    image: null,
                  },
                  {
                    content: "Yes, let's eat together.",
                    image: null,
                  },
                ],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.ASSISTANT,
                emotion: "happy",
                concept: {
                  content: "At night, you can also see beautiful lights.",
                  image: null,
                },
                choices: [],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
              {
                type: ChatExchangeType.INPUT,
                emotion: null,
                concept: {
                  content: "I really want to see them!",
                  image: null,
                },
                choices: [
                  {
                    content: "I want to try it!",
                    image: null,
                  },
                  {
                    content: "This is very good.",
                    image: null,
                  },
                ],
                onBadAnswer: null,
                onGoodAnswer: null,
              },
            ]
          },
        },
      ]
    },
  ],
};
---
Path: /prisma/helpers/character.ts

import { PrismaClient } from "@prisma/client";
export type CharacterData = {
  key: string;
  prompt: string;
  gender: "FEMALE" | "MALE";
  name: string;
  voiceId: string;
  image: string | null;
};
export async function insertCharacter(
  prisma: PrismaClient,
  characterData: CharacterData
) {
  console.log(`Inserting character (${characterData.key})`);
  const character = await prisma.character.create({
    data: characterData,
  });
  return character;
}
---
Path: /prisma/helpers/concepts.ts

import { Concept, PrismaClient } from "@prisma/client";
import { ConceptInsert } from "../data/lessonData";
import { translationsData } from "../data/translationData";
export const createConcepts = async (
  prisma: PrismaClient,
  concepts: ConceptInsert[]
): Promise<Concept[]> => {
  var results: Concept[] = [];
  for (const concept of concepts) {
    const createdConcept = await createConcept(prisma, concept);
    if (createdConcept) {
      results.push(createdConcept);
    }
  }
  return results;
};
export const createConcept = async (
  prisma: PrismaClient,
  concept: ConceptInsert
): Promise<Concept> => {
  const translation = translationsData.find((translation) => {
    if (translation.key === concept.content) {
      return translation;
    }
  });
  if (!translation) {
    console.warn(`No translation found for concept ${concept.content}`);
  }
  const existingConcept = await prisma.concept.findFirst({
    where: {
      content: concept.content,
      image: concept.image,
    },
  });
  if (existingConcept) {
    return existingConcept;
  }
  console.log(`Inserting concept (${concept.content})`);
  const createdConcept = await prisma.concept.create({
    data: {
      content: concept.content,
      image: concept.image,
    },
  });
  return createdConcept;
};
---
Path: /prisma/helpers/db.ts

import { PrismaClient } from "@prisma/client";
export async function clearDatabase(prisma: PrismaClient) {
  console.log("*** Clearing database ***");
  await prisma.choiceOnListening.deleteMany({});
  await prisma.conceptOnExplanation.deleteMany({});
  await prisma.vocabularyAcquisition.deleteMany({});
  await prisma.vocabularyPractice.deleteMany({});
  await prisma.wordReordering.deleteMany({});
  await prisma.wordCompletion.deleteMany({});
  await prisma.reading.deleteMany({});
  await prisma.listening.deleteMany({});
  await prisma.chatExchange.deleteMany({});
  await prisma.scriptedConversation.deleteMany({});
  await prisma.explanation.deleteMany({});
  await prisma.exercise.deleteMany({});
  await prisma.section.deleteMany({});
  console.log("Clearing lessons");
  await prisma.lesson.deleteMany({});
  console.log("Clearing lesson practices");
  console.log("Clearing modules");
  await prisma.lessonModule.deleteMany({});
  console.log("Clearing concepts");
  await prisma.concept.deleteMany({});
  console.log("Clearing characters");
  await prisma.character.deleteMany({});
  console.log("Clearing translations");
  await prisma.translation.deleteMany({});
  console.log("*** Cleared database ***");
}
---
Path: /prisma/helpers/exercises.ts

import { PrismaClient, Section, Exercise, VocabularyAcquisition, WordReordering, Reading, WordCompletion, Listening, ScriptedConversation, ChatExchange, Explanation, Concept, ConceptOnExplanation } from "@prisma/client";
import { prisma } from "../../src/prisma/client";
import { ChatExchangeInsert, ConceptInsert, ExerciseInsert, ExplanationInsert, ListeningInsert, ReadingInsert, ScriptedConversationInsert, VocabularyAcquisitionInsert, VocabularyPracticeInsert, WordCompletionInsert, WordReorderingInsert } from "../data/lessonData";
import { createConcept, createConcepts } from "./concepts";
const createVocabularyAcquisition = async (
  prisma: PrismaClient,
  exercise: Exercise,
  vocabularyAcquisition: VocabularyAcquisitionInsert,
): Promise<VocabularyAcquisition> => {
  console.log("Creating vocabulary acquisition");
  const concept = await createConcept(prisma, vocabularyAcquisition.concept);
  const createdVocabularyAcquisition = await prisma.vocabularyAcquisition.create({
    data: {
      concept: {
        connect: {
          id: concept.id,
        },
      },
      exercise: {
        connect: {
          id: exercise.id,
        },
      },
    },
  });
  return createdVocabularyAcquisition;
};
const createVocabularyPractice = async (
  prisma: PrismaClient,
  exercise: Exercise,
  vocabularyPractice: VocabularyPracticeInsert,
): Promise<VocabularyAcquisition> => {
  console.log("Creating vocabulary practice");
  const concept = await createConcept(prisma, vocabularyPractice.concept);
  const choices = await createConcepts(prisma, vocabularyPractice.choices);
  const createdVocabularyPractice = await prisma.vocabularyPractice.create({
    data: {
      concept: {
        connect: {
          id: concept.id,
        },
      },
      choices: {
        connect: choices.map((choice) => {
          return {
            id: choice.id,
          };
        }),
      },
      exercise: {
        connect: {
          id: exercise.id,
        },
      },
    },
  });
  return createdVocabularyPractice;
};
const createWordReordering = async (
  prisma: PrismaClient,
  exercise: Exercise,
  wordReordering: WordReorderingInsert,
): Promise<WordReordering> => {
  console.log("Creating word reordering");
  const choices = await createConcepts(prisma, wordReordering.choices);
  const createdWordReordering = await prisma.wordReordering.create({
    data: {
      sentence: wordReordering.sentence,
      goodSentence: wordReordering.goodSentence,
      choices: {
        connect: choices.map((choice) => {
          return {
            id: choice.id,
          };
        }),
      },
      exercise: {
        connect: {
          id: exercise.id,
        },
      },
    },
  });
  return createdWordReordering;
};
const createWordCompletion = async (
  prisma: PrismaClient,
  exercise: Exercise,
  wordCompletion: WordCompletionInsert,
): Promise<WordCompletion> => {
  console.log("Creating word completion");
  const concept = await createConcept(prisma, wordCompletion.concept);
  const choices = await createConcepts(prisma, wordCompletion.choices);
  const createdVocabularyPractice = await prisma.wordCompletion.create({
    data: {
      sentence: wordCompletion.sentence,
      concept: {
        connect: {
          id: concept.id,
        },
      },
      choices: {
        connect: choices.map((choice) => {
          return {
            id: choice.id,
          };
        }),
      },
      exercise: {
        connect: {
          id: exercise.id,
        },
      },
    },
  });
  return createdVocabularyPractice;
};
const createReading = async (
  prisma: PrismaClient,
  exercise: Exercise,
  reading: ReadingInsert,
): Promise<Reading> => {
  console.log("Creating reading");
  const concept = await createConcept(prisma, reading.concept);
  const choices = await createConcepts(prisma, reading.choices);
  const createdReading = await prisma.reading.create({
    data: {
      text: reading.text,
      concept: {
        connect: {
          id: concept.id,
        },
      },
      choices: {
        connect: choices.map((choice) => {
          return {
            id: choice.id,
          };
        }),
      },
      exercise: {
        connect: {
          id: exercise.id,
        },
      },
    },
  });
  return createdReading;
};
const createListening = async (
  prisma: PrismaClient,
  exercise: Exercise,
  listening: ListeningInsert,
): Promise<Listening> => {
  console.log("Creating listening");
  const concept = await createConcept(prisma, listening.concept);
  const choices = await createConcepts(prisma, listening.choices);
  const createdListening = await prisma.listening.create({
    data: {
      audio: listening.audio,
      image: listening.image,
      displayWords: listening.displayWords,
      concept: {
        connect: {
          id: concept.id,
        },
      },
      choices: {
        create: choices.map((choice, idx) => {
          return {
            order: idx,
            concept: {
              connect: {
                id: choice.id,
              },
            },
          }
        }),
      },
      exercise: {
        connect: {
          id: exercise.id,
        },
      },
    },
  });
  return createdListening;
};
const createScriptedConversation = async (
  prisma: PrismaClient,
  exercise: Exercise,
  scriptedConversation: ScriptedConversationInsert,
): Promise<ScriptedConversation> => {
  console.log("Creating scripted conversation");
  const createdScriptedConversation = await prisma.scriptedConversation.create({
    data: {
      exercise: {
        connect: {
          id: exercise.id,
        },
      },
    }
  });
  var i: number = 0;
  for (const chatExchange of scriptedConversation.conversation) {
    await createChatExchange(prisma, createdScriptedConversation, chatExchange, i);
    ++i;
  }
  return createdScriptedConversation;
};
const createChatExchange = async (
  prisma: PrismaClient,
  scriptedConversation: ScriptedConversation,
  chatExchange: ChatExchangeInsert,
  order: number = 0,
): Promise<ChatExchange> => {
  console.log("Creating chat exchange");
  const concept = await createConcept(prisma, chatExchange.concept);
  const choices = await createConcepts(prisma, chatExchange.choices);
  const createdChatExchange = await prisma.chatExchange.create({
    data: {
      order: order,
      emotion: chatExchange.emotion,
      type: chatExchange.type,
      concept: {
        connect: {
          id: concept.id,
        },
      },
      choices: {
        connect: choices.map((choice) => {
          return {
            id: choice.id,
          };
        }),
      },
      scriptedConversation: {
        connect: {
          id: scriptedConversation.id,
        },
      },
    },
  });
  return createdChatExchange;
}
const createExplanation = async (
  prisma: PrismaClient,
  exercise: Exercise,
  explanation: ExplanationInsert,
): Promise<Explanation> => {
  console.log("Creating Explanation");
  const createdExplanation = await prisma.explanation.create({
    data: {
      exercise: {
        connect: {
          id: exercise.id,
        },
      },
    }
  });
  var i: number = 0;
  for (const text of explanation.texts) {
    await createConceptOnExplanation(prisma, createdExplanation, text, i);
    ++i;
  }
  return createdExplanation;
};
const createConceptOnExplanation = async (
  prisma: PrismaClient,
  explanation: Explanation,
  text: ConceptInsert,
  order: number = 0,
): Promise<ConceptOnExplanation> => {
  console.log("Creating Concept on explanation");
  const concept = await createConcept(prisma, text);
  const createdConceptOnExplanation = await prisma.conceptOnExplanation.create({
    data: {
      order: order,
      concept: {
        connect: {
          id: concept.id,
        },
      },
      explanation: {
        connect: {
          id: explanation.id,
        },
      },
    },
  });
  return createdConceptOnExplanation;
}
export const createExercises = async (
  prisma: PrismaClient,
  section: Section,
  exercises: ExerciseInsert[],
) => {
  var i: number = 0;
  for (const exercise of exercises) {
    await createExercise(prisma, section, exercise, i);
    ++i;
  }
}
export const createExercise = async (
  prisma: PrismaClient,
  section: Section,
  exercise: ExerciseInsert,
  order: number = 0
) => {
  const createdExercise = await prisma.exercise.create({
    data: {
      fullScreen: exercise.fullScreen,
      order: order,
      section: {
        connect: {
          id: section.id,
        },
      },
      type: exercise.type,
    },
  });
  if (exercise.type === "VOCABULARY_ACQUISITION") {
    await createVocabularyAcquisition(prisma, createdExercise, exercise.vocabularyAcquisition);
  } else if (exercise.type === "VOCABULARY_PRACTICE") {
    await createVocabularyPractice(prisma, createdExercise, exercise.vocabularyPractice);
  } else if (exercise.type === "WORD_REORDERING") {
    await createWordReordering(prisma, createdExercise, exercise.wordReordering);
  } else if (exercise.type === "WORD_COMPLETION") {
    await createWordCompletion(prisma, createdExercise, exercise.wordCompletion);
  } else if (exercise.type === "READING") {
    await createReading(prisma, createdExercise, exercise.reading);
  } else if (exercise.type === "LISTENING") {
    await createListening(prisma, createdExercise, exercise.listening);
  } else if (exercise.type === "SCRIPTED_CONVERSATION") {
    await createScriptedConversation(prisma, createdExercise, exercise.scriptedConversation);
  } else if (exercise.type === "EXPLANATION") {
    await createExplanation(prisma, createdExercise, exercise.explanation);
  }
  return createdExercise;
}
---
Path: /prisma/helpers/lessons.ts

import { Lesson, PrismaClient } from "@prisma/client";
import { LessonInsert } from "../data/lessonData";
import { createSections } from "./sections";
export const createLessons = async (
  prisma: PrismaClient,
  lessons: LessonInsert[]
): Promise<Lesson[]> => {
  var results: Lesson[] = [];
  var i: number = 0;
  for (const lesson of lessons) {
    const createdLesson = await createLesson(prisma, lesson, i);
    if (createdLesson) {
      results.push(createdLesson);
    }
    i++;
  }
  return results;
};
export const createLesson = async (
  prisma: PrismaClient,
  lesson: LessonInsert,
  order: number = 0
): Promise<Lesson | null> => {
  console.log(`Inserting lesson (${lesson.key})`);
  const createdLesson = await prisma.lesson.create({
    data: {
      key: lesson.key,
      title: lesson.title,
      description: lesson.description,
      image: lesson.image,
      order: order,
    },
  });
  if (createdLesson) {
    await createSections(prisma, createdLesson, lesson.sections);
    return createdLesson;
  }
  return null;
};
---
Path: /prisma/helpers/modules.ts

import { PrismaClient, Character, Gender } from "@prisma/client";
import { insertCharacter } from "./character";
import { MODULES_DATA } from "../data/moduleData";
import { createLessons } from "./lessons";
export const generateModules = async (prisma: PrismaClient) => {
  console.log("*** Inserting modules ***");
  const character = await insertCharacter(prisma, {
    key: "sophie",
    prompt: "You're Sophie, 24F human.",
    gender: Gender.FEMALE,
    name: "sophie",
    voiceId: "EXAVITQu4vr4xnSDxMaL",
    image: null,
  });
  var order: number = 0;
  for (const moduleData of MODULES_DATA) {
    console.log(`Inserting module (${moduleData.key})`);
    const lessons = await createLessons(prisma, moduleData.lessons);
    await prisma.lessonModule.create({
      data: {
        key: moduleData.key,
        title: moduleData.title,
        description: moduleData.description,
        image: moduleData.image,
        level: moduleData.level,
        order: order++,
        isPro: moduleData.isPro,
        lessons: {
          connect: lessons.map((lesson) => {
            console.log(
              `Connecting lesson (${lesson.key}) to module (${moduleData.key})`
            );
            return {
              id: lesson.id,
            };
          }),
        },
      },
    });
  }
  console.log(`*** Inserting module done ***`);
};
---
Path: /prisma/helpers/sections.ts

import { PrismaClient, Lesson, Section } from "@prisma/client";
import { createConcept, createConcepts } from "./concepts";
import { SectionInsert } from "../data/lessonData";
import { createExercise, createExercises } from "./exercises";
export const createSections = async (
  prisma: PrismaClient,
  lesson: Lesson,
  sections: SectionInsert[]
): Promise<Section[]> => {
  var results: Section[] = [];
  var i: number = 0;
  for (const section of sections) {
    const createdSection = await createSection(prisma, lesson, section, i);
    if (createdSection) {
      results.push(createdSection);
    }
    i++;
  }
  return results;
};
const createSection = async (
  prisma: PrismaClient,
  lesson: Lesson,
  section: SectionInsert,
  order: number = 0
): Promise<Section> => {
  const createdSection = await prisma.section.create({
    data: {
      order: order,
      background: section.background,
      character: section.character,
      lesson: {
        connect: {
          id: lesson.id,
        }
      },
      type: section.type,
    },
  });
  createExercises(prisma, createdSection, section.exercises);
  return createdSection;
};
---
Path: /prisma/helpers/translation.ts

import { PrismaClient } from "@prisma/client";
import { translationsData } from "../data/translationData";
export async function generateTranslations(prisma: PrismaClient) {
  console.log(`*** Inserting translations (${translationsData.length}) ***`);
  const translations = await prisma.translation.createMany({
    data: translationsData,
    skipDuplicates: true,
  });
  console.log(`*** Inserted translations (${translations.count}) ***`);
}
---
Path: /src/index.ts

import dotenv from "dotenv";
import express, { Express } from "express";
import { apiErrorHandler } from "./error/api-error-handler";
import uiRouter from "./routes/ui";
import chatRouter from "./routes/chat";
import contentRouter from "./routes/content";
import modulesRouter from "./routes/modules";
import bodyParser from "body-parser";
import cors from "cors";
dotenv.config();
const app: Express = express();
const port = process.env.PORT;
app.use(express.json());
app.use(bodyParser.urlencoded({ limit: "50mb", extended: true }));
app.use(cors({ origin: "*" }));
app.use("/public", express.static("public"));
app.use("/ui", uiRouter);
app.use("/chat", chatRouter);
app.use("/content", contentRouter);
app.use("/modules", modulesRouter);
app.use(apiErrorHandler);
app.listen(port, async () => {
  console.log(`⚡️[server]: Server is running on port: ${port}`);
});
---
Path: /src/chat/configuration.ts

import dotenv from "dotenv";
import { Configuration, OpenAIApi } from "openai";
dotenv.config();
const api_key = process.env.API_KEY;
if (api_key === undefined) {
  throw new Error("API_KEY is not defined");
}
const configuration = new Configuration({
  apiKey: api_key,
});
export const openai = new OpenAIApi(configuration);
export const predictionUrl = process.env.INTENT_PREDICTION_URL;
export const predictionKey = process.env.INTENT_PREDICTION_KEY;
---
Path: /src/chat/get-chat-emotion.ts

import { ChatCompletionRequestMessage } from "openai";
import { openai } from "./configuration";
export async function getChatEmotion(
  systemPrompt: string,
  dialogue: ChatCompletionRequestMessage[],
  nLast: number = 2
) {
  const lastDialogues = dialogue.slice(-nLast);
  const prompt = `"${lastDialogues.map(d => d.content).join("\n")}"\n\nWhat is the emotion of the last sentence? only answer these words: Amusing, Sad, Enjoy, Neutral:\n`;
  const reply = await openai.createCompletion({
    model: 'text-davinci-003',
    prompt: prompt,
    max_tokens: 10,
    n: 1,
    stop: null,
    temperature: 1,
  });
    return reply.data.choices[0];
}
---
Path: /src/chat/get-chat.ts

import {
  ChatCompletionRequestMessage,
  ChatCompletionResponseMessage,
} from "openai";
import { openai } from "./configuration";
export async function getChat(
  systemPrompt: string,
  dialogue: ChatCompletionRequestMessage[]
): Promise<{
  concept: { content: string | undefined };
  type: string;
  role: string;
}> {
  const model = "gpt-4-0613";
  console.log(`using model ${model} with prompt ${systemPrompt}`);
  const reply = await openai.createChatCompletion({
    model: model,
    messages: [
      {
        role: "system",
        content: systemPrompt,
      },
      ...dialogue,
    ],
    temperature: 0.7,
  });
  return {
    concept: { content: reply.data.choices[0].message?.content },
    type: "message",
    role: "assistant",
  };
}
---
Path: /src/chat/get-intent.ts

import { prisma } from "../prisma/client";
import { predictionKey, predictionUrl } from "./configuration";
export async function getIntent(line: string, conversationId: string) {
  if (predictionKey === undefined) {
    throw new Error("The prediction key is not defined");
  }
  const headers = {
    "Ocp-Apim-Subscription-Key": predictionKey,
    "Apim-Request-Id": predictionKey,
    "Content-Type": "application/json",
  };
  const body = {
    kind: "Conversation",
    analysisInput: {
      conversationItem: {
        text: line,
        id: "1",
        modality: "text",
        language: "en-us",
        participantId: "1",
      },
    },
    parameters: {
      projectName: "odyssey-test",
      deploymentName: "v1.6",
      verbose: true,
      stringIndexType: "TextElement_V8",
    },
  };
  if (predictionUrl === undefined) {
    throw new Error("The prediction url is not defined");
  }
  const response = await fetch(predictionUrl, {
    method: "POST",
    headers: headers,
    body: JSON.stringify(body),
  }).then((res) => res.json());
  const prediction = response.result.prediction;
  const conversationObjectives = null;
  if (conversationObjectives === null) {
    return null;
  }
  const completedObjectives: { id: string }[] = [];
  return completedObjectives;
}
---
Path: /src/chat/get-language-error.ts

import { parseAlphanumeric } from "../utils/parse-alphanumeric";
import { openai } from "./configuration";
export async function getLanguageErr(
  line: string | undefined,
  learningLanguage: string
) {
  if (!line) return null;
  const response = await openai.createCompletion({
    model: "text-davinci-003",
    prompt: `Correct this to standard ${learningLanguage}:\n${line}\n\n Correction: `,
    temperature: 0,
    max_tokens: 60,
    top_p: 1.0,
    frequency_penalty: 0.0,
    presence_penalty: 0.0,
  });
  const correction = response.data.choices[0].text?.trim();
  if (!correction) return null;
  const parsedCorrection = parseAlphanumeric(correction);
  const parsedLine = parseAlphanumeric(line).trim();
  return parsedLine.toLowerCase() === parsedCorrection.toLowerCase()
    ? null
    : correction;
}
---
Path: /src/chat/get-lesson-summary.ts

import { ChatCompletionRequestMessage } from "openai";
import { openai } from "./configuration";
const basePromp = `In the text, list conjugation, vocabulary, grammar mistakes & corrections. Follow this pattern and place "N/A" if there is no mistake or correction.":
Conjugation: 
mistake -> corrected (original sentence)
Grammar:
mistake -> corrected part (original sentence)
Vocabulary:
mistake -> corrected part (original sentence)
`;
type CorrectionError = {
  error: string;
  correction: string;
  context: string;
};
type CorrectionTheme = {
  title: string;
  errors: CorrectionError[];
};
type CorrectionData = CorrectionTheme[];
function parseContent(text: string): CorrectionData {
  const themes = ['Conjugation', 'Grammar', 'Vocabulary'];
  const themeData: CorrectionData = [];
  for (const theme of themes) {
    const themeRegex = new RegExp(`${theme}:\\s*((?:.|\\s)*?)(?=(?:\\n{2})|$)`, 'g');
    const correctionRegex = /(.*) -> (.*) \((.*)\)/;
    const themeMatch = themeRegex.exec(text);
    const correctionTheme: CorrectionTheme = {
      title: theme,
      errors: [],
    }
    if (themeMatch && themeMatch[1] && themeMatch[1].trim() !== 'N/A') {
      const sentences = themeMatch[1].split('\n').filter(sentence => sentence.trim() !== '' && sentence.trim() !== 'N/A');
      sentences.forEach(sentence => {
        const correctionMatch = sentence.match(correctionRegex);
        if (correctionMatch && correctionMatch[1] && correctionMatch[2] && correctionMatch[3]) {
          correctionTheme.errors.push({
            error: correctionMatch[1],
            correction: correctionMatch[2],
            context: correctionMatch[3],
          });
        }
      });
    }
    themeData.push(correctionTheme);
  }
  return themeData;
}
export async function getLessonSummary(
  dialogue: ChatCompletionRequestMessage[]
): Promise<CorrectionData | null> {
  const reply = await openai.createChatCompletion({
    model: "gpt-4",
    messages: [
      {
        role: "user",
        content: basePromp + dialogue.map((d) => d.content).join("\n"),
      },
    ],
    temperature: 0.7,
  });
  const message = reply.data.choices[0].message?.content;
  if (!message) {
    return null;
  }
  return parseContent(message);
}
---
Path: /src/chat/get-moderation.ts

import { openai } from "./configuration";
export async function getModeration(parsedLine: string) {
  const moderation = await openai.createCompletion({
    model: "content-filter-alpha",
    prompt: "<|endoftext|>" + parsedLine + "\n--\nLabel:",
    temperature: 0,
    max_tokens: 1,
    top_p: 0,
    logprobs: 10,
  });
  return moderation.data.choices[0].text === "2" ? true : false;
}
---
Path: /src/chat/get-translation.ts

import { openai } from "./configuration";
const languageMap: { [key: string]: string } = {
  en: "English",
  es: "Spanish",
  fr: "French",
  ja: "Japanese",
};
export async function getTranslation(
  text: string,
  toLanguageCode: string
): Promise<string | undefined> {
  if (!Object.keys(languageMap).includes(toLanguageCode)) {
    return undefined;
  }
  const language = languageMap[toLanguageCode];
  const prompt = `Translate this text to ${language}: \n${text}\n\nTranslation:`;
  const reply = await openai.createCompletion({
    model: "text-davinci-003",
    prompt: prompt,
    n: 1,
    stop: null,
    temperature: 1,
    max_tokens: 512,
  });
  var result = reply.data.choices[0].text;
  console.log(result);
  if (result) {
    return result.replace("\n", "").trim();
  }
  return result;
}
---
Path: /src/email/send-email.ts

import sgMail from "@sendgrid/mail";
export function sendEmail(
  to: string,
  from: string,
  subject: string,
  html: string
) {
  sgMail.setApiKey(process.env.SENDGRID_API_KEY!);
  const msg = {
    to,
    from,
    subject,
    html,
  };
  return sgMail.send(msg);
}
---
Path: /src/email/templates/account-creation.ts

export function accountCreation(email: string, password: string) {
  return `<p>An Odyssey account with your email address has been created, please login with the following credentials:<br>
Email: ${email}<br>
Password: ${password}<br>
Remember to change your password to secure your account!<br>
Best wishes,<br>
Odyssey Team</p>`;
}
---
Path: /src/error/api-error-handler.ts

import { NextFunction, Request, Response } from "express";
import ApiError from "./api-error";
export function apiErrorHandler(
  err: any,
  req: Request,
  res: Response,
  next: NextFunction
) {
  if (err instanceof ApiError) {
    return res.status(err.code).json(err.message);
  }
  res.status(500).json("Internal Server Error");
}
---
Path: /src/error/api-error.ts

export default class ApiError {
  message: string;
  code: number;
  constructor(message: string, code: number) {
    this.message = message;
    this.code = code;
  }
  static badRequest(message: string) {
    return new ApiError(message, 400);
  }
  static internalError(message: string) {
    return new ApiError(message, 500);
  }
  static notFound(message: string) {
    return new ApiError(message, 404);
  }
  static notImplemented(message: string) {
    return new ApiError(message, 501);
  }
  static forbidden(message: string) {
    return new ApiError(message, 403);
  }
  static unauthorized(message: string) {
    return new ApiError(message, 401);
  }
}
---
Path: /src/firebase/config.ts

import admin from "firebase-admin";
import { initializeApp } from "firebase-admin/app";
import { getAuth } from "firebase-admin/auth";
import serviceAccount from "./credentials/admin-sdk.json";
const app = initializeApp({
  credential: admin.credential.cert(serviceAccount as admin.ServiceAccount),
});
export const auth = getAuth(app);
---
Path: /src/firebase/get-user-from-token.ts

import { prisma } from "../prisma/client";
import { auth } from "./config";
export async function getUserFromToken(token: string) {
  return null;
}
---
Path: /src/firebase/credentials/admin-sdk.json

{
  "type": "service_account",
  "project_id": "odysseyai",
  "private_key_id": "69d3456fc800b47f1266ea048badb1ebacdce885",
  "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCqMDQFEW/EfwKA\nMoAuUnAmnUJ9E2a+rOXaG8FjvX+F8A+cLUE5DznN5pWZPD9lEkkVFCV/JgLY80G8\nzrVCl7I82OyPlQMtj9BFUy4DkS78FMan/OWzEeITKLiI50rSDR7sae/mOqkYnsFT\nBBVlVMvW/N6unh04T95/wovSe4kcNRwZ55c1j3CrEoFKI/ARU9CsHnwRquB92KdI\nTaXUToyCoYzqm9CrmWYH0WxM5x88kpCDX1TC9UvFOpX5QOr3PAoYUKcAqCciInqE\nF4gvfhbh20G7BzBngZSErTHfdG71dx04daqV9cJ7Xv/toZqeSpuWu3xRRfBTizcY\nsWDAcnybAgMBAAECggEAH6bEXfbutvg6IlaCEVtioUPZFELx9l9YhjZoQqEBIQtT\nE+Q0v6RtxzXtt6iFT8pVTjbHfHy4xdmD7dXxzxdAXmGnqVJ421XmUaZVJfOv7dD9\nW0vE+odGaPLHUyrU9vjaufQ/2i0purr30HUvd3+MQ4kW7xnX7FuqUU+Ayp4QE28d\njXRw3FeU+8tjDFQe4c/McO1naJpyz4H4H/PqQ4dRLgwoq83eBM3GOrNuba6Wr2iB\nektfFjZNYIBFAHkM8GgzWpHKLKQVdyIy0Ux+sh7NJ1tAsUh237BZIYT2/xCarU9v\nWAN7j
  "client_email": "firebase-adminsdk-ls0v7@odysseyai.iam.gserviceaccount.com",
  "client_id": "112152762196912376447",
  "auth_uri": "https:
  "token_uri": "https:
  "auth_provider_x509_cert_url": "https:
  "client_x509_cert_url": "https:
}
---
Path: /src/middleware/auth-middleware.ts

import type { NextFunction, Request, Response } from "express";
import ApiError from "../error/api-error";
import { getUserFromToken } from "../firebase/get-user-from-token";
export async function authMiddleware(
  req: Request,
  res: Response,
  next: NextFunction
) {
  const token = req.headers.authorization?.split(" ")[1];
  if (!token) {
    return next(ApiError.unauthorized("No token provided"));
  }
  try {
    const user = await getUserFromToken(token);
    if (!user) {
      return next(ApiError.unauthorized("Invalid token"));
    }
    res.locals.user = user;
    return next();
  } catch (e) {
    return next(ApiError.unauthorized("Invalid token"));
  }
}
export async function nonBlockingAuthMiddleware(
  req: Request,
  res: Response,
  next: NextFunction
) {
  const token = req.headers.authorization?.split(" ")[1];
  if (!token) {
    return next();
  }
  try {
    const user = await getUserFromToken(token);
    res.locals.user = user;
    return next();
  } catch (e) {
    return next();
  }
}
---
Path: /src/prisma/client.ts

import { PrismaClient } from "@prisma/client";
import dotenv from "dotenv";
dotenv.config();
const globalForPrisma = globalThis as unknown as { prisma: PrismaClient };
export const prisma =
  globalForPrisma.prisma ||
  new PrismaClient({
    log:
      process.env.NODE_ENV === "development"
        ? ["query", "error", "warn"]
        : ["error"],
  });
if (process.env.NODE_ENV !== "production") globalForPrisma.prisma = prisma;
---
Path: /src/prisma/repopulate.ts

---
Path: /src/routes/chat.ts

import { Gender, PrismaClient } from "@prisma/client";
import express, { NextFunction, Request, Response } from "express";
import ISO6391 from "iso-639-1";
import { fromZodError } from "zod-validation-error";
import { getChat } from "../chat/get-chat";
import { getIntent } from "../chat/get-intent";
import { getLanguageErr } from "../chat/get-language-error";
import { getModeration } from "../chat/get-moderation";
import ApiError from "../error/api-error";
import { prisma } from "../prisma/client";
import { getTranslations, translate } from "../utils/find-translation";
import { validateRequest } from "../zod/validation";
import { getChatEmotion } from "../chat/get-chat-emotion";
import { chatSchema } from "../zod/schemas";
const router = express.Router();
router.post("/", async (req: Request, res: Response, next: NextFunction) => {
  console.log("req", req.body);
  const request = validateRequest(req, chatSchema);
  if (request.success && request.data) {
    const learningLanguage = ISO6391.getName(
      request.data.headers["learning-language"]
    );
    const conversationId = request.data.body.conversationId;
    var transaction = await prisma.$transaction(
      async (
        tx: Omit<
          PrismaClient,
          | "$connect"
          | "$disconnect"
          | "$on"
          | "$transaction"
          | "$use"
          | "$extends"
        >
      ): Promise<
        | {
            prompt: string;
          }
        | undefined
      > => {
        const conversation = null;
        if (!conversation) {
          return;
        }
        return {
          prompt: "conversation.prompt",
        };
      }
    );
    if (!transaction) {
      next(
        ApiError.notFound(
          `CharacterInfo with id ${request.data.body.characterInfoId} not found`
        )
      );
      return;
    }
    const prompt = transaction.prompt;
    const systemPrompt = `The conversation will be held strictly in ${learningLanguage}. ${prompt}`;
    const rawDialog = request.data.body.dialogue.map(
      (d) => d.concept.content
    ) as string[];
    console.log("systemPrompt", systemPrompt);
    const lastChat = rawDialog[rawDialog.length - 1];
    console.log(request.data.body.dialogue);
    console.log(lastChat);
    const openAIDialogue = request.data.body.dialogue.map((d) => {
      return {
        role: d.role,
        content: d.concept.content,
      };
    });
    const [reply, emotion , languageError ] =
      await Promise.allSettled([
        getChat(systemPrompt, openAIDialogue),
        getChatEmotion(systemPrompt, openAIDialogue, 2),
        getLanguageErr(lastChat, learningLanguage),
      ]);
    console.log(emotion);
    if (
      reply.status === "fulfilled" &&
      emotion.status === "fulfilled" &&
      languageError.status === "fulfilled" &&
      reply.value
    ) {
      console.log(reply);
      var replies = [reply.value];
      if (languageError.value) {
        replies = [
          {
            type: "error",
            concept: { content: languageError.value },
            role: "user",
          },
          ...replies,
        ];
      }
      const data = {
        replies: replies,
        emotion: emotion?.value.text,
      };
      console.log("data", data);
      res.status(200).json(data);
      return;
    } else if (reply.status === "rejected") {
      console.log("reply", reply);
      next(ApiError.internalError("REPLY: " + reply.reason.message));
      return;
    } else if (emotion.status === "rejected") {
      console.log("emotion", emotion);
      next(ApiError.internalError("REPLY: " + emotion.reason.message));
      return;
    }  else if (languageError.status === "rejected") {
      console.log("langerr", languageError);
      next(ApiError.internalError("LANGUAGE: " + languageError.reason.message));
      return;
    } 
  } else if (request.error) {
    console.log("req", request.error);
    next(ApiError.badRequest(fromZodError(request.error).message));
    return;
  }
  next({});
});
export default router;
---
Path: /src/routes/content.ts

import express from "express";
import { fromZodError } from "zod-validation-error";
import ApiError from "../error/api-error";
import {
  authMiddleware,
  nonBlockingAuthMiddleware,
} from "../middleware/auth-middleware";
import { prisma } from "../prisma/client";
import { textToSpeech } from "../text-to-speech/text-to-speech";
import { getTranslations, translate } from "../utils/find-translation";
import { validateRequest } from "../zod/validation";
import { translateSchema, ttsSchema } from "../zod/schemas";
import { getTranslation } from "../chat/get-translation";
const router = express.Router();
router.get("/tts", async (req, res, next) => {
  const request = validateRequest(req, ttsSchema);
  console.log("TTS: ", request);
  if (request.error) {
    next(ApiError.badRequest(fromZodError(request.error).message));
    return;
  } else if (!request.success || !request.data) {
    next(ApiError.badRequest("Something went wrong"));
    return;
  }
  const voiceId: string | null | undefined = "YEjkdkuZvyPxC1nDDzfI";
  try {
    const audio = await textToSpeech(
      request.data.query.text,
      request.data.headers["learning-language"],
      voiceId!
    );
    return res.status(200).download(audio);
  } catch (error) {
    if (error instanceof Error) {
      return next(ApiError.internalError(error.message));
    }
    next(ApiError.internalError("Something went wrong"));
    return;
  }
});
router.get("/translate", async (req, res, next) => {
  const request = validateRequest(req, translateSchema);
  if (request.error) {
    next(ApiError.badRequest(fromZodError(request.error).message));
    return;
  } else if (!request.success || !request.data) {
    next(ApiError.badRequest("Something went wrong"));
    return;
  }
  const translation = await getTranslation(
    request.data.query.text,
    request.data.headers["user-language"]
  );
  res.status(200).json({
    translation,
  });
});
export default router;
---
Path: /src/routes/modules.ts

import express, { NextFunction, Request, Response } from "express";
import ApiError from "../error/api-error";
import { validateRequest } from "../zod/validation";
import { fromZodError } from "zod-validation-error";
import { prisma } from "../prisma/client";
import { headerSchema, headersWithUserLevelSchema } from "../zod/schemas";
import {
  transformLessonModules,
  translateLessonModules,
} from "../utils/convert-prisma-result";
const router = express.Router();
const chatExchangeInc = {
  include: {
    onGoodAnswer: {},
    onBadAnswer: true,
    content: true,
    choices: true,
  },
};
const inc = {
  include: {
    lessons: {
      include: {
        lessonTest: true,
        practice: {
          include: {
            onGoodAnswer: true,
            onBadAnswer: true,
            content: true,
            choices: true,
          },
        },
        concepts: {
          include: {
            concept: true,
          },
        },
      },
    },
  },
};
router.get("/", async (req: Request, res: Response, next: NextFunction) => {
  const request = validateRequest(req, headersWithUserLevelSchema);
  if (request.error) {
    next(ApiError.badRequest(fromZodError(request.error).message));
    return;
  } else if (!request.data) {
    next(ApiError.badRequest("Request data is undefined"));
    return;
  }
  const level = request.data.headers["user-level"];
  const modules = await prisma.lessonModule.findMany({
    orderBy: {
      order: "asc",
    },
    where: {
      level: level,
    },
    include: {
      lessons: {
        orderBy: {
          order: "asc",
        },
        include: {
          sections: {
            orderBy: {
              order: "asc",
            },
            include: {
              exercises: {
                orderBy: {
                  order: "asc",
                },
                include: {
                  vocabularyAcquisition: {
                    include: {
                      concept: true,
                    },
                  },
                  vocabularyPractice: {
                    include: {
                      concept: true,
                      choices: true,
                    },
                  },
                  wordReordering: {
                    include: {
                      choices: true,
                    },
                  },
                  wordCompletion: {
                    include: {
                      concept: true,
                      choices: true,
                    },
                  },
                  reading: {
                    include: {
                      concept: true,
                      choices: true,
                    },
                  },
                  listening: {
                    include: {
                      concept: true,
                      choices: {
                        orderBy: {
                          order: "asc",
                        },
                        include: {
                          concept: true,
                        }
                      },
                    },
                  },
                  scriptedConversation: {
                    include: {
                      conversation: {
                        orderBy: {
                          order: "asc",
                        },
                        include: {
                          onGoodAnswer: true,
                          onBadAnswer: true,
                          concept: true,
                          choices: true,
                        },
                      },
                    },
                  },
                  explanation: {
                    include: {
                      texts: {
                        orderBy: {
                          order: "asc",
                        },
                        include: {
                          concept: true,
                        }
                      },
                    },
                  },
                }
              },
            },
          },
        },
      },
    },
  });
  if (!modules) {
    next(ApiError.internalError("Failed to get modules"));
    return;
  } else if (modules.length === 0) {
    res.json([]);
    return;
  }
  console.log(JSON.stringify(modules, null, 4));
  const finalModules = transformLessonModules(modules);
  await translateLessonModules(
    finalModules,
    request.data.headers["user-language"]
  );
  res.status(200).send(finalModules);
});
export default router;
---
Path: /src/routes/ui.ts

import express, { NextFunction, Request, Response } from "express";
import { Level, ConceptType } from "@prisma/client";
import { validateRequest } from "../zod/validation";
import { headerSchema } from "../zod/schemas";
import ApiError from "../error/api-error";
import { fromZodError } from "zod-validation-error";
import { getTranslations, translate } from "../utils/find-translation";
const router = express.Router();
async function translateEnum<T>(
  enumType: T,
  language: string,
  key: string
): Promise<{ id: string; [key: string]: string | null }[]> {
  const keys = Object.keys(enumType as object).filter((key) =>
    isNaN(Number(key))
  );
  const translations = await getTranslations(null, keys, [language]);
  const result = keys.map(
    (keyId): { id: string; [key: string]: string | null } => {
      return {
        id: keyId,
        [key]:
          translate(keyId, translations, language, null) ||
          translate(keyId, translations, "en", keyId),
      };
    }
  );
  return result;
}
router.get(
  "/levels",
  async (req: Request, res: Response, next: NextFunction) => {
    const request = validateRequest(req, headerSchema);
    if (request.error) {
      next(ApiError.badRequest(fromZodError(request.error).message));
      return;
    } else if (!request.data) {
      next(ApiError.badRequest("Request data is undefined"));
      return;
    }
    const userLanguage = request.data.headers["user-language"];
    console.log(userLanguage);
    const result = await translateEnum(Level, userLanguage, "level");
    res.json(result);
  }
);
router.get(
  "/concept-types",
  async (req: Request, res: Response, next: NextFunction) => {
    const request = validateRequest(req, headerSchema);
    if (request.error) {
      next(ApiError.badRequest(fromZodError(request.error).message));
      return;
    } else if (!request.data) {
      next(ApiError.badRequest("Request data is undefined"));
      return;
    }
    const userLanguage = request.data.headers["user-language"];
    console.log(userLanguage);
    const result = await translateEnum(ConceptType, userLanguage, "concept");
    res.json(result);
  }
);
export default router;
---
Path: /src/text-to-speech/client.ts

import { TextToSpeechClient } from "@google-cloud/text-to-speech";
export const client = new TextToSpeechClient();
---
Path: /src/text-to-speech/text-to-speech.ts

import fs from "fs";
import util from "util";
import { client } from "./client";
import { voicesByGender } from "./voices";
import axios, {AxiosResponse} from "axios";
import crypto from "crypto";
const voicesLangCodeMap = {
  en: "en-US",
  es: "es-ES",
  fr: "fr-FR",
  ja: "ja-JP",
};
const google = async (text: string,
  learningLanguage: "en" | "es" | "fr" | "ja",
  gender: "NEUTRAL" | "MALE" | "FEMALE") => {
    const encoding:
    | "MP3"
    | "AUDIO_ENCODING_UNSPECIFIED"
    | "LINEAR16"
    | "OGG_OPUS"
    | "MULAW"
    | "ALAW"
    | null
    | undefined = "MP3";
  const request = {
    input: { text: text },
    voice: {
      languageCode: voicesLangCodeMap[learningLanguage],
      name: voicesByGender[learningLanguage][gender],
    },
    audioConfig: { audioEncoding: encoding },
  };
  const outputFile = "output.mp3";
  const [response] = await client.synthesizeSpeech(request);
  const writeFile = util.promisify(fs.writeFile);
  await writeFile(outputFile, response.audioContent!, "binary");
  console.log(response.audioContent)
  console.log(`Audio content written to file: ${outputFile}`);
  return outputFile;
  }
const elevenLabs = async (text: string,
  learningLanguage: "en" | "es" | "fr" | "ja",
  voiceId: string) => {
  const hash = crypto.createHash("sha256");
  hash.update(text + voiceId);
  const outputFile = hash.digest("hex") + ".mp3";
  const pathToFile = "public/audio/" + outputFile;
  console.log(`Checking if file exists: ${pathToFile}`);
  if (fs.existsSync(pathToFile)) {
    return pathToFile;
  }
    console.log(`Using ElevenLabs API with voice: ${voiceId}`);
      const {data} = await axios.post(
        "https:
        {
          text: text,
          voice_settings: {
            "stability": 0.75,
            "similarity_boost": 0.75,
          },
          responseType: 'arraybuffer'
        },
        {
          headers: {
            'Content-Type': 'application/json',
            Accept: 'audio/mpeg',
            "xi-api-key": process.env.ELEVENLABS_API_KEY,
            responseType: 'arraybuffer'
          },
          responseType: 'arraybuffer'
        });
  const writeFile = util.promisify(fs.writeFile);
  await writeFile(pathToFile, data, "binary");
  return pathToFile;
  }
export async function textToSpeech(
  text: string,
  learningLanguage: "en" | "es" | "fr" | "ja",
  voiceId: string
) {
  return await elevenLabs(text, learningLanguage, voiceId);
}
---
Path: /src/text-to-speech/voices.ts

type voicesByGender = {
  en: {
    MALE: string;
    FEMALE: string;
    NEUTRAL?: string;
  };
  es: {
    MALE: string;
    FEMALE: string;
    NEUTRAL?: string;
  };
  fr: {
    MALE: string;
    FEMALE: string;
    NEUTRAL?: string;
  };
  ja: {
    MALE: string;
    FEMALE: string;
    NEUTRAL?: string;
  };
};
export const voicesByGender: voicesByGender = {
  en: {
    MALE: "en-US-Neural2-J",
    FEMALE: "en-US-Standard-F",
  },
  es: {
    MALE: "es-ES-Neural2-B",
    FEMALE: "es-ES-Standard-C",
  },
  fr: {
    MALE: "fr-FR-Standard-B",
    FEMALE: "fr-FR-Standard-C",
  },
  ja: {
    MALE: "ja-JP-Neural2-C",
    FEMALE: "ja-JP-Neural2-B",
  },
};
---
Path: /src/utils/convert-prisma-result.ts

import {
  ChatExchange,
  ChoiceOnListening,
  Concept,
  ConceptOnExplanation,
  Exercise,
  ExerciseType,
  Explanation,
  Lesson,
  LessonModule,
  Listening,
  Reading,
  ScriptedConversation,
  Section,
  Translation,
  VocabularyAcquisition,
  VocabularyPractice,
  WordCompletion,
  WordReordering,
} from "@prisma/client";
import { getTranslations, translate } from "./find-translation";
type VocabularyAcquisitionResult = VocabularyAcquisition & {
  concept: Concept;
};
type VocabularyPracticeResult = VocabularyPractice & {
  concept: Concept;
  choices: Concept[];
};
type WordReorderingResult = WordReordering & {
  choices: Concept[];
};
type WordCompletionResult = WordCompletion & {
  concept: Concept;
  choices: Concept[];
};
type ReadingResult = Reading & {
  text: string;
  concept: Concept;
  choices: Concept[];
};
type ChoiceOnListeningResult = ChoiceOnListening & {
  concept: Concept;
}
type ListeningResult = Listening & {
  concept: Concept;
  choices: ChoiceOnListeningResult[];
};
type ChatExchangeResult = ChatExchange & {
  concept: Concept;
  choices: Concept[];
}
type ScriptedConversationResult = ScriptedConversation & {
  conversation: ChatExchangeResult[];
};
type ExplanationResult = Explanation & {
  texts: ConceptOnExplanationResult[];
};
type ConceptOnExplanationResult = ConceptOnExplanation & {
  concept: Concept;
};
type ExerciseResult = Exercise & ({
  type: "VOCABULARY_ACQUISITION"
  vocabularyAcquisition?: VocabularyAcquisitionResult | null;
} | {
  type: "VOCABULARY_PRACTICE"
  vocabularyPractice?: VocabularyPracticeResult | null;
} | {
  type: "WORD_REORDERING"
  wordReordering?: WordReorderingResult | null;
}| {
  type: "WORD_COMPLETION"
  wordCompletion?: WordCompletionResult | null;
} | {
  type: "READING"
  reading?: ReadingResult | null;
} | {
  type: "LISTENING"
  listening?: ListeningResult | null;
} | {
  type: "SCRIPTED_CONVERSATION"
  scriptedConversation?: ScriptedConversationResult | null;
} | {
  type: "EXPLANATION"
  explanation?: ExplanationResult | null;
}
);
type SectionResult = Section & {
  exercises: ExerciseResult[];
};
type LessonResult = Lesson & {
  sections: SectionResult[];
};
type LessonModuleResult = LessonModule & {
  lessons: LessonResult[];
};
type FinalTranslatedConcept = Concept & {
  translation: string;
};
type FinalVocabularyAcquisition = VocabularyAcquisition & {
  concept: FinalTranslatedConcept;
};
type FinalVocabularyPractice = VocabularyPractice & {
  concept: FinalTranslatedConcept;
  choices: FinalTranslatedConcept[];
};
type FinalWordReordering = WordReordering & {
  choices: FinalTranslatedConcept[];
};
type FinalWordCompletion = WordCompletion & {
  concept: FinalTranslatedConcept;
  choices: FinalTranslatedConcept[];
};
type FinalReading = Reading & {
  text: string;
  concept: FinalTranslatedConcept;
  choices: FinalTranslatedConcept[];
};
type FinalListening = Listening & {
  concept: FinalTranslatedConcept;
  choices: FinalTranslatedConcept[];
};
type FinalChatExchange = ChatExchange & {
  concept: FinalTranslatedConcept;
  choices: FinalTranslatedConcept[];
};
type FinalScriptedConversation = ScriptedConversation & {
  conversation: FinalChatExchange[];
};
type FinalExplanation = Explanation & {
  texts: FinalTranslatedConcept[];
};
type FinalExercise = Exercise & ({
  type: "VOCABULARY_ACQUISITION";
  vocabularyAcquisition: FinalVocabularyAcquisition | null;
} | {
  type: "VOCABULARY_PRACTICE";
  vocabularyPractice: FinalVocabularyPractice | null;
} | {
  type: "WORD_REORDERING";
  wordReordering: FinalWordReordering | null;
} | {
  type: "WORD_COMPLETION";
  wordCompletion: FinalWordCompletion | null;
} | {
  type: "READING";
  reading: FinalReading | null;
} | {
  type: "LISTENING";
  listening: FinalListening | null;
} | {
  type: "SCRIPTED_CONVERSATION";
  scriptedConversation: FinalScriptedConversation | null;
} | {
  type: "EXPLANATION";
  explanation: FinalExplanation | null;
}
);
type FinalSection = Section & {
  exercises: FinalExercise[];
};
type FinalLesson = Lesson & {
  sections: FinalSection[];
};
type FinalLessonModule = LessonModule & {
  lessons: FinalLesson[];
};
export function transformConcepts(
  concepts: Concept[]
): FinalTranslatedConcept[] {
  return concepts.map(transformConcept);
}
export function transformConcept(concept: Concept): FinalTranslatedConcept {
  return {
    ...concept,
    translation: concept.content,
  };
}
export function transformVocabularyAcquisition(
  vocabularyAcquisition: VocabularyAcquisitionResult | null | undefined
): FinalVocabularyAcquisition | null {
  if (!vocabularyAcquisition) {
    return null;
  }
  return {
    ...vocabularyAcquisition,
    concept: transformConcept(vocabularyAcquisition.concept),
  };
}
export function transformVocabularyPractice(
  vocabularyPractice: VocabularyPracticeResult | null | undefined
): FinalVocabularyPractice | null {
  if (!vocabularyPractice) {
    return null;
  }
  return {
    ...vocabularyPractice,
    concept: transformConcept(vocabularyPractice.concept),
    choices: [...vocabularyPractice.choices.map(transformConcept)]
  };
}
export function transformWordReordering(
  wordReordering: WordReorderingResult | null | undefined
): FinalWordReordering | null {
  if (!wordReordering) {
    return null;
  }
  return {
    ...wordReordering,
    choices: [...wordReordering.choices.map(transformConcept)]
  };
}
export function transformWordCompletion(
  wordCompletion: WordCompletionResult | null | undefined
): FinalWordCompletion | null {
  if (!wordCompletion) {
    return null;
  }
  return {
    ...wordCompletion,
    concept: transformConcept(wordCompletion.concept),
    choices: [...wordCompletion.choices.map(transformConcept)]
  };
}
export function transformReading(
  reading: ReadingResult | null | undefined
): FinalReading | null {
  if (!reading) {
    return null;
  }
  return {
    ...reading,
    concept: transformConcept(reading.concept),
    choices: [...reading.choices.map(transformConcept)]
  };
}
export function transformListening(
  listening: ListeningResult | null | undefined
): FinalListening | null {
  if (!listening) {
    return null;
  }
  return {
    ...listening,
    audio: process.env.API_URL + listening.audio,
    image: listening.image ? process.env.API_URL + listening.image : null,
    displayWords: listening.displayWords,
    concept: transformConcept(listening.concept),
    choices: [...listening.choices.map(c => c.concept).map(transformConcept)]
  };
}
export function transformExercises(
  sections: ExerciseResult[]
): FinalExercise[] {
  var res = sections.map(transformExercise).filter((exercise) => {
    return exercise !== null;
  }) as FinalExercise[];
  return res;
}
export function transformChatExchanges(
  chatExchanges: ChatExchangeResult[]
): FinalChatExchange[] {
  return chatExchanges.map(transformChatExchange).filter((chatExchange) => {
    return chatExchange !== null;
  }) as FinalChatExchange[];
}
export function transformChatExchange(
  chatExchange: ChatExchangeResult | null | undefined
): FinalChatExchange | null {
  if (!chatExchange) {
    return null;
  }
  return {
    ...chatExchange,
    concept: transformConcept(chatExchange.concept),
    choices: [...chatExchange.choices.map(transformConcept)]
  };
}
export function transformScriptedConversation(
  scriptedConversation: ScriptedConversationResult | null | undefined
): FinalScriptedConversation | null {
  if (!scriptedConversation) {
    return null;
  }
  return {
    ...scriptedConversation,
    conversation: transformChatExchanges(scriptedConversation.conversation),
  };
}
export function transformExplanation(
  explanation: ExplanationResult | null | undefined
): FinalExplanation | null {
  if (!explanation) {
    return null;
  }
  return {
    ...explanation,
    texts: transformConcepts(explanation.texts.map((text) => text.concept)),
  };
}
export function transformExercise(
  exercise: ExerciseResult | null
): FinalExercise | null {
  if (!exercise) {
    return null;
  }
  var data: FinalExercise | null = null;
  if (exercise.type === ExerciseType.VOCABULARY_ACQUISITION) {
    data = {
      ...exercise,
      type: "VOCABULARY_ACQUISITION",
      vocabularyAcquisition: transformVocabularyAcquisition(
        exercise.vocabularyAcquisition
      ),
    }
  } else if (exercise.type === ExerciseType.VOCABULARY_PRACTICE) {
    data = {
      ...exercise,
      type: "VOCABULARY_PRACTICE",
      vocabularyPractice: transformVocabularyPractice(
        exercise.vocabularyPractice
      ),
    }
  } else if (exercise.type === ExerciseType.WORD_REORDERING) {
    data = {
      ...exercise,
      type: "WORD_REORDERING",
      wordReordering: transformWordReordering(
        exercise.wordReordering
      ),
    }
  } else if (exercise.type === ExerciseType.WORD_COMPLETION) {
    data = {
      ...exercise,
      type: "WORD_COMPLETION",
      wordCompletion: transformWordCompletion(
        exercise.wordCompletion
      ),
    }
  } else if (exercise.type === ExerciseType.READING) {
    data = {
      ...exercise,
      type: "READING",
      reading: transformReading(
        exercise.reading
      ),
    }
  } else if (exercise.type === ExerciseType.LISTENING) {
    data = {
      ...exercise,
      type: "LISTENING",
      listening: transformListening(
        exercise.listening
      ),
    }
  } else if (exercise.type === ExerciseType.SCRIPTED_CONVERSATION) {
    data = {
      ...exercise,
      type: "SCRIPTED_CONVERSATION",
      scriptedConversation: transformScriptedConversation(
        exercise.scriptedConversation
      ),
    }
  } else if (exercise.type === ExerciseType.EXPLANATION) {
    data = {
      ...exercise,
      type: "EXPLANATION",
      explanation: transformExplanation(
        exercise.explanation
      ),
    }
  }
  return data;
}
export function transformSections(
  sections: SectionResult[]
): FinalSection[] {
  var res = sections.map(transformSection).filter((section) => {
    return section !== null;
  }) as FinalSection[];
  return res;
}
export function transformSection(
  section: SectionResult | null
): FinalSection | null {
  if (!section) {
    return null;
  }
  return {
    ...section,
    background: section.background ? process.env.API_URL + section.background : null,
    exercises: transformExercises(section.exercises),
  };
}
export function transformLessons(lessons: LessonResult[]): FinalLesson[] {
  return lessons.map(transformLesson);
}
export function transformLesson(lesson: LessonResult): FinalLesson {
  return {
    ...lesson,
    sections: transformSections(lesson.sections),
  };
}
export function transformLessonModules(
  lessonModules: LessonModuleResult[]
): FinalLessonModule[] {
  return lessonModules.map(transformLessonModule);
}
export function transformLessonModule(
  lessonModule: LessonModuleResult
): FinalLessonModule {
  return {
    ...lessonModule,
    lessons: transformLessons(lessonModule.lessons),
  };
}
export function getConceptsTranslationKeys(concepts: Concept[]): string[] {
  return concepts.flatMap((concept) => {
    return concept.content;
  });
}
export function getVocabularyAcquisitionKeys(
  vocabularyAcquisition: FinalVocabularyAcquisition | null
): string[] {
  if (!vocabularyAcquisition) {
    return [];
  }
  return [vocabularyAcquisition.concept.content];
}
export function getVocabularyPracticeKeys(
  vocabularypractice: FinalVocabularyPractice | null
): string[] {
  if (!vocabularypractice) {
    return [];
  }
  return [vocabularypractice.concept.content, ...vocabularypractice.choices.map((choice) => {
    return choice.content;
  })  ];
}
export function getWordReorderingTranslationKeys(
  wordReordering: FinalWordReordering | null
): string[] {
  if (!wordReordering) {
    return [];
  }
  return [...wordReordering.choices.map((choice) => {
    return choice.content;
  })  ];
}
export function getWordCompletionKeys(
  wordCompletion: FinalWordCompletion | null
): string[] {
  if (!wordCompletion) {
    return [];
  }
  return [wordCompletion.concept.content, ...wordCompletion.choices.map((choice) => {
    return choice.content;
  })  ];
}
export function getReadingKeys(
  reading: FinalReading | null
): string[] {
  if (!reading) {
    return [];
  }
  return [reading.concept.content, ...reading.choices.map((choice) => {
    return choice.content;
  })  ];
}
export function getListeningKeys(
  listening: FinalListening | null
): string[] {
  if (!listening) {
    return [];
  }
  return [listening.concept.content, ...listening.choices.map((choice) => {
    return choice.content;
  })  ];
}
export function getChatExchangesKeys(
  chatExchanges: FinalChatExchange[]
): string[] {
  return chatExchanges.flatMap(getChatExchangeKeys);
}
export function getChatExchangeKeys(
  chatExchange: FinalChatExchange
): string[] {
  var keys: string[] = [];
  keys = [...keys, ...getConceptsTranslationKeys([chatExchange.concept])];
  keys = [...keys, ...getConceptsTranslationKeys(chatExchange.choices)];
  return keys;
}
export function getScriptedConversationKeys(
  scriptedConversation: FinalScriptedConversation | null
): string[] {
  if (!scriptedConversation) {
    return [];
  }
  return [...getChatExchangesKeys(scriptedConversation.conversation)];
}
export function getExplanationKeys(
  explanation: FinalExplanation | null
): string[] {
  if (!explanation) {
    return [];
  }
  return [...getConceptsTranslationKeys(explanation.texts)];
}
export function getExercisesTranslationKeys(
  exercises: FinalExercise[]
): string[] {
  return exercises.flatMap(getExerciseTranslationKeys);
}
export function getExerciseTranslationKeys(
  exercise: FinalExercise
): string[] {
  var keys: string[] = [];
  if (exercise.type === ExerciseType.VOCABULARY_ACQUISITION) {
    keys = [...keys, ...getVocabularyAcquisitionKeys(exercise.vocabularyAcquisition)];
  } else if (exercise.type === ExerciseType.VOCABULARY_PRACTICE) {
    keys = [...keys, ...getVocabularyPracticeKeys(exercise.vocabularyPractice)];
  } else if (exercise.type === ExerciseType.WORD_REORDERING) {
    keys = [...keys, ...getWordReorderingTranslationKeys(exercise.wordReordering)];
  } else if (exercise.type === ExerciseType.WORD_COMPLETION) {
    keys = [...keys, ...getWordCompletionKeys(exercise.wordCompletion)];
  } else if (exercise.type === ExerciseType.READING) {
    keys = [...keys, ...getReadingKeys(exercise.reading)];
  } else if (exercise.type === ExerciseType.LISTENING) {
    keys = [...keys, ...getListeningKeys(exercise.listening)];
  } else if (exercise.type === ExerciseType.SCRIPTED_CONVERSATION) {
    keys = [...keys, ...getScriptedConversationKeys(exercise.scriptedConversation)];
  } else if (exercise.type === ExerciseType.EXPLANATION) {
    keys = [...keys, ...getExplanationKeys(exercise.explanation)];
  }
  return keys;
}
export function getSectionsTranslationKeys(
  sections: FinalSection[]
): string[] {
  return sections.flatMap(getSectionTranslationKeys);
}
export function getSectionTranslationKeys(
  section: FinalSection
): string[] {
  var keys: string[] = [];
  keys = [...keys, ...getExercisesTranslationKeys(section.exercises)];
  return keys;
}
export function getLessonsTranslationKeys(lessons: FinalLesson[]): string[] {
  return lessons.flatMap(getLessonTranslationKeys);
}
export function getLessonTranslationKeys(lesson: FinalLesson): string[] {
  var keys: string[] = [];
  keys.push(lesson.title);
  keys = [
    ...keys,
    ...getSectionsTranslationKeys(lesson.sections),
  ];
  return keys;
}
export function getLessonModulesTranslationKeys(
  lessonModules: FinalLessonModule[]
): string[] {
  return lessonModules.flatMap(getLessonModuleTranslationKeys);
}
export function getLessonModuleTranslationKeys(
  module: FinalLessonModule
): string[] {
  var keys: string[] = [];
  keys.push(module.title);
  keys = [...keys, ...getLessonsTranslationKeys(module.lessons)];
  return keys;
}
export function translateConcepts(
  concepts: FinalTranslatedConcept[],
  language: string,
  translations: Translation[]
) {
  for (var concept of concepts) {
    translateConcept(concept, language, translations);
  }
}
export function translateConcept(
  concept: FinalTranslatedConcept,
  language: string,
  translations: Translation[]
) {
  var content = concept.content;
  concept.translation = translate(content, translations, language, content)!;
  concept.content = translate(content, translations, "en", content)!;
  concept.image = concept.image ? process.env.API_URL + concept.image : null;
}
export function translateVocabularyAcquisition(
  vocabularyAcquisition: FinalVocabularyAcquisition | null,
  language: string,
  translations: Translation[]
) {
  if (!vocabularyAcquisition) {
    return;
  }
  translateConcept(vocabularyAcquisition.concept, language, translations);
}
export function translateVocabularyPractice(
  vocabularyPractice: FinalVocabularyPractice | null,
  language: string,
  translations: Translation[]
) {
  if (!vocabularyPractice) {
    return;
  }
  translateConcept(vocabularyPractice.concept, language, translations);
  translateConcepts(vocabularyPractice.choices, language, translations);
}
export function translateWordReordering(
  wordReordering: FinalWordReordering | null,
  language: string,
  translations: Translation[]
) {
  if (!wordReordering) {
    return;
  }
  translateConcepts(wordReordering.choices, language, translations);
}
export function translateWordCompletion(
  wordCompletion: FinalWordCompletion | null,
  language: string,
  translations: Translation[]
) {
  if (!wordCompletion) {
    return;
  }
  translateConcept(wordCompletion.concept, language, translations);
  translateConcepts(wordCompletion.choices, language, translations);
}
export function translateReading(
  reading: FinalReading | null,
  language: string,
  translations: Translation[]
) {
  if (!reading) {
    return;
  }
  translateConcept(reading.concept, language, translations);
  translateConcepts(reading.choices, language, translations);
}
export function translateListening(
  listening: FinalListening | null,
  language: string,
  translations: Translation[]
) {
  if (!listening) {
    return;
  }
  translateConcept(listening.concept, language, translations);
  translateConcepts(listening.choices, language, translations);
}
export function translateChatExchanges(
  chatExchanges: FinalChatExchange[],
  language: string,
  translations: Translation[]
) {
  for (var chatExchange of chatExchanges) {
    translateChatExchange(chatExchange, language, translations);
  }
}
export function translateChatExchange(
  chatExchange: FinalChatExchange | null,
  language: string,
  translations: Translation[]
) {
  if (!chatExchange) {
    return;
  }
  translateConcept(chatExchange.concept, language, translations);
  translateConcepts(chatExchange.choices, language, translations);
}
export function translateScriptedConversation(
  scriptedConversation: FinalScriptedConversation | null,
  language: string,
  translations: Translation[]
) {
  if (!scriptedConversation) {
    return;
  }
  translateChatExchanges(scriptedConversation.conversation, language, translations);
}
export function translateExplanation(
  explanation: FinalExplanation | null,
  language: string,
  translations: Translation[]
) {
  if (!explanation) {
    return;
  }
  translateConcepts(explanation.texts, language, translations);
}
export function translateExercises(
  exercises: FinalExercise[],
  language: string,
  translations: Translation[]
) {
  for (var exercise of exercises) {
    translateExercise(exercise, language, translations);
  }
}
export function translateExercise(
  exercise: FinalExercise | null,
  language: string,
  translations: Translation[]
) {
  if (!exercise) {
    return;
  }
  if (exercise.type === ExerciseType.VOCABULARY_ACQUISITION) {
    translateVocabularyAcquisition(exercise.vocabularyAcquisition, language, translations);
  } else if (exercise.type === ExerciseType.VOCABULARY_PRACTICE) {
    translateVocabularyPractice(exercise.vocabularyPractice, language, translations);
  } else if (exercise.type === ExerciseType.WORD_REORDERING) {
    translateWordReordering(exercise.wordReordering, language, translations);
  } else if (exercise.type === ExerciseType.WORD_COMPLETION) {
    translateWordCompletion(exercise.wordCompletion, language, translations);
  } else if (exercise.type === ExerciseType.READING) {
    translateReading(exercise.reading, language, translations);
  } else if (exercise.type === ExerciseType.LISTENING) {
    translateListening(exercise.listening, language, translations);
  } else if (exercise.type === ExerciseType.SCRIPTED_CONVERSATION) {
    translateScriptedConversation(exercise.scriptedConversation, language, translations);
  } else if (exercise.type === ExerciseType.EXPLANATION) {
    translateExplanation(exercise.explanation, language, translations);
  }
}
export function translateSections(
  sections: FinalSection[],
  language: string,
  translations: Translation[]
) {
  for (var section of sections) {
    translateSection(section, language, translations);
  }
}
export function translateSection(
  section: FinalSection | null,
  language: string,
  translations: Translation[]
) {
  if (!section) {
    return;
  }
  translateExercises(section.exercises, language, translations);
}
export function translateLessons(
  lessons: FinalLesson[],
  language: string,
  translations: Translation[]
) {
  for (var lesson of lessons) {
    lesson.title = translate(
      lesson.title,
      translations,
      language,
      lesson.title
    )!;
    lesson.description = translate(
      lesson.description,
      translations,
      "en",
      lesson.description
    )!;
    lesson.image = lesson.image
      ? process.env.API_URL + "/public/images/lessons/" + lesson.image
      : null;
    translateSections(lesson.sections, language, translations);
  }
}
export async function translateLessonModules(
  modules: FinalLessonModule[],
  language: string
) {
  const keys = getLessonModulesTranslationKeys(modules);
  console.log("keys", keys);
  const translations = await getTranslations(null, keys, [language]);
  for (var module of modules) {
    module.description = translate(
      module.title,
      translations,
      "en",
      module.title
    )!;
    module.title = translate(
      module.title,
      translations,
      language,
      module.title
    )!;
    module.image = module.image
      ? process.env.API_URL + "/public/images/lessons/" + module.image
      : null;
    translateLessons(module.lessons, language, translations);
  }
}
---
Path: /src/utils/find-translation.ts

import { PrismaClient, Translation } from "@prisma/client";
import { prisma } from "../prisma/client";
export async function getTranslations(
  tx: Omit<
    PrismaClient,
    "$connect" | "$disconnect" | "$on" | "$transaction" | "$use" | "$extends"
  > | null,
  keys: string[],
  language: string[]
) {
  var client = tx ? tx : prisma;
  if (keys.length === 0) return [];
  if (language.length === 0) return [];
  const desiredTranslations = await client.translation.findMany({
    where: {
      AND: [{ key: { in: keys } }, { language: { in: language } }],
    },
  });
  const missingKeys = keys.filter(
    (key: string) =>
      !desiredTranslations.some((translation) => translation.key === key)
  );
  const fallbackTranslations =
    missingKeys.length > 0
      ? await prisma.translation.findMany({
          where: {
            AND: [{ key: { in: missingKeys } }, { language: "en" }],
          },
        })
      : [];
  return [...desiredTranslations, ...fallbackTranslations];
}
export function translate(
  key: string | null,
  translations: Translation[],
  language: string,
  fallbackValue: string | null | undefined = undefined
): string | null {
  const translation = translations.find(
    (t) => t.key === key && t.language === language
  );
  if (!translation && language !== "en") {
    return translate(key, translations, "en", fallbackValue);
  }
  if (translation) return translation?.value;
  if (fallbackValue !== undefined) return fallbackValue;
  return fallbackValue || key || "";
}
---
Path: /src/utils/parse-alphanumeric.ts

export function parseAlphanumeric(text: string): string {
  return text.replace(/[^a-zA-Z0-9 ]/g, "");
}
---
Path: /src/zod/schemas.ts

import { ChatCompletionRequestMessage } from "openai";
import { z } from "zod";
const languages = z.enum(["en", "es", "fr", "ja"]);
const defaultHeaders = z.object({
  "user-language": z.string().min(2).max(2),
  "learning-language": languages,
});
export const headerSchema = z.object({
  headers: defaultHeaders,
});
const dialogueSchema = z.object({
  role: z.enum(["user", "system", "assistant"]),
  concept: z.object({ content: z.string() }),
  name: z.string().optional(),
});
export const headersWithUserLevelSchema = z.object({
  headers: z.object({
    ...defaultHeaders.shape,
    "user-level": z.enum(["BEGINNER", "INTERMEDIATE", "ADVANCED"]),
  }),
});
export const chatSchema = z.object({
  body: z.object({
    characterInfoId: z.string().optional(),
    dialogue: z.array(dialogueSchema),
    conversationId: z.string().optional(),
  }),
  headers: defaultHeaders,
});
export const lessonSummarySchema = z.object({
  body: z.object({
    dialogue: z.array(dialogueSchema),
  }),
  headers: defaultHeaders,
});
export const contentSchema = z.object({
  query: z.object({
    id: z.string(),
  }),
  headers: defaultHeaders,
});
export const activationCodeSchema = z.object({
  query: z.object({
    code: z.string(),
  }),
});
const objectiveSchema = z.object({
  description: z.string(),
  intent: z.enum(["GetDirections", "EndInteraction", "Greet", "StartPurchase"]),
  entity: z.string().optional(),
});
export const conversationSchema = z.object({
  body: z.object({
    avatarId: z.string(),
    objectives: z.array(objectiveSchema),
    classId: z.string(),
    name: z.string().optional(),
  }),
});
export const classCreationSchema = z.object({
  body: z.object({
    name: z.string(),
  }),
});
export const ttsSchema = z.object({
  query: z.object({
    text: z.string(),
    characterId: z.string(),
  }),
  headers: defaultHeaders,
});
export const translateSchema = z.object({
  query: z.object({
    text: z.string(),
  }),
  headers: defaultHeaders,
});
---
Path: /src/zod/validation.ts

import { Request } from "express";
import z, { ZodError, ZodType } from "zod";
export function validateRequest<T extends ZodType<any, any>>(
  req: Request,
  schema: T
): {
  success: boolean;
  error: ZodError | null;
  data: z.infer<T> | null;
} {
  const data = schema.safeParse({
    body: req.body,
    query: req.query,
    headers: req.headers,
  });
  if (data.success) {
    return {
      success: true,
      data: data.data,
      error: null,
    };
  } else {
    return {
      success: false,
      error: data.error,
      data: null,
    };
  }
}
---
Path: /tools/csvPromptAndThemeToJSON.js

const csv = require("csv-parser");
const fs = require("fs");
const results = [];
fs.createReadStream("./tools/promptAndTheme.csv")
  .pipe(csv())
  .on("data", (data) => {
    const theme = data["Theme #1"];
    const key = theme.toLowerCase().replace(/ /g, "_");
    const prompt = data["Prompt1"];
    const firstSentence = data["AI Greeting"];
    const level = data["Level"];
    const finalLevel =
      level === "A1/Eiken Grade 5"
        ? "Level.BEGINNER"
        : level == "A2/Eiken Grade 4"
        ? "Level.INTERMEDIATE"
        : "Level.ADVANCED";
    results.push({
      key: key,
      title: theme,
      prompt: `Stick with ${prompt}`,
      image: "meeting.png",
      level: finalLevel,
      isPro: false,
      characterInfoFirstSentence: firstSentence,
    });
  })
  .on("end", () => {
    console.log(results);
  });
---
Path: /tools/csvPromptAndThemeTranslationToJSON.js

const csv = require("csv-parser");
const fs = require("fs");
const results = [];
fs.createReadStream("./tools/promptAndTheme.csv")
  .pipe(csv())
  .on("data", (data) => {
    const theme = data["Theme #1"];
    const translation = data["Japanese "];
    results.push({
      key: theme,
      language: "ja",
      value: translation,
    });
  })
  .on("end", () => {
    console.log(results);
  });
---

